
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800c100  0800c100  0001c100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c460  0800c460  00020244  2**0
                  CONTENTS
  4 .ARM          00000000  0800c460  0800c460  00020244  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c460  0800c460  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c460  0800c460  0001c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c464  0800c464  0001c464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800c468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  20000244  0800c6ac  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  0800c6ac  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a72b  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000302c  00000000  00000000  0003a99f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001778  00000000  00000000  0003d9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001630  00000000  00000000  0003f148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d12  00000000  00000000  00040778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001493f  00000000  00000000  0006148a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c73df  00000000  00000000  00075dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d1a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007204  00000000  00000000  0013d224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0e4 	.word	0x0800c0e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800c0e4 	.word	0x0800c0e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	; 0x38
 8000c8c:	af0a      	add	r7, sp, #40	; 0x28
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	817b      	strh	r3, [r7, #10]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	813b      	strh	r3, [r7, #8]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <LiquidCrystal+0x90>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d019      	beq.n	8000cde <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000caa:	8939      	ldrh	r1, [r7, #8]
 8000cac:	897a      	ldrh	r2, [r7, #10]
 8000cae:	2300      	movs	r3, #0
 8000cb0:	9308      	str	r3, [sp, #32]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	9307      	str	r3, [sp, #28]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	9306      	str	r3, [sp, #24]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	9305      	str	r3, [sp, #20]
 8000cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cc0:	9304      	str	r3, [sp, #16]
 8000cc2:	8c3b      	ldrh	r3, [r7, #32]
 8000cc4:	9303      	str	r3, [sp, #12]
 8000cc6:	8bbb      	ldrh	r3, [r7, #28]
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	8b3b      	ldrh	r3, [r7, #24]
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 f820 	bl	8000d1c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000cdc:	e018      	b.n	8000d10 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000cde:	8939      	ldrh	r1, [r7, #8]
 8000ce0:	897a      	ldrh	r2, [r7, #10]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	9308      	str	r3, [sp, #32]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9307      	str	r3, [sp, #28]
 8000cea:	2300      	movs	r3, #0
 8000cec:	9306      	str	r3, [sp, #24]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9305      	str	r3, [sp, #20]
 8000cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cf4:	9304      	str	r3, [sp, #16]
 8000cf6:	8c3b      	ldrh	r3, [r7, #32]
 8000cf8:	9303      	str	r3, [sp, #12]
 8000cfa:	8bbb      	ldrh	r3, [r7, #28]
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	8b3b      	ldrh	r3, [r7, #24]
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	460b      	mov	r3, r1
 8000d08:	68f9      	ldr	r1, [r7, #12]
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f806 	bl	8000d1c <init>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000

08000d1c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	4611      	mov	r1, r2
 8000d26:	461a      	mov	r2, r3
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	81bb      	strh	r3, [r7, #12]
 8000d30:	4613      	mov	r3, r2
 8000d32:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000d34:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <init+0x84>)
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <init+0x88>)
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <init+0x8c>)
 8000d42:	8b3b      	ldrh	r3, [r7, #24]
 8000d44:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000d46:	4a19      	ldr	r2, [pc, #100]	; (8000dac <init+0x90>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <init+0x94>)
 8000d4e:	8bbb      	ldrh	r3, [r7, #28]
 8000d50:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <init+0x94>)
 8000d54:	8c3b      	ldrh	r3, [r7, #32]
 8000d56:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000d58:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <init+0x94>)
 8000d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d5c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <init+0x94>)
 8000d60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d62:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <init+0x94>)
 8000d66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d68:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <init+0x94>)
 8000d6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d6e:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <init+0x94>)
 8000d72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d74:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <init+0x94>)
 8000d78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d7a:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e002      	b.n	8000d90 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <init+0x98>)
 8000d8c:	2210      	movs	r2, #16
 8000d8e:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000d90:	2102      	movs	r1, #2
 8000d92:	2010      	movs	r0, #16
 8000d94:	f000 f810 	bl	8000db8 <begin>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200002b8 	.word	0x200002b8
 8000da4:	20000298 	.word	0x20000298
 8000da8:	200002b6 	.word	0x200002b6
 8000dac:	2000029c 	.word	0x2000029c
 8000db0:	200002a4 	.word	0x200002a4
 8000db4:	200002b5 	.word	0x200002b5

08000db8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d906      	bls.n	8000ddc <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000dce:	4b77      	ldr	r3, [pc, #476]	; (8000fac <begin+0x1f4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b74      	ldr	r3, [pc, #464]	; (8000fac <begin+0x1f4>)
 8000dda:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000ddc:	4a74      	ldr	r2, [pc, #464]	; (8000fb0 <begin+0x1f8>)
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3340      	adds	r3, #64	; 0x40
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f988 	bl	8001100 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000df0:	4b70      	ldr	r3, [pc, #448]	; (8000fb4 <begin+0x1fc>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d009      	beq.n	8000e0c <begin+0x54>
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d106      	bne.n	8000e0c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000dfe:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <begin+0x1f4>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b68      	ldr	r3, [pc, #416]	; (8000fac <begin+0x1f4>)
 8000e0a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000e0c:	f000 f8e4 	bl	8000fd8 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000e18:	4b67      	ldr	r3, [pc, #412]	; (8000fb8 <begin+0x200>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d01b      	beq.n	8000e58 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000e20:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <begin+0x204>)
 8000e22:	881a      	ldrh	r2, [r3, #0]
 8000e24:	4b66      	ldr	r3, [pc, #408]	; (8000fc0 <begin+0x208>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b65      	ldr	r3, [pc, #404]	; (8000fc4 <begin+0x20c>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <begin+0x210>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b62      	ldr	r3, [pc, #392]	; (8000fc8 <begin+0x210>)
 8000e3e:	885b      	ldrh	r3, [r3, #2]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b60      	ldr	r3, [pc, #384]	; (8000fc8 <begin+0x210>)
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <begin+0x210>)
 8000e4e:	88db      	ldrh	r3, [r3, #6]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e02a      	b.n	8000eae <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000e58:	4b58      	ldr	r3, [pc, #352]	; (8000fbc <begin+0x204>)
 8000e5a:	881a      	ldrh	r2, [r3, #0]
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <begin+0x208>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <begin+0x20c>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000e6c:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <begin+0x210>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <begin+0x210>)
 8000e76:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000e7c:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <begin+0x210>)
 8000e7e:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <begin+0x210>)
 8000e86:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <begin+0x210>)
 8000e8e:	891b      	ldrh	r3, [r3, #8]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <begin+0x210>)
 8000e96:	895b      	ldrh	r3, [r3, #10]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <begin+0x210>)
 8000e9e:	899b      	ldrh	r3, [r3, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <begin+0x210>)
 8000ea6:	89db      	ldrh	r3, [r3, #14]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000eac:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000eae:	4b47      	ldr	r3, [pc, #284]	; (8000fcc <begin+0x214>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f107 020c 	add.w	r2, r7, #12
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fee9 	bl	8004c90 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8000ebe:	2032      	movs	r0, #50	; 0x32
 8000ec0:	f002 fa2a 	bl	8003318 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <begin+0x214>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	; (8000fbc <begin+0x204>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f004 f870 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000ed4:	4b3d      	ldr	r3, [pc, #244]	; (8000fcc <begin+0x214>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <begin+0x20c>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f004 f868 	bl	8004fb4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <begin+0x208>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	2bff      	cmp	r3, #255	; 0xff
 8000eea:	d007      	beq.n	8000efc <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000eec:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <begin+0x214>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <begin+0x208>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f004 f85c 	bl	8004fb4 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <begin+0x1f4>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d115      	bne.n	8000f34 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 fa43 	bl	8001394 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f002 fa02 	bl	8003318 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 fa3d 	bl	8001394 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000f1a:	2005      	movs	r0, #5
 8000f1c:	f002 f9fc 	bl	8003318 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fa37 	bl	8001394 <write4bits>
    HAL_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f002 f9f6 	bl	8003318 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f000 fa31 	bl	8001394 <write4bits>
 8000f32:	e01d      	b.n	8000f70 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <begin+0x1f4>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f9a3 	bl	800128a <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000f44:	2005      	movs	r0, #5
 8000f46:	f002 f9e7 	bl	8003318 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <begin+0x1f4>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f998 	bl	800128a <command>
    HAL_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f002 f9dc 	bl	8003318 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <begin+0x1f4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f98d 	bl	800128a <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <begin+0x1f4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f985 	bl	800128a <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <begin+0x218>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	701a      	strb	r2, [r3, #0]
  display();
 8000f86:	f000 f917 	bl	80011b8 <display>

  // clear it off
  clear();
 8000f8a:	f000 f8d9 	bl	8001140 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <begin+0x21c>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <begin+0x21c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f973 	bl	800128a <command>

}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200002b5 	.word	0x200002b5
 8000fb0:	200002a1 	.word	0x200002a1
 8000fb4:	20000260 	.word	0x20000260
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	200002b8 	.word	0x200002b8
 8000fc0:	20000298 	.word	0x20000298
 8000fc4:	200002b6 	.word	0x200002b6
 8000fc8:	200002a4 	.word	0x200002a4
 8000fcc:	2000029c 	.word	0x2000029c
 8000fd0:	200002a0 	.word	0x200002a0
 8000fd4:	200002b4 	.word	0x200002b4

08000fd8 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000fde:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <enableClock+0x10c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fe6:	d10c      	bne.n	8001002 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <enableClock+0x110>)
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	4a3e      	ldr	r2, [pc, #248]	; (80010e8 <enableClock+0x110>)
 8000fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff2:	6153      	str	r3, [r2, #20]
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <enableClock+0x110>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8001000:	e06a      	b.n	80010d8 <enableClock+0x100>
  else if(_port == GPIOB)
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <enableClock+0x10c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a39      	ldr	r2, [pc, #228]	; (80010ec <enableClock+0x114>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d10c      	bne.n	8001026 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <enableClock+0x110>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <enableClock+0x110>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001016:	6153      	str	r3, [r2, #20]
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <enableClock+0x110>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	69bb      	ldr	r3, [r7, #24]
}
 8001024:	e058      	b.n	80010d8 <enableClock+0x100>
  else if(_port == GPIOB)
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <enableClock+0x10c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <enableClock+0x114>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d10c      	bne.n	800104a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <enableClock+0x110>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <enableClock+0x110>)
 8001036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103a:	6153      	str	r3, [r2, #20]
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <enableClock+0x110>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
}
 8001048:	e046      	b.n	80010d8 <enableClock+0x100>
	else if(_port == GPIOC)
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <enableClock+0x10c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <enableClock+0x118>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d10c      	bne.n	800106e <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <enableClock+0x110>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <enableClock+0x110>)
 800105a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800105e:	6153      	str	r3, [r2, #20]
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <enableClock+0x110>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
}
 800106c:	e034      	b.n	80010d8 <enableClock+0x100>
	else if(_port == GPIOD)
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <enableClock+0x10c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <enableClock+0x11c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d10c      	bne.n	8001092 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <enableClock+0x110>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <enableClock+0x110>)
 800107e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001082:	6153      	str	r3, [r2, #20]
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <enableClock+0x110>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	e022      	b.n	80010d8 <enableClock+0x100>
	else if(_port == GPIOE)
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <enableClock+0x10c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <enableClock+0x120>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d10c      	bne.n	80010b6 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <enableClock+0x110>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <enableClock+0x110>)
 80010a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a6:	6153      	str	r3, [r2, #20]
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <enableClock+0x110>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
}
 80010b4:	e010      	b.n	80010d8 <enableClock+0x100>
	else if(_port == GPIOF)
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <enableClock+0x10c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <enableClock+0x124>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d10b      	bne.n	80010d8 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <enableClock+0x110>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <enableClock+0x110>)
 80010c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ca:	6153      	str	r3, [r2, #20]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <enableClock+0x110>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	bf00      	nop
 80010da:	3724      	adds	r7, #36	; 0x24
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	2000029c 	.word	0x2000029c
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	48001000 	.word	0x48001000
 80010fc:	48001400 	.word	0x48001400

08001100 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <setRowOffsets+0x3c>)
 8001114:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <setRowOffsets+0x3c>)
 800111c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <setRowOffsets+0x3c>)
 8001124:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <setRowOffsets+0x3c>)
 800112c:	70da      	strb	r2, [r3, #3]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000294 	.word	0x20000294

08001140 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8001144:	2001      	movs	r0, #1
 8001146:	f000 f8a0 	bl	800128a <command>
  HAL_Delay(2);  // this command takes a long time!
 800114a:	2002      	movs	r0, #2
 800114c:	f002 f8e4 	bl	8003318 <HAL_Delay>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001164:	2304      	movs	r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d803      	bhi.n	8001178 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3b01      	subs	r3, #1
 8001176:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <setCursor+0x5c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	429a      	cmp	r2, r3
 8001180:	d303      	bcc.n	800118a <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <setCursor+0x5c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <setCursor+0x60>)
 800118e:	5cd2      	ldrb	r2, [r2, r3]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4413      	add	r3, r2
 8001194:	b2db      	uxtb	r3, r3
 8001196:	b25b      	sxtb	r3, r3
 8001198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800119c:	b25b      	sxtb	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f872 	bl	800128a <command>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200002a1 	.word	0x200002a1
 80011b4:	20000294 	.word	0x20000294

080011b8 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <display+0x28>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <display+0x28>)
 80011c8:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <display+0x28>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f858 	bl	800128a <command>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002a0 	.word	0x200002a0

080011e4 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <print+0x12>
 80011f2:	2300      	movs	r3, #0
 80011f4:	e01d      	b.n	8001232 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7fe ffe8 	bl	80001d0 <strlen>
 8001200:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001206:	e00c      	b.n	8001222 <print+0x3e>
    if (write(*buffer++)) n++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	617a      	str	r2, [r7, #20]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f848 	bl	80012a6 <write>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <print+0x4a>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	613a      	str	r2, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ed      	bne.n	8001208 <print+0x24>
 800122c:	e000      	b.n	8001230 <print+0x4c>
    else break;
 800122e:	bf00      	nop
  }
  return n;
 8001230:	68fb      	ldr	r3, [r7, #12]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	6039      	str	r1, [r7, #0]
 8001244:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	b25b      	sxtb	r3, r3
 8001254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f814 	bl	800128a <command>
  for (int i=0; i<8; i++) {
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	e009      	b.n	800127c <createChar+0x42>
    write(charmap[i]);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f818 	bl	80012a6 <write>
  for (int i=0; i<8; i++) {
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3301      	adds	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b07      	cmp	r3, #7
 8001280:	ddf2      	ble.n	8001268 <createChar+0x2e>
  }
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f813 	bl	80012c4 <send>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <write>:

inline size_t write(uint8_t value) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2101      	movs	r1, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f805 	bl	80012c4 <send>
  return 1; // assume sucess
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <send+0x6c>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <send+0x70>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	79ba      	ldrb	r2, [r7, #6]
 80012de:	4619      	mov	r1, r3
 80012e0:	f003 fe68 	bl	8004fb4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <send+0x74>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	2bff      	cmp	r3, #255	; 0xff
 80012ea:	d007      	beq.n	80012fc <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <send+0x6c>)
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <send+0x74>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	f003 fe5c 	bl	8004fb4 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <send+0x78>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <send+0x4e>
    write8bits(value); 
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f86c 	bl	80013e8 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8001310:	e009      	b.n	8001326 <send+0x62>
    write4bits(value>>4);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f83b 	bl	8001394 <write4bits>
    write4bits(value);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f837 	bl	8001394 <write4bits>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000029c 	.word	0x2000029c
 8001334:	200002b8 	.word	0x200002b8
 8001338:	20000298 	.word	0x20000298
 800133c:	200002b5 	.word	0x200002b5

08001340 <pulseEnable>:

void pulseEnable(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <pulseEnable+0x4c>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <pulseEnable+0x50>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	f003 fe30 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8001354:	2001      	movs	r0, #1
 8001356:	f001 ffdf 	bl	8003318 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <pulseEnable+0x4c>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <pulseEnable+0x50>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	2201      	movs	r2, #1
 8001364:	4619      	mov	r1, r3
 8001366:	f003 fe25 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800136a:	2001      	movs	r0, #1
 800136c:	f001 ffd4 	bl	8003318 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <pulseEnable+0x4c>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <pulseEnable+0x50>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	f003 fe1a 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001380:	2001      	movs	r0, #1
 8001382:	f001 ffc9 	bl	8003318 <HAL_Delay>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000029c 	.word	0x2000029c
 8001390:	200002b6 	.word	0x200002b6

08001394 <write4bits>:

void write4bits(uint8_t value) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e013      	b.n	80013cc <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <write4bits+0x4c>)
 80013a6:	6818      	ldr	r0, [r3, #0]
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <write4bits+0x50>)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	fa42 f303 	asr.w	r3, r2, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	f003 fdf7 	bl	8004fb4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	dde8      	ble.n	80013a4 <write4bits+0x10>
  }

  pulseEnable();
 80013d2:	f7ff ffb5 	bl	8001340 <pulseEnable>
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000029c 	.word	0x2000029c
 80013e4:	200002a4 	.word	0x200002a4

080013e8 <write8bits>:

void write8bits(uint8_t value) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e013      	b.n	8001420 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <write8bits+0x4c>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <write8bits+0x50>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	fa42 f303 	asr.w	r3, r2, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	f003 fdcd 	bl	8004fb4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b07      	cmp	r3, #7
 8001424:	dde8      	ble.n	80013f8 <write8bits+0x10>
  }
  
  pulseEnable();
 8001426:	f7ff ff8b 	bl	8001340 <pulseEnable>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000029c 	.word	0x2000029c
 8001438:	200002a4 	.word	0x200002a4

0800143c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
	if(HAL_GetTick() > lastShow + 300 ){
 8001446:	f001 ff5b 	bl	8003300 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	4bb6      	ldr	r3, [pc, #728]	; (8001728 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001454:	429a      	cmp	r2, r3
 8001456:	f240 822b 	bls.w	80018b0 <HAL_GPIO_EXTI_Callback+0x474>

		if (GPIO_Pin == GPIO_PIN_0)
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	2b01      	cmp	r3, #1
 800145e:	f040 808a 	bne.w	8001576 <HAL_GPIO_EXTI_Callback+0x13a>
		{
			for(int i = 0 ; i < 4 ; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e06f      	b.n	8001548 <HAL_GPIO_EXTI_Callback+0x10c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2101      	movs	r1, #1
 800146c:	48af      	ldr	r0, [pc, #700]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800146e:	f003 fda1 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2102      	movs	r1, #2
 8001476:	48ad      	ldr	r0, [pc, #692]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001478:	f003 fd9c 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2104      	movs	r1, #4
 8001480:	48aa      	ldr	r0, [pc, #680]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001482:	f003 fd97 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2108      	movs	r1, #8
 800148a:	48a8      	ldr	r0, [pc, #672]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800148c:	f003 fd92 	bl	8004fb4 <HAL_GPIO_WritePin>
				//S1
				if(i == 0){
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <HAL_GPIO_EXTI_Callback+0x7a>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2101      	movs	r1, #1
 800149a:	48a4      	ldr	r0, [pc, #656]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800149c:	f003 fd8a 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)){
 80014a0:	2101      	movs	r1, #1
 80014a2:	48a3      	ldr	r0, [pc, #652]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80014a4:	f003 fd6e 	bl	8004f84 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d049      	beq.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
//					  print("7");
					  action = 7;
 80014ae:	4ba1      	ldr	r3, [pc, #644]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e045      	b.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
				  }
				}
				//S2
				else if(i == 1){
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d11b      	bne.n	80014f4 <HAL_GPIO_EXTI_Callback+0xb8>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2102      	movs	r1, #2
 80014c0:	489a      	ldr	r0, [pc, #616]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80014c2:	f003 fd77 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)){
 80014c6:	2101      	movs	r1, #1
 80014c8:	4899      	ldr	r0, [pc, #612]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80014ca:	f003 fd5b 	bl	8004f84 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d036      	beq.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
					  if(game == 1 && pause != 1){
 80014d4:	4b98      	ldr	r3, [pc, #608]	; (8001738 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d132      	bne.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
 80014dc:	4b97      	ldr	r3, [pc, #604]	; (800173c <HAL_GPIO_EXTI_Callback+0x300>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d02e      	beq.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
						  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	4896      	ldr	r0, [pc, #600]	; (8001740 <HAL_GPIO_EXTI_Callback+0x304>)
 80014e8:	f003 fd7c 	bl	8004fe4 <HAL_GPIO_TogglePin>
						  action = 8;
 80014ec:	4b91      	ldr	r3, [pc, #580]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80014ee:	2208      	movs	r2, #8
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e026      	b.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
					  }
				  }
				}
				//S3
				else if(i == 2){
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d10f      	bne.n	800151a <HAL_GPIO_EXTI_Callback+0xde>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2104      	movs	r1, #4
 80014fe:	488b      	ldr	r0, [pc, #556]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001500:	f003 fd58 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)){
 8001504:	2101      	movs	r1, #1
 8001506:	488a      	ldr	r0, [pc, #552]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001508:	f003 fd3c 	bl	8004f84 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
//					  print("9");
					  action = 9;
 8001512:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001514:	2209      	movs	r2, #9
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e013      	b.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
				  }
				}
				//S4
				else if(i == 3){
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d110      	bne.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2108      	movs	r1, #8
 8001524:	4881      	ldr	r0, [pc, #516]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001526:	f003 fd45 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)){
 800152a:	2101      	movs	r1, #1
 800152c:	4880      	ldr	r0, [pc, #512]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800152e:	f003 fd29 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_GPIO_EXTI_Callback+0x106>
//					  print("A");
					  life--;
 8001538:	4b82      	ldr	r3, [pc, #520]	; (8001744 <HAL_GPIO_EXTI_Callback+0x308>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3b01      	subs	r3, #1
 800153e:	4a81      	ldr	r2, [pc, #516]	; (8001744 <HAL_GPIO_EXTI_Callback+0x308>)
 8001540:	6013      	str	r3, [r2, #0]
			for(int i = 0 ; i < 4 ; i++){
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b03      	cmp	r3, #3
 800154c:	dd8c      	ble.n	8001468 <HAL_GPIO_EXTI_Callback+0x2c>
				  }
				}
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	4876      	ldr	r0, [pc, #472]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001554:	f003 fd2e 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2102      	movs	r1, #2
 800155c:	4873      	ldr	r0, [pc, #460]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800155e:	f003 fd29 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2104      	movs	r1, #4
 8001566:	4871      	ldr	r0, [pc, #452]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001568:	f003 fd24 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2108      	movs	r1, #8
 8001570:	486e      	ldr	r0, [pc, #440]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001572:	f003 fd1f 	bl	8004fb4 <HAL_GPIO_WritePin>
		}
		if (GPIO_Pin == GPIO_PIN_1)
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	2b02      	cmp	r3, #2
 800157a:	f040 8081 	bne.w	8001680 <HAL_GPIO_EXTI_Callback+0x244>
		{
			for(int i = 0 ; i < 4 ; i++){
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	e066      	b.n	8001652 <HAL_GPIO_EXTI_Callback+0x216>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2101      	movs	r1, #1
 8001588:	4868      	ldr	r0, [pc, #416]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800158a:	f003 fd13 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2102      	movs	r1, #2
 8001592:	4866      	ldr	r0, [pc, #408]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001594:	f003 fd0e 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2104      	movs	r1, #4
 800159c:	4863      	ldr	r0, [pc, #396]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800159e:	f003 fd09 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2108      	movs	r1, #8
 80015a6:	4861      	ldr	r0, [pc, #388]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80015a8:	f003 fd04 	bl	8004fb4 <HAL_GPIO_WritePin>
				//S5
				if(i == 0){
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_GPIO_EXTI_Callback+0x196>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	485d      	ldr	r0, [pc, #372]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80015b8:	f003 fcfc 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 80015bc:	2102      	movs	r1, #2
 80015be:	485c      	ldr	r0, [pc, #368]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80015c0:	f003 fce0 	bl	8004f84 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d040      	beq.n	800164c <HAL_GPIO_EXTI_Callback+0x210>
//					  print("4");
					  action = 4;
 80015ca:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80015cc:	2204      	movs	r2, #4
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e03c      	b.n	800164c <HAL_GPIO_EXTI_Callback+0x210>
				  }
				}
				//S6
				else if(i == 1){
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d11a      	bne.n	800160e <HAL_GPIO_EXTI_Callback+0x1d2>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2102      	movs	r1, #2
 80015dc:	4853      	ldr	r0, [pc, #332]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80015de:	f003 fce9 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 80015e2:	2102      	movs	r1, #2
 80015e4:	4852      	ldr	r0, [pc, #328]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80015e6:	f003 fccd 	bl	8004f84 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d02d      	beq.n	800164c <HAL_GPIO_EXTI_Callback+0x210>
//					  print("5");
					  if(pause == 0){
 80015f0:	4b52      	ldr	r3, [pc, #328]	; (800173c <HAL_GPIO_EXTI_Callback+0x300>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <HAL_GPIO_EXTI_Callback+0x1c4>
						  pause = 1;
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_GPIO_EXTI_Callback+0x300>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_EXTI_Callback+0x1ca>
					  }else{
						  pause = 0;
 8001600:	4b4e      	ldr	r3, [pc, #312]	; (800173c <HAL_GPIO_EXTI_Callback+0x300>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
					  }
					  action = 5;
 8001606:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001608:	2205      	movs	r2, #5
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e01e      	b.n	800164c <HAL_GPIO_EXTI_Callback+0x210>
				  }
				}
				//S7
				else if(i == 2){
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d10f      	bne.n	8001634 <HAL_GPIO_EXTI_Callback+0x1f8>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2104      	movs	r1, #4
 8001618:	4844      	ldr	r0, [pc, #272]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800161a:	f003 fccb 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 800161e:	2102      	movs	r1, #2
 8001620:	4843      	ldr	r0, [pc, #268]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001622:	f003 fcaf 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00f      	beq.n	800164c <HAL_GPIO_EXTI_Callback+0x210>
//					  print("6");
					  action = 6;
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800162e:	2206      	movs	r2, #6
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e00b      	b.n	800164c <HAL_GPIO_EXTI_Callback+0x210>
				  }
				}
				//S8
				else if(i == 3){
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d108      	bne.n	800164c <HAL_GPIO_EXTI_Callback+0x210>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2108      	movs	r1, #8
 800163e:	483b      	ldr	r0, [pc, #236]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001640:	f003 fcb8 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)){
 8001644:	2102      	movs	r1, #2
 8001646:	483a      	ldr	r0, [pc, #232]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001648:	f003 fc9c 	bl	8004f84 <HAL_GPIO_ReadPin>
			for(int i = 0 ; i < 4 ; i++){
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	3301      	adds	r3, #1
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2b03      	cmp	r3, #3
 8001656:	dd95      	ble.n	8001584 <HAL_GPIO_EXTI_Callback+0x148>
//					  print("B");
				  }
				}
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4833      	ldr	r0, [pc, #204]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800165e:	f003 fca9 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001662:	2201      	movs	r2, #1
 8001664:	2102      	movs	r1, #2
 8001666:	4831      	ldr	r0, [pc, #196]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001668:	f003 fca4 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2104      	movs	r1, #4
 8001670:	482e      	ldr	r0, [pc, #184]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001672:	f003 fc9f 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	2108      	movs	r1, #8
 800167a:	482c      	ldr	r0, [pc, #176]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800167c:	f003 fc9a 	bl	8004fb4 <HAL_GPIO_WritePin>
		}
		if (GPIO_Pin == GPIO_PIN_2)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	2b04      	cmp	r3, #4
 8001684:	f040 8086 	bne.w	8001794 <HAL_GPIO_EXTI_Callback+0x358>
		{
			for(int i = 0 ; i < 4 ; i++){
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e06b      	b.n	8001766 <HAL_GPIO_EXTI_Callback+0x32a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2101      	movs	r1, #1
 8001692:	4826      	ldr	r0, [pc, #152]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001694:	f003 fc8e 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2102      	movs	r1, #2
 800169c:	4823      	ldr	r0, [pc, #140]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800169e:	f003 fc89 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2104      	movs	r1, #4
 80016a6:	4821      	ldr	r0, [pc, #132]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016a8:	f003 fc84 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2108      	movs	r1, #8
 80016b0:	481e      	ldr	r0, [pc, #120]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016b2:	f003 fc7f 	bl	8004fb4 <HAL_GPIO_WritePin>
				//S9
				if(i == 0){
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <HAL_GPIO_EXTI_Callback+0x2a0>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	2101      	movs	r1, #1
 80016c0:	481a      	ldr	r0, [pc, #104]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016c2:	f003 fc77 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 80016c6:	2104      	movs	r1, #4
 80016c8:	4819      	ldr	r0, [pc, #100]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80016ca:	f003 fc5b 	bl	8004f84 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d045      	beq.n	8001760 <HAL_GPIO_EXTI_Callback+0x324>
//					  print("1");
					  action = 1;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e041      	b.n	8001760 <HAL_GPIO_EXTI_Callback+0x324>
				  }
				}
				//S10
				else if(i == 1){
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d10f      	bne.n	8001702 <HAL_GPIO_EXTI_Callback+0x2c6>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2102      	movs	r1, #2
 80016e6:	4811      	ldr	r0, [pc, #68]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016e8:	f003 fc64 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 80016ec:	2104      	movs	r1, #4
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80016f0:	f003 fc48 	bl	8004f84 <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d032      	beq.n	8001760 <HAL_GPIO_EXTI_Callback+0x324>
//					  print("2");
					  action = 2;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80016fc:	2202      	movs	r2, #2
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e02e      	b.n	8001760 <HAL_GPIO_EXTI_Callback+0x324>
				  }
				}
				//S11
				else if(i == 2){
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d11f      	bne.n	8001748 <HAL_GPIO_EXTI_Callback+0x30c>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	2104      	movs	r1, #4
 800170c:	4807      	ldr	r0, [pc, #28]	; (800172c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800170e:	f003 fc51 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 8001712:	2104      	movs	r1, #4
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001716:	f003 fc35 	bl	8004f84 <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01f      	beq.n	8001760 <HAL_GPIO_EXTI_Callback+0x324>
//					  print("3");
					  action = 3;
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001722:	2203      	movs	r2, #3
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e01b      	b.n	8001760 <HAL_GPIO_EXTI_Callback+0x324>
 8001728:	20000264 	.word	0x20000264
 800172c:	48000800 	.word	0x48000800
 8001730:	48000c00 	.word	0x48000c00
 8001734:	20000270 	.word	0x20000270
 8001738:	2000027c 	.word	0x2000027c
 800173c:	20000278 	.word	0x20000278
 8001740:	48001000 	.word	0x48001000
 8001744:	20000020 	.word	0x20000020
				  }
				}
				//S12
				else if(i == 3){
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d108      	bne.n	8001760 <HAL_GPIO_EXTI_Callback+0x324>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	2108      	movs	r1, #8
 8001752:	4859      	ldr	r0, [pc, #356]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001754:	f003 fc2e 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)){
 8001758:	2104      	movs	r1, #4
 800175a:	4858      	ldr	r0, [pc, #352]	; (80018bc <HAL_GPIO_EXTI_Callback+0x480>)
 800175c:	f003 fc12 	bl	8004f84 <HAL_GPIO_ReadPin>
			for(int i = 0 ; i < 4 ; i++){
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3301      	adds	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b03      	cmp	r3, #3
 800176a:	dd90      	ble.n	800168e <HAL_GPIO_EXTI_Callback+0x252>
//					  print("C");
				  }
				}
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2101      	movs	r1, #1
 8001770:	4851      	ldr	r0, [pc, #324]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001772:	f003 fc1f 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	2102      	movs	r1, #2
 800177a:	484f      	ldr	r0, [pc, #316]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 800177c:	f003 fc1a 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2104      	movs	r1, #4
 8001784:	484c      	ldr	r0, [pc, #304]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001786:	f003 fc15 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2108      	movs	r1, #8
 800178e:	484a      	ldr	r0, [pc, #296]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001790:	f003 fc10 	bl	8004fb4 <HAL_GPIO_WritePin>
		}
		if (GPIO_Pin == GPIO_PIN_3)
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	2b08      	cmp	r3, #8
 8001798:	f040 8085 	bne.w	80018a6 <HAL_GPIO_EXTI_Callback+0x46a>
		{
			for(int i = 0 ; i < 4 ; i++){
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	e06a      	b.n	8001878 <HAL_GPIO_EXTI_Callback+0x43c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2101      	movs	r1, #1
 80017a6:	4844      	ldr	r0, [pc, #272]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80017a8:	f003 fc04 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2102      	movs	r1, #2
 80017b0:	4841      	ldr	r0, [pc, #260]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80017b2:	f003 fbff 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2104      	movs	r1, #4
 80017ba:	483f      	ldr	r0, [pc, #252]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80017bc:	f003 fbfa 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2108      	movs	r1, #8
 80017c4:	483c      	ldr	r0, [pc, #240]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80017c6:	f003 fbf5 	bl	8004fb4 <HAL_GPIO_WritePin>
				//S13
				if(i == 0){
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10f      	bne.n	80017f0 <HAL_GPIO_EXTI_Callback+0x3b4>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2101      	movs	r1, #1
 80017d4:	4838      	ldr	r0, [pc, #224]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80017d6:	f003 fbed 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 80017da:	2108      	movs	r1, #8
 80017dc:	4837      	ldr	r0, [pc, #220]	; (80018bc <HAL_GPIO_EXTI_Callback+0x480>)
 80017de:	f003 fbd1 	bl	8004f84 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d044      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
//					  print("E");
					  game = 2;
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x484>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e040      	b.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
				  }
				}
				//S14
				else if(i == 1){
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10f      	bne.n	8001816 <HAL_GPIO_EXTI_Callback+0x3da>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2102      	movs	r1, #2
 80017fa:	482f      	ldr	r0, [pc, #188]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80017fc:	f003 fbda 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 8001800:	2108      	movs	r1, #8
 8001802:	482e      	ldr	r0, [pc, #184]	; (80018bc <HAL_GPIO_EXTI_Callback+0x480>)
 8001804:	f003 fbbe 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d031      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
//					  print("0");
					  action = 0;
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x488>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e02d      	b.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
				  }
				}
				//S15
				else if(i == 2){
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d116      	bne.n	800184a <HAL_GPIO_EXTI_Callback+0x40e>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2104      	movs	r1, #4
 8001820:	4825      	ldr	r0, [pc, #148]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001822:	f003 fbc7 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 8001826:	2108      	movs	r1, #8
 8001828:	4824      	ldr	r0, [pc, #144]	; (80018bc <HAL_GPIO_EXTI_Callback+0x480>)
 800182a:	f003 fbab 	bl	8004f84 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01e      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
//					  print("S");
					  if(game == 0){
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x484>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11a      	bne.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
						  startGamebutton = 1;
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x48c>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
						  coinsNumber = 0;
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_GPIO_EXTI_Callback+0x490>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e013      	b.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
					  }
				  	}
				}
				//S16
				else if(i == 3){
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d110      	bne.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	2108      	movs	r1, #8
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001856:	f003 fbad 	bl	8004fb4 <HAL_GPIO_WritePin>
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 800185a:	2108      	movs	r1, #8
 800185c:	4817      	ldr	r0, [pc, #92]	; (80018bc <HAL_GPIO_EXTI_Callback+0x480>)
 800185e:	f003 fb91 	bl	8004f84 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x436>
//					  print("D");
					  coinsNumber++;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_GPIO_EXTI_Callback+0x490>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_GPIO_EXTI_Callback+0x490>)
 8001870:	6013      	str	r3, [r2, #0]
			for(int i = 0 ; i < 4 ; i++){
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3301      	adds	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b03      	cmp	r3, #3
 800187c:	dd91      	ble.n	80017a2 <HAL_GPIO_EXTI_Callback+0x366>
				  }
				}
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2101      	movs	r1, #1
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001884:	f003 fb96 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	2102      	movs	r1, #2
 800188c:	480a      	ldr	r0, [pc, #40]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 800188e:	f003 fb91 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	2104      	movs	r1, #4
 8001896:	4808      	ldr	r0, [pc, #32]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 8001898:	f003 fb8c 	bl	8004fb4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	2108      	movs	r1, #8
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x47c>)
 80018a2:	f003 fb87 	bl	8004fb4 <HAL_GPIO_WritePin>
		}

		lastShow = HAL_GetTick();
 80018a6:	f001 fd2b 	bl	8003300 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x494>)
 80018ae:	601a      	str	r2, [r3, #0]
	}

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000c00 	.word	0x48000c00
 80018c0:	2000027c 	.word	0x2000027c
 80018c4:	20000270 	.word	0x20000270
 80018c8:	20000280 	.word	0x20000280
 80018cc:	20000004 	.word	0x20000004
 80018d0:	20000264 	.word	0x20000264

080018d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <HAL_UART_RxCpltCallback+0xc0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d152      	bne.n	800198c <HAL_UART_RxCpltCallback+0xb8>
    {
    	switch (uartData[0]){
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_UART_RxCpltCallback+0xc4>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3b31      	subs	r3, #49	; 0x31
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d848      	bhi.n	8001982 <HAL_UART_RxCpltCallback+0xae>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <HAL_UART_RxCpltCallback+0x24>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	0800191d 	.word	0x0800191d
 80018fc:	08001925 	.word	0x08001925
 8001900:	0800192d 	.word	0x0800192d
 8001904:	08001935 	.word	0x08001935
 8001908:	0800193d 	.word	0x0800193d
 800190c:	0800195b 	.word	0x0800195b
 8001910:	08001963 	.word	0x08001963
 8001914:	0800196b 	.word	0x0800196b
 8001918:	0800197b 	.word	0x0800197b
    		case '1':
    			//TODO
    			action = 1;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
    			break;
 8001922:	e02e      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '2':
    			//TODO
    			action = 2;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 8001926:	2202      	movs	r2, #2
 8001928:	601a      	str	r2, [r3, #0]
    			break;
 800192a:	e02a      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '3':
    			//TODO
    			action = 3;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 800192e:	2203      	movs	r2, #3
 8001930:	601a      	str	r2, [r3, #0]
    			break;
 8001932:	e026      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '4':
    			//TODO
    			action = 4;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 8001936:	2204      	movs	r2, #4
 8001938:	601a      	str	r2, [r3, #0]
    			break;
 800193a:	e022      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '5':
    			//TODO
				if(pause == 0){
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_UART_RxCpltCallback+0xcc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <HAL_UART_RxCpltCallback+0x78>
					pause = 1;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_UART_RxCpltCallback+0xcc>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e002      	b.n	8001952 <HAL_UART_RxCpltCallback+0x7e>
				}else{
					pause = 0;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_UART_RxCpltCallback+0xcc>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
				}
    			action = 5;
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 8001954:	2205      	movs	r2, #5
 8001956:	601a      	str	r2, [r3, #0]
    			break;
 8001958:	e013      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '6':
    			//TODO
    			action = 6;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 800195c:	2206      	movs	r2, #6
 800195e:	601a      	str	r2, [r3, #0]
    			break;
 8001960:	e00f      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '7':
    			//TODO
    			action = 7;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
    			break;
 8001968:	e00b      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '8':
    			//TODO
    			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <HAL_UART_RxCpltCallback+0xd0>)
 800196e:	f003 fb39 	bl	8004fe4 <HAL_GPIO_TogglePin>
    			action = 8;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 8001974:	2208      	movs	r2, #8
 8001976:	601a      	str	r2, [r3, #0]
    			break;
 8001978:	e003      	b.n	8001982 <HAL_UART_RxCpltCallback+0xae>
    		case '9':
    			//TODO
    			action = 9;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_UART_RxCpltCallback+0xc8>)
 800197c:	2209      	movs	r2, #9
 800197e:	601a      	str	r2, [r3, #0]
    			break;
 8001980:	bf00      	nop
    	}
        HAL_UART_Receive_IT(&huart2, uartData, sizeof(uartData));
 8001982:	2201      	movs	r2, #1
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <HAL_UART_RxCpltCallback+0xc4>)
 8001986:	4808      	ldr	r0, [pc, #32]	; (80019a8 <HAL_UART_RxCpltCallback+0xd4>)
 8001988:	f005 fe66 	bl	8007658 <HAL_UART_Receive_IT>
    }
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40004400 	.word	0x40004400
 8001998:	2000067c 	.word	0x2000067c
 800199c:	20000270 	.word	0x20000270
 80019a0:	20000278 	.word	0x20000278
 80019a4:	48001000 	.word	0x48001000
 80019a8:	200008c8 	.word	0x200008c8

080019ac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	////Mario
	if (htim->Instance == TIM3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4ab2      	ldr	r2, [pc, #712]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	f040 80d9 	bne.w	8001b72 <HAL_TIM_PeriodElapsedCallback+0x1c6>
	{

		if(game == 1 && pause == 0){
 80019c0:	4bb1      	ldr	r3, [pc, #708]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	f040 80d4 	bne.w	8001b72 <HAL_TIM_PeriodElapsedCallback+0x1c6>
 80019ca:	4bb0      	ldr	r3, [pc, #704]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80cf 	bne.w	8001b72 <HAL_TIM_PeriodElapsedCallback+0x1c6>

			lastPosition[0] = position[0];
 80019d4:	4bae      	ldr	r3, [pc, #696]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4aae      	ldr	r2, [pc, #696]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019da:	6013      	str	r3, [r2, #0]
			lastPosition[1] = position[1];
 80019dc:	4bac      	ldr	r3, [pc, #688]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4aac      	ldr	r2, [pc, #688]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019e2:	6053      	str	r3, [r2, #4]

			if(life == 2 && lastLife == 3){
 80019e4:	4bac      	ldr	r3, [pc, #688]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d10c      	bne.n	8001a06 <HAL_TIM_PeriodElapsedCallback+0x5a>
 80019ec:	4bab      	ldr	r3, [pc, #684]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d108      	bne.n	8001a06 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fa:	48a9      	ldr	r0, [pc, #676]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80019fc:	f003 fada 	bl	8004fb4 <HAL_GPIO_WritePin>
				lastLife = 2;
 8001a00:	4ba6      	ldr	r3, [pc, #664]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	601a      	str	r2, [r3, #0]
			}
			if(life == 1  && lastLife == 2){
 8001a06:	4ba4      	ldr	r3, [pc, #656]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d10c      	bne.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8001a0e:	4ba3      	ldr	r3, [pc, #652]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d108      	bne.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x7c>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a1c:	48a0      	ldr	r0, [pc, #640]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a1e:	f003 fac9 	bl	8004fb4 <HAL_GPIO_WritePin>
				lastLife = 1;
 8001a22:	4b9e      	ldr	r3, [pc, #632]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
			}
			if(life == 0  && lastLife == 1){
 8001a28:	4b9b      	ldr	r3, [pc, #620]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d116      	bne.n	8001a5e <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001a30:	4b9a      	ldr	r3, [pc, #616]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d112      	bne.n	8001a5e <HAL_TIM_PeriodElapsedCallback+0xb2>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a3e:	4898      	ldr	r0, [pc, #608]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a40:	f003 fab8 	bl	8004fb4 <HAL_GPIO_WritePin>
//				game = 2;
				lastLife = 0;
 8001a44:	4b95      	ldr	r3, [pc, #596]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
				pause = 1;
 8001a4a:	4b90      	ldr	r3, [pc, #576]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
				setCursor(1, 1);
 8001a50:	2101      	movs	r1, #1
 8001a52:	2001      	movs	r0, #1
 8001a54:	f7ff fb7e 	bl	8001154 <setCursor>
				print("Life = 0 Game Over");
 8001a58:	4892      	ldr	r0, [pc, #584]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a5a:	f7ff fbc3 	bl	80011e4 <print>
			}

			if(position[1] > icounter){
 8001a5e:	4b8c      	ldr	r3, [pc, #560]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4b91      	ldr	r3, [pc, #580]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dd0d      	ble.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0xda>
				setCursor(position[1] - icounter, position[0]);
 8001a6a:	4b89      	ldr	r3, [pc, #548]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7ff fb6a 	bl	8001154 <setCursor>
				write(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fc10 	bl	80012a6 <write>
//			else{
//				setCursor(position[1] - icounter + 1, position[0]);
//				print(" ");
//				game = 2;
//			}
			switch(action){
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b09      	cmp	r3, #9
 8001a8c:	d857      	bhi.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0x192>
 8001a8e:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001b3f 	.word	0x08001b3f
 8001a98:	08001b3f 	.word	0x08001b3f
 8001a9c:	08001b3f 	.word	0x08001b3f
 8001aa0:	08001b3f 	.word	0x08001b3f
 8001aa4:	08001b3f 	.word	0x08001b3f
 8001aa8:	08001b3f 	.word	0x08001b3f
 8001aac:	08001b0d 	.word	0x08001b0d
 8001ab0:	08001b3f 	.word	0x08001b3f
 8001ab4:	08001abd 	.word	0x08001abd
 8001ab8:	08001b3f 	.word	0x08001b3f
				case 9:

					break;
				case 8:
					  if(map[position[0] - 1][position[1]] == -1){
 8001abc:	4b74      	ldr	r3, [pc, #464]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1e5a      	subs	r2, r3, #1
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	487a      	ldr	r0, [pc, #488]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d12d      	bne.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x18c>
						  if(map[position[0] - 2][position[1]] == -1){
 8001adc:	4b6c      	ldr	r3, [pc, #432]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	1e9a      	subs	r2, r3, #2
 8001ae2:	4b6b      	ldr	r3, [pc, #428]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	4872      	ldr	r0, [pc, #456]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afa:	d103      	bne.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0x158>
							  jump = 2;
 8001afc:	4b6d      	ldr	r3, [pc, #436]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	601a      	str	r2, [r3, #0]
						  }else{
							  jump = 1;
						  }
					  }
					break;
 8001b02:	e019      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x18c>
							  jump = 1;
 8001b04:	4b6b      	ldr	r3, [pc, #428]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
					break;
 8001b0a:	e015      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x18c>
				case 7:

					break;
				case 6:
					  if(map[position[0]][position[1] + 1] == -1){
 8001b0c:	4b60      	ldr	r3, [pc, #384]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	1c59      	adds	r1, r3, #1
 8001b16:	4866      	ldr	r0, [pc, #408]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2a:	d107      	bne.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x190>
//						  lastPosition[0] = position[0];
//						  lastPosition[1] = position[1];
						  position[1]++;
 8001b2c:	4b58      	ldr	r3, [pc, #352]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	3301      	adds	r3, #1
 8001b32:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001b34:	6053      	str	r3, [r2, #4]
//						  map[lastPosition[0]][lastPosition[1]] = -1;
	//					  map[position[0]][position[1]] = 1;
					  }
					break;
 8001b36:	e001      	b.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x190>
					break;
 8001b38:	bf00      	nop
 8001b3a:	e000      	b.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0x192>
					break;
 8001b3c:	bf00      	nop
					break;
				case 0:

					break;
			}
			action = 0;
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
			if(HAL_GetTick() > jumpDelay + (speed * 30) )
 8001b44:	f001 fbdc 	bl	8003300 <HAL_GetTick>
 8001b48:	4601      	mov	r1, r0
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b58      	ldr	r3, [pc, #352]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4299      	cmp	r1, r3
 8001b60:	d902      	bls.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x1bc>
				if(jump != 0){
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
					if(jump == 2){

					}
				}

			jumpDelay = HAL_GetTick();
 8001b68:	f001 fbca 	bl	8003300 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001b70:	601a      	str	r2, [r3, #0]
		}
	}

	////Playground
	if (htim->Instance == TIM2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	f040 8250 	bne.w	800201e <HAL_TIM_PeriodElapsedCallback+0x672>
	{
		////Behind The Game
		if(game == 0){
 8001b7e:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 8122 	bne.w	8001dcc <HAL_TIM_PeriodElapsedCallback+0x420>
			if(startGamebutton == 1){
 8001b88:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	f040 811d 	bne.w	8001dcc <HAL_TIM_PeriodElapsedCallback+0x420>
				//Set Values
				game = 1;
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
				startGamebutton = 0;
 8001b98:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]


				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba4:	483e      	ldr	r0, [pc, #248]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ba6:	f003 fa05 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001baa:	2201      	movs	r2, #1
 8001bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb0:	483b      	ldr	r0, [pc, #236]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001bb2:	f003 f9ff 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bbc:	4838      	ldr	r0, [pc, #224]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001bbe:	f003 f9f9 	bl	8004fb4 <HAL_GPIO_WritePin>
				//// Generating Random Map
			    srand(HAL_ADC_GetValue(&hadc1));
 8001bc2:	4840      	ldr	r0, [pc, #256]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001bc4:	f001 fefe 	bl	80039c4 <HAL_ADC_GetValue>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f007 fb3a 	bl	8009244 <srand>
			    //pre-arranged
			    for(int i = 0 ; i < 4 ; i++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd4:	e017      	b.n	8001c06 <HAL_TIM_PeriodElapsedCallback+0x25a>
			    	for(int j = 0 ; j < 60 ; j++){
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bda:	e00e      	b.n	8001bfa <HAL_TIM_PeriodElapsedCallback+0x24e>
			    		map[i][j] = -1;
 8001bdc:	4934      	ldr	r1, [pc, #208]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bea:	4413      	add	r3, r2
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			    	for(int j = 0 ; j < 60 ; j++){
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	2b3b      	cmp	r3, #59	; 0x3b
 8001bfe:	dded      	ble.n	8001bdc <HAL_TIM_PeriodElapsedCallback+0x230>
			    for(int i = 0 ; i < 4 ; i++){
 8001c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c02:	3301      	adds	r3, #1
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	dde4      	ble.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x22a>
			    	}
			    }
				map[3][0] = 4;
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c0e:	2204      	movs	r2, #4
 8001c10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
				map[3][1] = 4;
 8001c14:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
				map[3][2] = 4;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
				map[3][3] = 4;
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c26:	2204      	movs	r2, #4
 8001c28:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
				map[2][0] = 0;
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
				map[1][0] = 0;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				map[0][0] = 0;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
				map[2][58] = 7;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
				//row 3
				for(int i = 4 ; i < 60 ; i++){
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4e:	e046      	b.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x332>
					int temp = 4*(rand()%5);
 8001c50:	f007 fb1c 	bl	800928c <rand>
 8001c54:	4601      	mov	r1, r0
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001c58:	fb83 2301 	smull	r2, r3, r3, r1
 8001c5c:	105a      	asrs	r2, r3, #1
 8001c5e:	17cb      	asrs	r3, r1, #31
 8001c60:	1ad2      	subs	r2, r2, r3
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	1aca      	subs	r2, r1, r3
 8001c6a:	0093      	lsls	r3, r2, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
					if(temp == 0){
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d12b      	bne.n	8001ccc <HAL_TIM_PeriodElapsedCallback+0x320>
						map[3][i] = -1;
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	33b4      	adds	r3, #180	; 0xb4
 8001c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001c82:	e029      	b.n	8001cd8 <HAL_TIM_PeriodElapsedCallback+0x32c>
 8001c84:	40000400 	.word	0x40000400
 8001c88:	2000027c 	.word	0x2000027c
 8001c8c:	20000278 	.word	0x20000278
 8001c90:	20000010 	.word	0x20000010
 8001c94:	20000018 	.word	0x20000018
 8001c98:	20000020 	.word	0x20000020
 8001c9c:	20000024 	.word	0x20000024
 8001ca0:	48001000 	.word	0x48001000
 8001ca4:	0800c100 	.word	0x0800c100
 8001ca8:	20000284 	.word	0x20000284
 8001cac:	20000270 	.word	0x20000270
 8001cb0:	200002bc 	.word	0x200002bc
 8001cb4:	20000274 	.word	0x20000274
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	2000026c 	.word	0x2000026c
 8001cc0:	20000280 	.word	0x20000280
 8001cc4:	200007c8 	.word	0x200007c8
 8001cc8:	66666667 	.word	0x66666667
					}else{
						map[3][i] = 4;
 8001ccc:	4a8b      	ldr	r2, [pc, #556]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	33b4      	adds	r3, #180	; 0xb4
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i = 4 ; i < 60 ; i++){
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	3301      	adds	r3, #1
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	2b3b      	cmp	r3, #59	; 0x3b
 8001ce2:	ddb5      	ble.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x2a4>
					}

				}
				//row 2
				for(int i = 5 ; i < 56 ; i++){
 8001ce4:	2305      	movs	r3, #5
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce8:	e038      	b.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x3b0>
					int temp = 5*(rand()%2);
 8001cea:	f007 facf 	bl	800928c <rand>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	bfb8      	it	lt
 8001cf8:	425b      	neglt	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
					if(temp != 0 && map[2][i-1] != 6){
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d025      	beq.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x3aa>
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	4a7b      	ldr	r2, [pc, #492]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d10:	3378      	adds	r3, #120	; 0x78
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d01d      	beq.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x3aa>
						if(map[3][i] == 4 && map[3][i+1] == 4 ){
 8001d1a:	4a78      	ldr	r2, [pc, #480]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	33b4      	adds	r3, #180	; 0xb4
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d116      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x3aa>
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a73      	ldr	r2, [pc, #460]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d2e:	33b4      	adds	r3, #180	; 0xb4
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d10e      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x3aa>
							map[2][i] = 5;
 8001d38:	4a70      	ldr	r2, [pc, #448]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	3378      	adds	r3, #120	; 0x78
 8001d3e:	2105      	movs	r1, #5
 8001d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							i++;
 8001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d46:	3301      	adds	r3, #1
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
							map[2][i] = 6;
 8001d4a:	4a6c      	ldr	r2, [pc, #432]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	3378      	adds	r3, #120	; 0x78
 8001d50:	2106      	movs	r1, #6
 8001d52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i = 5 ; i < 56 ; i++){
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	3301      	adds	r3, #1
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	2b37      	cmp	r3, #55	; 0x37
 8001d60:	ddc3      	ble.n	8001cea <HAL_TIM_PeriodElapsedCallback+0x33e>
						}
					}
				}
				//row 0
				for(int i = 3 ; i < 56 ; i++){
 8001d62:	2303      	movs	r3, #3
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e020      	b.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x3fe>
					int temp = 2*(rand()%3);
 8001d68:	f007 fa90 	bl	800928c <rand>
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001d70:	fb83 3201 	smull	r3, r2, r3, r1
 8001d74:	17cb      	asrs	r3, r1, #31
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	1aca      	subs	r2, r1, r3
 8001d80:	0053      	lsls	r3, r2, #1
 8001d82:	617b      	str	r3, [r7, #20]
					if(temp == 2){
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d104      	bne.n	8001d94 <HAL_TIM_PeriodElapsedCallback+0x3e8>
						map[0][i] = 2;
 8001d8a:	4a5c      	ldr	r2, [pc, #368]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2102      	movs	r1, #2
 8001d90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if(temp == 4){
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d104      	bne.n	8001da4 <HAL_TIM_PeriodElapsedCallback+0x3f8>
						map[0][i] = 3;
 8001d9a:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2103      	movs	r1, #3
 8001da0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i = 3 ; i < 56 ; i++){
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3301      	adds	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	2b37      	cmp	r3, #55	; 0x37
 8001dae:	dddb      	ble.n	8001d68 <HAL_TIM_PeriodElapsedCallback+0x3bc>
					}
				}
				////Finish Generation

				clear();
 8001db0:	f7ff f9c6 	bl	8001140 <clear>
				position[0] = 2;
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	601a      	str	r2, [r3, #0]
				position[0] = 2;
 8001dba:	4b52      	ldr	r3, [pc, #328]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
				lastPosition[0] = 2;
 8001dc0:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]
				lastPosition[1] = 2;
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001dc8:	2202      	movs	r2, #2
 8001dca:	605a      	str	r2, [r3, #4]
			}
		}


		//// On the Game
		if(game == 1 && pause == 0){
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 8124 	bne.w	800201e <HAL_TIM_PeriodElapsedCallback+0x672>
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 811f 	bne.w	800201e <HAL_TIM_PeriodElapsedCallback+0x672>

			//**
			//Show the start

			if(icounter < 41 && HAL_GetTick() >= delaySpeed + 400 - (speed * 20)){
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b28      	cmp	r3, #40	; 0x28
 8001de6:	f300 80af 	bgt.w	8001f48 <HAL_TIM_PeriodElapsedCallback+0x59c>
 8001dea:	f001 fa89 	bl	8003300 <HAL_GetTick>
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001e04:	4298      	cmp	r0, r3
 8001e06:	f0c0 809f 	bcc.w	8001f48 <HAL_TIM_PeriodElapsedCallback+0x59c>
				setCursor(0, 3);
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff f9a1 	bl	8001154 <setCursor>
				write(map[3][icounter]);
 8001e12:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001e18:	33b4      	adds	r3, #180	; 0xb4
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fa41 	bl	80012a6 <write>
				for(int j = 1 ; j < 20 ; j++){
 8001e24:	2301      	movs	r3, #1
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	e062      	b.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x544>
					for(int k = 0 ; k < 4 ; k++){
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e059      	b.n	8001ee4 <HAL_TIM_PeriodElapsedCallback+0x538>
						if(!((position[0] == k) && (position[1] == j + icounter))){
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_PeriodElapsedCallback+0x49e>
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	440b      	add	r3, r1
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d03d      	beq.n	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x51a>
							if(map[k][j + icounter] != -1){
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	18d1      	adds	r1, r2, r3
 8001e52:	482a      	ldr	r0, [pc, #168]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d014      	beq.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0x4e8>
								setCursor(j, k);
 8001e6a:	69f9      	ldr	r1, [r7, #28]
 8001e6c:	6a38      	ldr	r0, [r7, #32]
 8001e6e:	f7ff f971 	bl	8001154 <setCursor>
								write(map[k][j + icounter]);
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	18d1      	adds	r1, r2, r3
 8001e7a:	4820      	ldr	r0, [pc, #128]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fa0a 	bl	80012a6 <write>
							if(map[k][j + icounter] != -1){
 8001e92:	e023      	b.n	8001edc <HAL_TIM_PeriodElapsedCallback+0x530>
							}else{
								if(map[k][j + icounter - 1] != -1){
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	1e59      	subs	r1, r3, #1
 8001e9e:	4817      	ldr	r0, [pc, #92]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d012      	beq.n	8001edc <HAL_TIM_PeriodElapsedCallback+0x530>
									setCursor(j, k);
 8001eb6:	69f9      	ldr	r1, [r7, #28]
 8001eb8:	6a38      	ldr	r0, [r7, #32]
 8001eba:	f7ff f94b 	bl	8001154 <setCursor>
									print(" ");
 8001ebe:	4818      	ldr	r0, [pc, #96]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001ec0:	f7ff f990 	bl	80011e4 <print>
							if(map[k][j + icounter] != -1){
 8001ec4:	e00a      	b.n	8001edc <HAL_TIM_PeriodElapsedCallback+0x530>
								}
							}
						}else{
							if(position[1] < icounter + 1){
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	da04      	bge.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x532>
								game = 2;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e000      	b.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x532>
							if(map[k][j + icounter] != -1){
 8001edc:	bf00      	nop
					for(int k = 0 ; k < 4 ; k++){
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	dda2      	ble.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x484>
				for(int j = 1 ; j < 20 ; j++){
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	3301      	adds	r3, #1
 8001eee:	623b      	str	r3, [r7, #32]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2b13      	cmp	r3, #19
 8001ef4:	dd99      	ble.n	8001e2a <HAL_TIM_PeriodElapsedCallback+0x47e>
							}
						}
					}
				}
				for(int l = 0 ; l < 3 ; l++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	e01d      	b.n	8001f38 <HAL_TIM_PeriodElapsedCallback+0x58c>
 8001efc:	200002bc 	.word	0x200002bc
 8001f00:	55555556 	.word	0x55555556
 8001f04:	20000010 	.word	0x20000010
 8001f08:	20000018 	.word	0x20000018
 8001f0c:	2000027c 	.word	0x2000027c
 8001f10:	20000278 	.word	0x20000278
 8001f14:	20000284 	.word	0x20000284
 8001f18:	20000268 	.word	0x20000268
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	0800c114 	.word	0x0800c114
					setCursor(0, l);
 8001f24:	69b9      	ldr	r1, [r7, #24]
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff f914 	bl	8001154 <setCursor>
					write(0);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff f9ba 	bl	80012a6 <write>
				for(int l = 0 ; l < 3 ; l++){
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	ddf2      	ble.n	8001f24 <HAL_TIM_PeriodElapsedCallback+0x578>
				}


				icounter++;
 8001f3e:	4b95      	ldr	r3, [pc, #596]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a93      	ldr	r2, [pc, #588]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001f46:	6013      	str	r3, [r2, #0]
			}
			//Game Over
			if (game == 2){
 8001f48:	4b93      	ldr	r3, [pc, #588]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d122      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0x5ea>
				setCursor(4, 1);
 8001f50:	2101      	movs	r1, #1
 8001f52:	2004      	movs	r0, #4
 8001f54:	f7ff f8fe 	bl	8001154 <setCursor>
				sprintf(massage, "SPEED : %d", speed);
 8001f58:	4b90      	ldr	r3, [pc, #576]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4990      	ldr	r1, [pc, #576]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001f60:	4890      	ldr	r0, [pc, #576]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001f62:	f007 f9cd 	bl	8009300 <siprintf>
				print(massage);
 8001f66:	488f      	ldr	r0, [pc, #572]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001f68:	f7ff f93c 	bl	80011e4 <print>
				setCursor(4, 2);
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f7ff f8f0 	bl	8001154 <setCursor>
				sprintf(massage, "SCORE : %d", coinsNumber);
 8001f74:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	498c      	ldr	r1, [pc, #560]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001f7c:	4889      	ldr	r0, [pc, #548]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001f7e:	f007 f9bf 	bl	8009300 <siprintf>
				print(massage);
 8001f82:	4888      	ldr	r0, [pc, #544]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001f84:	f7ff f92e 	bl	80011e4 <print>
				setCursor(4, 3);
 8001f88:	2103      	movs	r1, #3
 8001f8a:	2004      	movs	r0, #4
 8001f8c:	f7ff f8e2 	bl	8001154 <setCursor>
				print("Game Over");
 8001f90:	4887      	ldr	r0, [pc, #540]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8001f92:	f7ff f927 	bl	80011e4 <print>
			}

			////End Show
			// Win
			if( position[0] == 2 && position[1] == 58){
 8001f96:	4b87      	ldr	r3, [pc, #540]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x600>
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b3a      	cmp	r3, #58	; 0x3a
 8001fa4:	d102      	bne.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x600>
				game = 3;
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001fa8:	2203      	movs	r2, #3
 8001faa:	601a      	str	r2, [r3, #0]
			}
			if(game == 3 || icounter >= 41){
 8001fac:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d003      	beq.n	8001fbc <HAL_TIM_PeriodElapsedCallback+0x610>
 8001fb4:	4b77      	ldr	r3, [pc, #476]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b28      	cmp	r3, #40	; 0x28
 8001fba:	dd2b      	ble.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x668>
				clear();
 8001fbc:	f7ff f8c0 	bl	8001140 <clear>
				setCursor(4, 0);
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2004      	movs	r0, #4
 8001fc4:	f7ff f8c6 	bl	8001154 <setCursor>
				write(0xfc);
 8001fc8:	20fc      	movs	r0, #252	; 0xfc
 8001fca:	f7ff f96c 	bl	80012a6 <write>
				setCursor(4, 1);
 8001fce:	2101      	movs	r1, #1
 8001fd0:	2004      	movs	r0, #4
 8001fd2:	f7ff f8bf 	bl	8001154 <setCursor>
				sprintf(massage, "SPEED : %d", speed);
 8001fd6:	4b71      	ldr	r3, [pc, #452]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4970      	ldr	r1, [pc, #448]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8001fde:	4871      	ldr	r0, [pc, #452]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001fe0:	f007 f98e 	bl	8009300 <siprintf>
				print(massage);
 8001fe4:	486f      	ldr	r0, [pc, #444]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001fe6:	f7ff f8fd 	bl	80011e4 <print>
				setCursor(4, 2);
 8001fea:	2102      	movs	r1, #2
 8001fec:	2004      	movs	r0, #4
 8001fee:	f7ff f8b1 	bl	8001154 <setCursor>
				sprintf(massage, "SCORE : %d", coinsNumber);
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	496c      	ldr	r1, [pc, #432]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x800>)
 8001ffa:	486a      	ldr	r0, [pc, #424]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8001ffc:	f007 f980 	bl	8009300 <siprintf>
				print(massage);
 8002000:	4868      	ldr	r0, [pc, #416]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8002002:	f7ff f8ef 	bl	80011e4 <print>
				setCursor(2, 3);
 8002006:	2103      	movs	r1, #3
 8002008:	2002      	movs	r0, #2
 800200a:	f7ff f8a3 	bl	8001154 <setCursor>
				print("Congratulations !");
 800200e:	486a      	ldr	r0, [pc, #424]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002010:	f7ff f8e8 	bl	80011e4 <print>
			}


			delaySpeed = HAL_GetTick();
 8002014:	f001 f974 	bl	8003300 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x810>)
 800201c:	601a      	str	r2, [r3, #0]

		}
	}
    if (htim->Instance == TIM4)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8002024:	4293      	cmp	r3, r2
 8002026:	f040 80b1 	bne.w	800218c <HAL_TIM_PeriodElapsedCallback+0x7e0>
    {
		switch (four){
 800202a:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3b01      	subs	r3, #1
 8002030:	2b03      	cmp	r3, #3
 8002032:	f200 80ab 	bhi.w	800218c <HAL_TIM_PeriodElapsedCallback+0x7e0>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <HAL_TIM_PeriodElapsedCallback+0x690>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	0800204d 	.word	0x0800204d
 8002040:	080020a1 	.word	0x080020a1
 8002044:	080020ef 	.word	0x080020ef
 8002048:	0800214d 	.word	0x0800214d
			case 1 :
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 , 1);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002052:	485d      	ldr	r0, [pc, #372]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002054:	f002 ffae 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15 , 0);
 8002058:	2200      	movs	r2, #0
 800205a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205e:	485a      	ldr	r0, [pc, #360]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002060:	f002 ffa8 	bl	8004fb4 <HAL_GPIO_WritePin>
				//write your code to do when first LED on
				int temp = speed / 10;
 8002064:	4b4d      	ldr	r3, [pc, #308]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 800206a:	fb82 1203 	smull	r1, r2, r2, r3
 800206e:	1092      	asrs	r2, r2, #2
 8002070:	17db      	asrs	r3, r3, #31
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	60bb      	str	r3, [r7, #8]
				toBCDConverter(temp % 10);
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4b54      	ldr	r3, [pc, #336]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 800207a:	fb83 1302 	smull	r1, r3, r3, r2
 800207e:	1099      	asrs	r1, r3, #2
 8002080:	17d3      	asrs	r3, r2, #31
 8002082:	1ac9      	subs	r1, r1, r3
 8002084:	460b      	mov	r3, r1
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	1ad1      	subs	r1, r2, r3
 800208e:	4608      	mov	r0, r1
 8002090:	f000 f8e6 	bl	8002260 <toBCDConverter>
				four++;
 8002094:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 800209c:	6013      	str	r3, [r2, #0]
				break;
 800209e:	e075      	b.n	800218c <HAL_TIM_PeriodElapsedCallback+0x7e0>
			case 2 :
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15 , 1);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a6:	4848      	ldr	r0, [pc, #288]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80020a8:	f002 ff84 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 , 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020b2:	4845      	ldr	r0, [pc, #276]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80020b4:	f002 ff7e 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 , 1);
 80020b8:	2201      	movs	r2, #1
 80020ba:	2104      	movs	r1, #4
 80020bc:	4842      	ldr	r0, [pc, #264]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80020be:	f002 ff79 	bl	8004fb4 <HAL_GPIO_WritePin>
				//write your code to do when second LED on
				toBCDConverter(speed % 10);
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 80020c8:	fb83 1302 	smull	r1, r3, r3, r2
 80020cc:	1099      	asrs	r1, r3, #2
 80020ce:	17d3      	asrs	r3, r2, #31
 80020d0:	1ac9      	subs	r1, r1, r3
 80020d2:	460b      	mov	r3, r1
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	1ad1      	subs	r1, r2, r3
 80020dc:	4608      	mov	r0, r1
 80020de:	f000 f8bf 	bl	8002260 <toBCDConverter>
				four++;
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4a36      	ldr	r2, [pc, #216]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80020ea:	6013      	str	r3, [r2, #0]
				break;
 80020ec:	e04e      	b.n	800218c <HAL_TIM_PeriodElapsedCallback+0x7e0>
			case 3 :
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 , 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2104      	movs	r1, #4
 80020f2:	4835      	ldr	r0, [pc, #212]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80020f4:	f002 ff5e 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 , 1);
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020fe:	4832      	ldr	r0, [pc, #200]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002100:	f002 ff58 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 , 0);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210a:	482f      	ldr	r0, [pc, #188]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 800210c:	f002 ff52 	bl	8004fb4 <HAL_GPIO_WritePin>
				//write your code to do when thrid LED on
				temp = coinsNumber / 10;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2d      	ldr	r2, [pc, #180]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002116:	fb82 1203 	smull	r1, r2, r2, r3
 800211a:	1092      	asrs	r2, r2, #2
 800211c:	17db      	asrs	r3, r3, #31
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	60bb      	str	r3, [r7, #8]
				toBCDConverter(temp % 10);
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002126:	fb83 1302 	smull	r1, r3, r3, r2
 800212a:	1099      	asrs	r1, r3, #2
 800212c:	17d3      	asrs	r3, r2, #31
 800212e:	1ac9      	subs	r1, r1, r3
 8002130:	460b      	mov	r3, r1
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	1ad1      	subs	r1, r2, r3
 800213a:	4608      	mov	r0, r1
 800213c:	f000 f890 	bl	8002260 <toBCDConverter>
				four++;
 8002140:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8002148:	6013      	str	r3, [r2, #0]
				break;
 800214a:	e01f      	b.n	800218c <HAL_TIM_PeriodElapsedCallback+0x7e0>
			case 4 :
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13 , 1);
 800214c:	2201      	movs	r2, #1
 800214e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002152:	481d      	ldr	r0, [pc, #116]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002154:	f002 ff2e 	bl	8004fb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 , 0);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800215e:	481a      	ldr	r0, [pc, #104]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002160:	f002 ff28 	bl	8004fb4 <HAL_GPIO_WritePin>
				//write your code to do when forth LED on
				toBCDConverter(coinsNumber % 10);
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x820>)
 800216a:	fb83 1302 	smull	r1, r3, r3, r2
 800216e:	1099      	asrs	r1, r3, #2
 8002170:	17d3      	asrs	r3, r2, #31
 8002172:	1ac9      	subs	r1, r1, r3
 8002174:	460b      	mov	r3, r1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	1ad1      	subs	r1, r2, r3
 800217e:	4608      	mov	r0, r1
 8002180:	f000 f86e 	bl	8002260 <toBCDConverter>
				four = 1;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
				break;
 800218a:	bf00      	nop
		}

    }

}
 800218c:	bf00      	nop
 800218e:	3738      	adds	r7, #56	; 0x38
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000284 	.word	0x20000284
 8002198:	2000027c 	.word	0x2000027c
 800219c:	20000008 	.word	0x20000008
 80021a0:	0800c118 	.word	0x0800c118
 80021a4:	20000718 	.word	0x20000718
 80021a8:	20000004 	.word	0x20000004
 80021ac:	0800c124 	.word	0x0800c124
 80021b0:	0800c130 	.word	0x0800c130
 80021b4:	20000010 	.word	0x20000010
 80021b8:	0800c13c 	.word	0x0800c13c
 80021bc:	20000268 	.word	0x20000268
 80021c0:	40000800 	.word	0x40000800
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	48000400 	.word	0x48000400
 80021cc:	66666667 	.word	0x66666667

080021d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b09e      	sub	sp, #120	; 0x78
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e0:	d130      	bne.n	8002244 <HAL_ADC_ConvCpltCallback+0x74>
    {
//    	if(HAL_GetTick() >= delayAdc1 + 250 ){

			int x = HAL_ADC_GetValue(&hadc1);
 80021e2:	481a      	ldr	r0, [pc, #104]	; (800224c <HAL_ADC_ConvCpltCallback+0x7c>)
 80021e4:	f001 fbee 	bl	80039c4 <HAL_ADC_GetValue>
 80021e8:	4603      	mov	r3, r0
 80021ea:	677b      	str	r3, [r7, #116]	; 0x74
			speed = (x*15/4014)+5;
 80021ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_ADC_ConvCpltCallback+0x80>)
 80021f6:	fb82 1203 	smull	r1, r2, r2, r3
 80021fa:	441a      	add	r2, r3
 80021fc:	12d2      	asrs	r2, r2, #11
 80021fe:	17db      	asrs	r3, r3, #31
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	3305      	adds	r3, #5
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <HAL_ADC_ConvCpltCallback+0x84>)
 8002206:	6013      	str	r3, [r2, #0]
			unsigned char data[100] = "";
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	2260      	movs	r2, #96	; 0x60
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f006 f9cf 	bl	80085b8 <memset>
			int n = sprintf(data, "%d : %d\n", x, speed);
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_ADC_ConvCpltCallback+0x84>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f107 000c 	add.w	r0, r7, #12
 8002222:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002224:	490c      	ldr	r1, [pc, #48]	; (8002258 <HAL_ADC_ConvCpltCallback+0x88>)
 8002226:	f007 f86b 	bl	8009300 <siprintf>
 800222a:	6738      	str	r0, [r7, #112]	; 0x70
			HAL_UART_Transmit(&huart2, data, n, 1000);
 800222c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800222e:	b29a      	uxth	r2, r3
 8002230:	f107 010c 	add.w	r1, r7, #12
 8002234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002238:	4808      	ldr	r0, [pc, #32]	; (800225c <HAL_ADC_ConvCpltCallback+0x8c>)
 800223a:	f005 f979 	bl	8007530 <HAL_UART_Transmit>

//			HAL_UART_Transmit(&huart2, data, n, 1000);
//    	}

//    	delayAdc1 = HAL_GetTick();
		HAL_ADC_Start_IT(&hadc1);
 800223e:	4803      	ldr	r0, [pc, #12]	; (800224c <HAL_ADC_ConvCpltCallback+0x7c>)
 8002240:	f001 fa80 	bl	8003744 <HAL_ADC_Start_IT>

    }
}
 8002244:	bf00      	nop
 8002246:	3778      	adds	r7, #120	; 0x78
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200007c8 	.word	0x200007c8
 8002250:	829d66af 	.word	0x829d66af
 8002254:	20000008 	.word	0x20000008
 8002258:	0800c150 	.word	0x0800c150
 800225c:	200008c8 	.word	0x200008c8

08002260 <toBCDConverter>:

void toBCDConverter(int i){
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	int x1 = i & 1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	617b      	str	r3, [r7, #20]
	int x2 = i & 2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]
	int x3 = i & 4;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
	int x4 = i & 8;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	60bb      	str	r3, [r7, #8]
	if(x1 > 0) x1 = 1;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	dd01      	ble.n	8002292 <toBCDConverter+0x32>
 800228e:	2301      	movs	r3, #1
 8002290:	617b      	str	r3, [r7, #20]
	if(x2 > 0) x2 = 1;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	dd01      	ble.n	800229c <toBCDConverter+0x3c>
 8002298:	2301      	movs	r3, #1
 800229a:	613b      	str	r3, [r7, #16]
	if(x3 > 0) x3 = 1;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	dd01      	ble.n	80022a6 <toBCDConverter+0x46>
 80022a2:	2301      	movs	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
	if(x4 > 0) x4 = 1;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	dd01      	ble.n	80022b0 <toBCDConverter+0x50>
 80022ac:	2301      	movs	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, x1);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	2110      	movs	r1, #16
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <toBCDConverter+0x90>)
 80022ba:	f002 fe7b 	bl	8004fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, x2);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	2120      	movs	r1, #32
 80022c6:	480a      	ldr	r0, [pc, #40]	; (80022f0 <toBCDConverter+0x90>)
 80022c8:	f002 fe74 	bl	8004fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, x3);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	2101      	movs	r1, #1
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <toBCDConverter+0x94>)
 80022d6:	f002 fe6d 	bl	8004fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, x4);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	2102      	movs	r1, #2
 80022e2:	4804      	ldr	r0, [pc, #16]	; (80022f4 <toBCDConverter+0x94>)
 80022e4:	f002 fe66 	bl	8004fb4 <HAL_GPIO_WritePin>
}
 80022e8:	bf00      	nop
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	48000800 	.word	0x48000800
 80022f4:	48000400 	.word	0x48000400

080022f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fe:	f000 ffa5 	bl	800324c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002302:	f000 f963 	bl	80025cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002306:	f000 fbf3 	bl	8002af0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800230a:	f000 fa35 	bl	8002778 <MX_I2C1_Init>
  MX_SPI1_Init();
 800230e:	f000 fa73 	bl	80027f8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8002312:	f000 fbcb 	bl	8002aac <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8002316:	f000 fb99 	bl	8002a4c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800231a:	f000 f9bd 	bl	8002698 <MX_ADC1_Init>
  MX_TIM4_Init();
 800231e:	f000 fb47 	bl	80029b0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002322:	f000 faa7 	bl	8002874 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002326:	f000 faf3 	bl	8002910 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 800232a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800232e:	9303      	str	r3, [sp, #12]
 8002330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234e:	488b      	ldr	r0, [pc, #556]	; (800257c <main+0x284>)
 8002350:	f7fe fc9a 	bl	8000c88 <LiquidCrystal>
  begin(20, 4);
 8002354:	2104      	movs	r1, #4
 8002356:	2014      	movs	r0, #20
 8002358:	f7fe fd2e 	bl	8000db8 <begin>

  HAL_ADC_Start_IT(&hadc1);
 800235c:	4888      	ldr	r0, [pc, #544]	; (8002580 <main+0x288>)
 800235e:	f001 f9f1 	bl	8003744 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002362:	4888      	ldr	r0, [pc, #544]	; (8002584 <main+0x28c>)
 8002364:	f004 fc64 	bl	8006c30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8002368:	4887      	ldr	r0, [pc, #540]	; (8002588 <main+0x290>)
 800236a:	f004 fc61 	bl	8006c30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800236e:	4887      	ldr	r0, [pc, #540]	; (800258c <main+0x294>)
 8002370:	f004 fc5e 	bl	8006c30 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, uartData, sizeof(uartData));
 8002374:	2201      	movs	r2, #1
 8002376:	4986      	ldr	r1, [pc, #536]	; (8002590 <main+0x298>)
 8002378:	4886      	ldr	r0, [pc, #536]	; (8002594 <main+0x29c>)
 800237a:	f005 f96d 	bl	8007658 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 800237e:	2201      	movs	r2, #1
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	4885      	ldr	r0, [pc, #532]	; (8002598 <main+0x2a0>)
 8002384:	f002 fe16 	bl	8004fb4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	2101      	movs	r1, #1
 800238c:	4883      	ldr	r0, [pc, #524]	; (800259c <main+0x2a4>)
 800238e:	f002 fe11 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	2102      	movs	r1, #2
 8002396:	4881      	ldr	r0, [pc, #516]	; (800259c <main+0x2a4>)
 8002398:	f002 fe0c 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800239c:	2201      	movs	r2, #1
 800239e:	2104      	movs	r1, #4
 80023a0:	487e      	ldr	r0, [pc, #504]	; (800259c <main+0x2a4>)
 80023a2:	f002 fe07 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2108      	movs	r1, #8
 80023aa:	487c      	ldr	r0, [pc, #496]	; (800259c <main+0x2a4>)
 80023ac:	f002 fe02 	bl	8004fb4 <HAL_GPIO_WritePin>

  createChar(0, blade);
 80023b0:	497b      	ldr	r1, [pc, #492]	; (80025a0 <main+0x2a8>)
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe ff41 	bl	800123a <createChar>
  createChar(1, mario);
 80023b8:	497a      	ldr	r1, [pc, #488]	; (80025a4 <main+0x2ac>)
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fe ff3d 	bl	800123a <createChar>
  createChar(2, brick);
 80023c0:	4979      	ldr	r1, [pc, #484]	; (80025a8 <main+0x2b0>)
 80023c2:	2002      	movs	r0, #2
 80023c4:	f7fe ff39 	bl	800123a <createChar>
  createChar(3, box);
 80023c8:	4978      	ldr	r1, [pc, #480]	; (80025ac <main+0x2b4>)
 80023ca:	2003      	movs	r0, #3
 80023cc:	f7fe ff35 	bl	800123a <createChar>
  createChar(4, ground);
 80023d0:	4977      	ldr	r1, [pc, #476]	; (80025b0 <main+0x2b8>)
 80023d2:	2004      	movs	r0, #4
 80023d4:	f7fe ff31 	bl	800123a <createChar>
  createChar(5, leftPipe);
 80023d8:	4976      	ldr	r1, [pc, #472]	; (80025b4 <main+0x2bc>)
 80023da:	2005      	movs	r0, #5
 80023dc:	f7fe ff2d 	bl	800123a <createChar>
  createChar(6, rightPipe);
 80023e0:	4975      	ldr	r1, [pc, #468]	; (80025b8 <main+0x2c0>)
 80023e2:	2006      	movs	r0, #6
 80023e4:	f7fe ff29 	bl	800123a <createChar>
  createChar(7, flag);
 80023e8:	4974      	ldr	r1, [pc, #464]	; (80025bc <main+0x2c4>)
 80023ea:	2007      	movs	r0, #7
 80023ec:	f7fe ff25 	bl	800123a <createChar>

	setCursor(2, 2);
 80023f0:	2102      	movs	r1, #2
 80023f2:	2002      	movs	r0, #2
 80023f4:	f7fe feae 	bl	8001154 <setCursor>
	write(1);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7fe ff54 	bl	80012a6 <write>
	setCursor(0, 3);
 80023fe:	2103      	movs	r1, #3
 8002400:	2000      	movs	r0, #0
 8002402:	f7fe fea7 	bl	8001154 <setCursor>
	write(4);
 8002406:	2004      	movs	r0, #4
 8002408:	f7fe ff4d 	bl	80012a6 <write>
	setCursor(1, 3);
 800240c:	2103      	movs	r1, #3
 800240e:	2001      	movs	r0, #1
 8002410:	f7fe fea0 	bl	8001154 <setCursor>
	write(4);
 8002414:	2004      	movs	r0, #4
 8002416:	f7fe ff46 	bl	80012a6 <write>
	setCursor(2, 3);
 800241a:	2103      	movs	r1, #3
 800241c:	2002      	movs	r0, #2
 800241e:	f7fe fe99 	bl	8001154 <setCursor>
	write(4);
 8002422:	2004      	movs	r0, #4
 8002424:	f7fe ff3f 	bl	80012a6 <write>
	setCursor(3, 3);
 8002428:	2103      	movs	r1, #3
 800242a:	2003      	movs	r0, #3
 800242c:	f7fe fe92 	bl	8001154 <setCursor>
	write(4);
 8002430:	2004      	movs	r0, #4
 8002432:	f7fe ff38 	bl	80012a6 <write>
	setCursor(0, 2);
 8002436:	2102      	movs	r1, #2
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fe8b 	bl	8001154 <setCursor>
	write(0);
 800243e:	2000      	movs	r0, #0
 8002440:	f7fe ff31 	bl	80012a6 <write>
	setCursor(0, 1);
 8002444:	2101      	movs	r1, #1
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fe84 	bl	8001154 <setCursor>
	write(0);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe ff2a 	bl	80012a6 <write>
	setCursor(0, 0);
 8002452:	2100      	movs	r1, #0
 8002454:	2000      	movs	r0, #0
 8002456:	f7fe fe7d 	bl	8001154 <setCursor>
	write(0);
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe ff23 	bl	80012a6 <write>
	setCursor(19, 2);
 8002460:	2102      	movs	r1, #2
 8002462:	2013      	movs	r0, #19
 8002464:	f7fe fe76 	bl	8001154 <setCursor>
	write(7);
 8002468:	2007      	movs	r0, #7
 800246a:	f7fe ff1c 	bl	80012a6 <write>
	//row 3
	for(int i = 4 ; i < 20 ; i++){
 800246e:	2304      	movs	r3, #4
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e01b      	b.n	80024ac <main+0x1b4>
		int temp = 4*(rand()%5);
 8002474:	f006 ff0a 	bl	800928c <rand>
 8002478:	4601      	mov	r1, r0
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <main+0x2c8>)
 800247c:	fb83 2301 	smull	r2, r3, r3, r1
 8002480:	105a      	asrs	r2, r3, #1
 8002482:	17cb      	asrs	r3, r1, #31
 8002484:	1ad2      	subs	r2, r2, r3
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	1aca      	subs	r2, r1, r3
 800248e:	0093      	lsls	r3, r2, #2
 8002490:	603b      	str	r3, [r7, #0]
		if(temp != 0){
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <main+0x1ae>
			setCursor(i, 3);
 8002498:	2103      	movs	r1, #3
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7fe fe5a 	bl	8001154 <setCursor>
			write(4);
 80024a0:	2004      	movs	r0, #4
 80024a2:	f7fe ff00 	bl	80012a6 <write>
	for(int i = 4 ; i < 20 ; i++){
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b13      	cmp	r3, #19
 80024b0:	dde0      	ble.n	8002474 <main+0x17c>
		}
	}
	//row 2
	for(int i = 5 ; i < 16 ; i++){
 80024b2:	2305      	movs	r3, #5
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	e027      	b.n	8002508 <main+0x210>
		int temp = 5*(rand()%5);
 80024b8:	f006 fee8 	bl	800928c <rand>
 80024bc:	4601      	mov	r1, r0
 80024be:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <main+0x2c8>)
 80024c0:	fb83 2301 	smull	r2, r3, r3, r1
 80024c4:	105a      	asrs	r2, r3, #1
 80024c6:	17cb      	asrs	r3, r1, #31
 80024c8:	1ad2      	subs	r2, r2, r3
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	1aca      	subs	r2, r1, r3
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	607b      	str	r3, [r7, #4]
		if(temp == 0){
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d110      	bne.n	8002502 <main+0x20a>
			setCursor(i, 2);
 80024e0:	2102      	movs	r1, #2
 80024e2:	6938      	ldr	r0, [r7, #16]
 80024e4:	f7fe fe36 	bl	8001154 <setCursor>
			write(5);
 80024e8:	2005      	movs	r0, #5
 80024ea:	f7fe fedc 	bl	80012a6 <write>
			i++;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	3301      	adds	r3, #1
 80024f2:	613b      	str	r3, [r7, #16]
			setCursor(i, 2);
 80024f4:	2102      	movs	r1, #2
 80024f6:	6938      	ldr	r0, [r7, #16]
 80024f8:	f7fe fe2c 	bl	8001154 <setCursor>
			write(6);
 80024fc:	2006      	movs	r0, #6
 80024fe:	f7fe fed2 	bl	80012a6 <write>
	for(int i = 5 ; i < 16 ; i++){
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	3301      	adds	r3, #1
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	ddd4      	ble.n	80024b8 <main+0x1c0>
		}
	}
	//row 0
	for(int i = 3 ; i < 16 ; i++){
 800250e:	2303      	movs	r3, #3
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e024      	b.n	800255e <main+0x266>
		int temp = 2*(rand()%3);
 8002514:	f006 feba 	bl	800928c <rand>
 8002518:	4601      	mov	r1, r0
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <main+0x2cc>)
 800251c:	fb83 3201 	smull	r3, r2, r3, r1
 8002520:	17cb      	asrs	r3, r1, #31
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	1aca      	subs	r2, r1, r3
 800252c:	0053      	lsls	r3, r2, #1
 800252e:	60bb      	str	r3, [r7, #8]
		if(temp == 2){
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d106      	bne.n	8002544 <main+0x24c>
			setCursor(i, 0);
 8002536:	2100      	movs	r1, #0
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f7fe fe0b 	bl	8001154 <setCursor>
			write(2);
 800253e:	2002      	movs	r0, #2
 8002540:	f7fe feb1 	bl	80012a6 <write>
		}
		if(temp == 4){
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b04      	cmp	r3, #4
 8002548:	d106      	bne.n	8002558 <main+0x260>
			setCursor(i, 0);
 800254a:	2100      	movs	r1, #0
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7fe fe01 	bl	8001154 <setCursor>
			write(3);
 8002552:	2003      	movs	r0, #3
 8002554:	f7fe fea7 	bl	80012a6 <write>
	for(int i = 3 ; i < 16 ; i++){
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	ddd7      	ble.n	8002514 <main+0x21c>
		}
	}

	setCursor(2, 1);
 8002564:	2101      	movs	r1, #1
 8002566:	2002      	movs	r0, #2
 8002568:	f7fe fdf4 	bl	8001154 <setCursor>
	print("Press S To Start");
 800256c:	4816      	ldr	r0, [pc, #88]	; (80025c8 <main+0x2d0>)
 800256e:	f7fe fe39 	bl	80011e4 <print>
	setCursor(5, 1);
 8002572:	2101      	movs	r1, #1
 8002574:	2005      	movs	r0, #5
 8002576:	f7fe fded 	bl	8001154 <setCursor>

  while (1)
 800257a:	e7fe      	b.n	800257a <main+0x282>
 800257c:	48000c00 	.word	0x48000c00
 8002580:	200007c8 	.word	0x200007c8
 8002584:	2000087c 	.word	0x2000087c
 8002588:	2000077c 	.word	0x2000077c
 800258c:	20000680 	.word	0x20000680
 8002590:	2000067c 	.word	0x2000067c
 8002594:	200008c8 	.word	0x200008c8
 8002598:	48001000 	.word	0x48001000
 800259c:	48000800 	.word	0x48000800
 80025a0:	20000028 	.word	0x20000028
 80025a4:	20000030 	.word	0x20000030
 80025a8:	20000038 	.word	0x20000038
 80025ac:	20000040 	.word	0x20000040
 80025b0:	20000048 	.word	0x20000048
 80025b4:	20000050 	.word	0x20000050
 80025b8:	20000058 	.word	0x20000058
 80025bc:	20000060 	.word	0x20000060
 80025c0:	66666667 	.word	0x66666667
 80025c4:	55555556 	.word	0x55555556
 80025c8:	0800c15c 	.word	0x0800c15c

080025cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b09e      	sub	sp, #120	; 0x78
 80025d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025d6:	2228      	movs	r2, #40	; 0x28
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f005 ffec 	bl	80085b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f0:	463b      	mov	r3, r7
 80025f2:	223c      	movs	r2, #60	; 0x3c
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f005 ffde 	bl	80085b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80025fc:	2303      	movs	r3, #3
 80025fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002600:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002604:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800260a:	2301      	movs	r3, #1
 800260c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800260e:	2310      	movs	r3, #16
 8002610:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002612:	2302      	movs	r3, #2
 8002614:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800261a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800261c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002620:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002622:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002626:	4618      	mov	r0, r3
 8002628:	f002 ff12 	bl	8005450 <HAL_RCC_OscConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002632:	f000 fb45 	bl	8002cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002636:	230f      	movs	r3, #15
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263a:	2302      	movs	r3, #2
 800263c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002648:	2300      	movs	r3, #0
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800264c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002650:	2102      	movs	r1, #2
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fe04 	bl	8006260 <HAL_RCC_ClockConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800265e:	f000 fb2f 	bl	8002cc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <SystemClock_Config+0xc8>)
 8002664:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800266a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002674:	2300      	movs	r3, #0
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002678:	463b      	mov	r3, r7
 800267a:	4618      	mov	r0, r3
 800267c:	f004 f826 	bl	80066cc <HAL_RCCEx_PeriphCLKConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002686:	f000 fb1b 	bl	8002cc0 <Error_Handler>
  }
}
 800268a:	bf00      	nop
 800268c:	3778      	adds	r7, #120	; 0x78
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	000200a2 	.word	0x000200a2

08002698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
 80026b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80026ba:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80026c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <MX_ADC1_Init+0xdc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <MX_ADC1_Init+0xdc>)
 8002704:	2204      	movs	r2, #4
 8002706:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <MX_ADC1_Init+0xdc>)
 800270a:	2200      	movs	r2, #0
 800270c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <MX_ADC1_Init+0xdc>)
 8002710:	2200      	movs	r2, #0
 8002712:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <MX_ADC1_Init+0xdc>)
 8002716:	f000 fe35 	bl	8003384 <HAL_ADC_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002720:	f000 face 	bl	8002cc0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	4619      	mov	r1, r3
 800272e:	4811      	ldr	r0, [pc, #68]	; (8002774 <MX_ADC1_Init+0xdc>)
 8002730:	f001 ff76 	bl	8004620 <HAL_ADCEx_MultiModeConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800273a:	f000 fac1 	bl	8002cc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800273e:	2302      	movs	r3, #2
 8002740:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002742:	2301      	movs	r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800274a:	2307      	movs	r3, #7
 800274c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4806      	ldr	r0, [pc, #24]	; (8002774 <MX_ADC1_Init+0xdc>)
 800275c:	f001 fc74 	bl	8004048 <HAL_ADC_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002766:	f000 faab 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	3728      	adds	r7, #40	; 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200007c8 	.word	0x200007c8

08002778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <MX_I2C1_Init+0x74>)
 800277e:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <MX_I2C1_Init+0x78>)
 8002780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_I2C1_Init+0x74>)
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <MX_I2C1_Init+0x7c>)
 8002786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_I2C1_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_I2C1_Init+0x74>)
 8002790:	2201      	movs	r2, #1
 8002792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002794:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_I2C1_Init+0x74>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_I2C1_Init+0x74>)
 800279c:	2200      	movs	r2, #0
 800279e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_I2C1_Init+0x74>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_I2C1_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_I2C1_Init+0x74>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b2:	480e      	ldr	r0, [pc, #56]	; (80027ec <MX_I2C1_Init+0x74>)
 80027b4:	f002 fc48 	bl	8005048 <HAL_I2C_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027be:	f000 fa7f 	bl	8002cc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027c2:	2100      	movs	r1, #0
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <MX_I2C1_Init+0x74>)
 80027c6:	f002 fcce 	bl	8005166 <HAL_I2CEx_ConfigAnalogFilter>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027d0:	f000 fa76 	bl	8002cc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027d4:	2100      	movs	r1, #0
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_I2C1_Init+0x74>)
 80027d8:	f002 fd10 	bl	80051fc <HAL_I2CEx_ConfigDigitalFilter>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027e2:	f000 fa6d 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200006cc 	.word	0x200006cc
 80027f0:	40005400 	.word	0x40005400
 80027f4:	2000090e 	.word	0x2000090e

080027f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <MX_SPI1_Init+0x74>)
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <MX_SPI1_Init+0x78>)
 8002800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_SPI1_Init+0x74>)
 8002804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002808:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <MX_SPI1_Init+0x74>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_SPI1_Init+0x74>)
 8002812:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002816:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_SPI1_Init+0x74>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <MX_SPI1_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_SPI1_Init+0x74>)
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <MX_SPI1_Init+0x74>)
 800282e:	2208      	movs	r2, #8
 8002830:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_SPI1_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_SPI1_Init+0x74>)
 800283a:	2200      	movs	r2, #0
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_SPI1_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_SPI1_Init+0x74>)
 8002846:	2207      	movs	r2, #7
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_SPI1_Init+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_SPI1_Init+0x74>)
 8002852:	2208      	movs	r2, #8
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_SPI1_Init+0x74>)
 8002858:	f004 f8e8 	bl	8006a2c <HAL_SPI_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002862:	f000 fa2d 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000818 	.word	0x20000818
 8002870:	40013000 	.word	0x40013000

08002874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <MX_TIM2_Init+0x98>)
 8002894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <MX_TIM2_Init+0x98>)
 800289c:	f640 620f 	movw	r2, #3599	; 0xe0f
 80028a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_TIM2_Init+0x98>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <MX_TIM2_Init+0x98>)
 80028aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80028ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_TIM2_Init+0x98>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_TIM2_Init+0x98>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028bc:	4813      	ldr	r0, [pc, #76]	; (800290c <MX_TIM2_Init+0x98>)
 80028be:	f004 f960 	bl	8006b82 <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80028c8:	f000 f9fa 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4619      	mov	r1, r3
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <MX_TIM2_Init+0x98>)
 80028da:	f004 fb32 	bl	8006f42 <HAL_TIM_ConfigClockSource>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80028e4:	f000 f9ec 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_TIM2_Init+0x98>)
 80028f6:	f004 fd2f 	bl	8007358 <HAL_TIMEx_MasterConfigSynchronization>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002900:	f000 f9de 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2000087c 	.word	0x2000087c

08002910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800292e:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <MX_TIM3_Init+0x98>)
 8002930:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <MX_TIM3_Init+0x9c>)
 8002932:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3599;
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_TIM3_Init+0x98>)
 8002936:	f640 620f 	movw	r2, #3599	; 0xe0f
 800293a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_TIM3_Init+0x98>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <MX_TIM3_Init+0x98>)
 8002944:	f242 7210 	movw	r2, #10000	; 0x2710
 8002948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_TIM3_Init+0x98>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_TIM3_Init+0x98>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002956:	4814      	ldr	r0, [pc, #80]	; (80029a8 <MX_TIM3_Init+0x98>)
 8002958:	f004 f913 	bl	8006b82 <HAL_TIM_Base_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002962:	f000 f9ad 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	4619      	mov	r1, r3
 8002972:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_TIM3_Init+0x98>)
 8002974:	f004 fae5 	bl	8006f42 <HAL_TIM_ConfigClockSource>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800297e:	f000 f99f 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4806      	ldr	r0, [pc, #24]	; (80029a8 <MX_TIM3_Init+0x98>)
 8002990:	f004 fce2 	bl	8007358 <HAL_TIMEx_MasterConfigSynchronization>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800299a:	f000 f991 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000077c 	.word	0x2000077c
 80029ac:	40000400 	.word	0x40000400

080029b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_TIM4_Init+0x94>)
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <MX_TIM4_Init+0x98>)
 80029d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_TIM4_Init+0x94>)
 80029d6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80029da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <MX_TIM4_Init+0x94>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_TIM4_Init+0x94>)
 80029e4:	2264      	movs	r2, #100	; 0x64
 80029e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <MX_TIM4_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_TIM4_Init+0x94>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029f4:	4813      	ldr	r0, [pc, #76]	; (8002a44 <MX_TIM4_Init+0x94>)
 80029f6:	f004 f8c4 	bl	8006b82 <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002a00:	f000 f95e 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <MX_TIM4_Init+0x94>)
 8002a12:	f004 fa96 	bl	8006f42 <HAL_TIM_ConfigClockSource>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002a1c:	f000 f950 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_TIM4_Init+0x94>)
 8002a2e:	f004 fc93 	bl	8007358 <HAL_TIMEx_MasterConfigSynchronization>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002a38:	f000 f942 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000680 	.word	0x20000680
 8002a48:	40000800 	.word	0x40000800

08002a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <MX_USART2_UART_Init+0x5c>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_USART2_UART_Init+0x58>)
 8002a90:	f004 fd00 	bl	8007494 <HAL_UART_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a9a:	f000 f911 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200008c8 	.word	0x200008c8
 8002aa8:	40004400 	.word	0x40004400

08002aac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <MX_USB_PCD_Init+0x3c>)
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <MX_USB_PCD_Init+0x40>)
 8002ab4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <MX_USB_PCD_Init+0x3c>)
 8002ab8:	2208      	movs	r2, #8
 8002aba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <MX_USB_PCD_Init+0x3c>)
 8002abe:	2202      	movs	r2, #2
 8002ac0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <MX_USB_PCD_Init+0x3c>)
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <MX_USB_PCD_Init+0x3c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <MX_USB_PCD_Init+0x3c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002ad4:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <MX_USB_PCD_Init+0x3c>)
 8002ad6:	f002 fbdd 	bl	8005294 <HAL_PCD_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002ae0:	f000 f8ee 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000094c 	.word	0x2000094c
 8002aec:	40005c00 	.word	0x40005c00

08002af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	; 0x30
 8002af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b06:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4a66      	ldr	r2, [pc, #408]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b10:	6153      	str	r3, [r2, #20]
 8002b12:	4b64      	ldr	r3, [pc, #400]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	4a60      	ldr	r2, [pc, #384]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b28:	6153      	str	r3, [r2, #20]
 8002b2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b40:	6153      	str	r3, [r2, #20]
 8002b42:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4a54      	ldr	r2, [pc, #336]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b58:	6153      	str	r3, [r2, #20]
 8002b5a:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	4b4f      	ldr	r3, [pc, #316]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4a4e      	ldr	r2, [pc, #312]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b70:	6153      	str	r3, [r2, #20]
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b88:	6153      	str	r3, [r2, #20]
 8002b8a:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <MX_GPIO_Init+0x1b4>)
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|LD4_Pin|LD3_Pin
 8002b96:	2200      	movs	r2, #0
 8002b98:	f64f 7188 	movw	r1, #65416	; 0xff88
 8002b9c:	4842      	ldr	r0, [pc, #264]	; (8002ca8 <MX_GPIO_Init+0x1b8>)
 8002b9e:	f002 fa09 	bl	8004fb4 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	213f      	movs	r1, #63	; 0x3f
 8002ba6:	4841      	ldr	r0, [pc, #260]	; (8002cac <MX_GPIO_Init+0x1bc>)
 8002ba8:	f002 fa04 	bl	8004fb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8002bac:	2200      	movs	r2, #0
 8002bae:	f24f 0107 	movw	r1, #61447	; 0xf007
 8002bb2:	483f      	ldr	r0, [pc, #252]	; (8002cb0 <MX_GPIO_Init+0x1c0>)
 8002bb4:	f002 f9fe 	bl	8004fb4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 LD4_Pin LD3_Pin
                           LD5_Pin LD7_Pin LD9_Pin LD10_Pin
                           LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|LD4_Pin|LD3_Pin
 8002bb8:	f64f 7388 	movw	r3, #65416	; 0xff88
 8002bbc:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4835      	ldr	r0, [pc, #212]	; (8002ca8 <MX_GPIO_Init+0x1b8>)
 8002bd2:	f002 f85d 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 8002bd6:	2330      	movs	r3, #48	; 0x30
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <MX_GPIO_Init+0x1c4>)
 8002bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	482f      	ldr	r0, [pc, #188]	; (8002ca8 <MX_GPIO_Init+0x1b8>)
 8002bea:	f002 f851 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002bee:	233f      	movs	r3, #63	; 0x3f
 8002bf0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	4829      	ldr	r0, [pc, #164]	; (8002cac <MX_GPIO_Init+0x1bc>)
 8002c06:	f002 f843 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c20:	f002 f836 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8002c24:	f24f 0307 	movw	r3, #61447	; 0xf007
 8002c28:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 031c 	add.w	r3, r7, #28
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	481c      	ldr	r0, [pc, #112]	; (8002cb0 <MX_GPIO_Init+0x1c0>)
 8002c3e:	f002 f827 	bl	8004c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c42:	230f      	movs	r3, #15
 8002c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <MX_GPIO_Init+0x1c8>)
 8002c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	4819      	ldr	r0, [pc, #100]	; (8002cbc <MX_GPIO_Init+0x1cc>)
 8002c56:	f002 f81b 	bl	8004c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	2006      	movs	r0, #6
 8002c60:	f001 ff69 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c64:	2006      	movs	r0, #6
 8002c66:	f001 ff82 	bl	8004b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2007      	movs	r0, #7
 8002c70:	f001 ff61 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c74:	2007      	movs	r0, #7
 8002c76:	f001 ff7a 	bl	8004b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	2008      	movs	r0, #8
 8002c80:	f001 ff59 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8002c84:	2008      	movs	r0, #8
 8002c86:	f001 ff72 	bl	8004b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	2009      	movs	r0, #9
 8002c90:	f001 ff51 	bl	8004b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c94:	2009      	movs	r0, #9
 8002c96:	f001 ff6a 	bl	8004b6e <HAL_NVIC_EnableIRQ>

}
 8002c9a:	bf00      	nop
 8002c9c:	3730      	adds	r7, #48	; 0x30
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	48001000 	.word	0x48001000
 8002cac:	48000800 	.word	0x48000800
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	10120000 	.word	0x10120000
 8002cb8:	10110000 	.word	0x10110000
 8002cbc:	48000c00 	.word	0x48000c00

08002cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <Error_Handler+0x6>

08002cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_MspInit+0x44>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_MspInit+0x44>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6193      	str	r3, [r2, #24]
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_MspInit+0x44>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_MspInit+0x44>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <HAL_MspInit+0x44>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_MspInit+0x44>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002cfe:	2005      	movs	r0, #5
 8002d00:	f001 ff0e 	bl	8004b20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d30:	d12c      	bne.n	8002d8c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_ADC_MspInit+0x84>)
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <HAL_ADC_MspInit+0x84>)
 8002d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6153      	str	r3, [r2, #20]
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_ADC_MspInit+0x84>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_ADC_MspInit+0x84>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_ADC_MspInit+0x84>)
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	6153      	str	r3, [r2, #20]
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_ADC_MspInit+0x84>)
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d62:	2302      	movs	r3, #2
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d66:	2303      	movs	r3, #3
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d78:	f001 ff8a 	bl	8004c90 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2102      	movs	r1, #2
 8002d80:	2012      	movs	r0, #18
 8002d82:	f001 fed8 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002d86:	2012      	movs	r0, #18
 8002d88:	f001 fef1 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <HAL_I2C_MspInit+0x7c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d127      	bne.n	8002e0a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_I2C_MspInit+0x80>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <HAL_I2C_MspInit+0x80>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6153      	str	r3, [r2, #20]
 8002dc6:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_I2C_MspInit+0x80>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002dd2:	23c0      	movs	r3, #192	; 0xc0
 8002dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd6:	2312      	movs	r3, #18
 8002dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002de2:	2304      	movs	r3, #4
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	4619      	mov	r1, r3
 8002dec:	480b      	ldr	r0, [pc, #44]	; (8002e1c <HAL_I2C_MspInit+0x84>)
 8002dee:	f001 ff4f 	bl	8004c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_I2C_MspInit+0x80>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_I2C_MspInit+0x80>)
 8002df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_I2C_MspInit+0x80>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40005400 	.word	0x40005400
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	48000400 	.word	0x48000400

08002e20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_SPI_MspInit+0x7c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d128      	bne.n	8002e94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e4c:	6193      	str	r3, [r2, #24]
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	6153      	str	r3, [r2, #20]
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_SPI_MspInit+0x80>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002e72:	23e0      	movs	r3, #224	; 0xe0
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e82:	2305      	movs	r3, #5
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e90:	f001 fefe 	bl	8004c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40013000 	.word	0x40013000
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d114      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	61d3      	str	r3, [r2, #28]
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 1);
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	201c      	movs	r0, #28
 8002ed4:	f001 fe2f 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ed8:	201c      	movs	r0, #28
 8002eda:	f001 fe48 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ede:	e032      	b.n	8002f46 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_TIM_Base_MspInit+0xb0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d114      	bne.n	8002f14 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2102      	movs	r1, #2
 8002f06:	201d      	movs	r0, #29
 8002f08:	f001 fe15 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f0c:	201d      	movs	r0, #29
 8002f0e:	f001 fe2e 	bl	8004b6e <HAL_NVIC_EnableIRQ>
}
 8002f12:	e018      	b.n	8002f46 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_TIM_Base_MspInit+0xb4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d113      	bne.n	8002f46 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	61d3      	str	r3, [r2, #28]
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_TIM_Base_MspInit+0xac>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2101      	movs	r1, #1
 8002f3a:	201e      	movs	r0, #30
 8002f3c:	f001 fdfb 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f40:	201e      	movs	r0, #30
 8002f42:	f001 fe14 	bl	8004b6e <HAL_NVIC_EnableIRQ>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800

08002f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_UART_MspInit+0x8c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_UART_MspInit+0x90>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_UART_MspInit+0x90>)
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f88:	61d3      	str	r3, [r2, #28]
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_UART_MspInit+0x90>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <HAL_UART_MspInit+0x90>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_UART_MspInit+0x90>)
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa0:	6153      	str	r3, [r2, #20]
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_UART_MspInit+0x90>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fae:	230c      	movs	r3, #12
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fcc:	f001 fe60 	bl	8004c90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	2026      	movs	r0, #38	; 0x26
 8002fd6:	f001 fdae 	bl	8004b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fda:	2026      	movs	r0, #38	; 0x26
 8002fdc:	f001 fdc7 	bl	8004b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fe0:	bf00      	nop
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a18      	ldr	r2, [pc, #96]	; (8003070 <HAL_PCD_MspInit+0x80>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d129      	bne.n	8003066 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_PCD_MspInit+0x84>)
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <HAL_PCD_MspInit+0x84>)
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301c:	6153      	str	r3, [r2, #20]
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_PCD_MspInit+0x84>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800302a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800303c:	230e      	movs	r3, #14
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4619      	mov	r1, r3
 8003046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304a:	f001 fe21 	bl	8004c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_PCD_MspInit+0x84>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_PCD_MspInit+0x84>)
 8003054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003058:	61d3      	str	r3, [r2, #28]
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_PCD_MspInit+0x84>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40005c00 	.word	0x40005c00
 8003074:	40021000 	.word	0x40021000

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800307c:	e7fe      	b.n	800307c <NMI_Handler+0x4>

0800307e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003082:	e7fe      	b.n	8003082 <HardFault_Handler+0x4>

08003084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <MemManage_Handler+0x4>

0800308a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <BusFault_Handler+0x4>

08003090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <UsageFault_Handler+0x4>

08003096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c4:	f000 f908 	bl	80032d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80030d0:	2001      	movs	r0, #1
 80030d2:	f001 ffa1 	bl	8005018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}

080030da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80030de:	2002      	movs	r0, #2
 80030e0:	f001 ff9a 	bl	8005018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80030ec:	2004      	movs	r0, #4
 80030ee:	f001 ff93 	bl	8005018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80030fa:	2008      	movs	r0, #8
 80030fc:	f001 ff8c 	bl	8005018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <ADC1_2_IRQHandler+0x10>)
 800310a:	f000 fc69 	bl	80039e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200007c8 	.word	0x200007c8

08003118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <TIM2_IRQHandler+0x10>)
 800311e:	f003 fdf1 	bl	8006d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000087c 	.word	0x2000087c

0800312c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <TIM3_IRQHandler+0x10>)
 8003132:	f003 fde7 	bl	8006d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	2000077c 	.word	0x2000077c

08003140 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <TIM4_IRQHandler+0x10>)
 8003146:	f003 fddd 	bl	8006d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000680 	.word	0x20000680

08003154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <USART2_IRQHandler+0x10>)
 800315a:	f004 fabb 	bl	80076d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200008c8 	.word	0x200008c8

08003168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <_sbrk+0x5c>)
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <_sbrk+0x60>)
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <_sbrk+0x64>)
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <_sbrk+0x68>)
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <_sbrk+0x64>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	429a      	cmp	r2, r3
 8003196:	d207      	bcs.n	80031a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003198:	f005 f9e4 	bl	8008564 <__errno>
 800319c:	4602      	mov	r2, r0
 800319e:	230c      	movs	r3, #12
 80031a0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	e009      	b.n	80031bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <_sbrk+0x64>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <_sbrk+0x64>)
 80031b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000a000 	.word	0x2000a000
 80031c8:	00000400 	.word	0x00000400
 80031cc:	20000288 	.word	0x20000288
 80031d0:	20000c40 	.word	0x20000c40

080031d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <SystemInit+0x20>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <SystemInit+0x20>)
 80031e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003230 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031fc:	480d      	ldr	r0, [pc, #52]	; (8003234 <LoopForever+0x6>)
  ldr r1, =_edata
 80031fe:	490e      	ldr	r1, [pc, #56]	; (8003238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003200:	4a0e      	ldr	r2, [pc, #56]	; (800323c <LoopForever+0xe>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003204:	e002      	b.n	800320c <LoopCopyDataInit>

08003206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800320a:	3304      	adds	r3, #4

0800320c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800320c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800320e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003210:	d3f9      	bcc.n	8003206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003214:	4c0b      	ldr	r4, [pc, #44]	; (8003244 <LoopForever+0x16>)
  movs r3, #0
 8003216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003218:	e001      	b.n	800321e <LoopFillZerobss>

0800321a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800321a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800321c:	3204      	adds	r2, #4

0800321e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800321e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003220:	d3fb      	bcc.n	800321a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003222:	f7ff ffd7 	bl	80031d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003226:	f005 f9a3 	bl	8008570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800322a:	f7ff f865 	bl	80022f8 <main>

0800322e <LoopForever>:

LoopForever:
    b LoopForever
 800322e:	e7fe      	b.n	800322e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003230:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003238:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 800323c:	0800c468 	.word	0x0800c468
  ldr r2, =_sbss
 8003240:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8003244:	20000c40 	.word	0x20000c40

08003248 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <ADC3_IRQHandler>
	...

0800324c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_Init+0x28>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a07      	ldr	r2, [pc, #28]	; (8003274 <HAL_Init+0x28>)
 8003256:	f043 0310 	orr.w	r3, r3, #16
 800325a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800325c:	2003      	movs	r0, #3
 800325e:	f001 fc5f 	bl	8004b20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003262:	2000      	movs	r0, #0
 8003264:	f000 f808 	bl	8003278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003268:	f7ff fd2e 	bl	8002cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40022000 	.word	0x40022000

08003278 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_InitTick+0x54>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_InitTick+0x58>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f001 fc77 	bl	8004b8a <HAL_SYSTICK_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00e      	b.n	80032c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d80a      	bhi.n	80032c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ac:	2200      	movs	r2, #0
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f001 fc3f 	bl	8004b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <HAL_InitTick+0x5c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000068 	.word	0x20000068
 80032d0:	20000070 	.word	0x20000070
 80032d4:	2000006c 	.word	0x2000006c

080032d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000070 	.word	0x20000070
 80032fc:	20000c38 	.word	0x20000c38

08003300 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;  
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000c38 	.word	0x20000c38

08003318 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff ffee 	bl	8003300 <HAL_GetTick>
 8003324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d005      	beq.n	800333e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_Delay+0x40>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800333e:	bf00      	nop
 8003340:	f7ff ffde 	bl	8003300 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d8f7      	bhi.n	8003340 <HAL_Delay+0x28>
  {
  }
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000070 	.word	0x20000070

0800335c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b09a      	sub	sp, #104	; 0x68
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e1c9      	b.n	8003738 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d176      	bne.n	80034a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d152      	bne.n	8003464 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fc99 	bl	8002d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13b      	bne.n	8003464 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f001 fa67 	bl	80048c0 <ADC_Disable>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12f      	bne.n	8003464 <HAL_ADC_Init+0xe0>
 8003404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003408:	2b00      	cmp	r3, #0
 800340a:	d12b      	bne.n	8003464 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003414:	f023 0302 	bic.w	r3, r3, #2
 8003418:	f043 0202 	orr.w	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800342e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800343e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003440:	4b86      	ldr	r3, [pc, #536]	; (800365c <HAL_ADC_Init+0x2d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a86      	ldr	r2, [pc, #536]	; (8003660 <HAL_ADC_Init+0x2dc>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0c9a      	lsrs	r2, r3, #18
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003456:	e002      	b.n	800345e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3b01      	subs	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003480:	d110      	bne.n	80034a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f023 0312 	bic.w	r3, r3, #18
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8136 	bne.w	800371e <HAL_ADC_Init+0x39a>
 80034b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f040 8131 	bne.w	800371e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8129 	bne.w	800371e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034d4:	f043 0202 	orr.w	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_Init+0x16c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5e      	ldr	r2, [pc, #376]	; (8003664 <HAL_ADC_Init+0x2e0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_Init+0x170>
 80034f0:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <HAL_ADC_Init+0x2e4>)
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_Init+0x172>
 80034f4:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_ADC_Init+0x2e8>)
 80034f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003500:	d102      	bne.n	8003508 <HAL_ADC_Init+0x184>
 8003502:	4b58      	ldr	r3, [pc, #352]	; (8003664 <HAL_ADC_Init+0x2e0>)
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e01a      	b.n	800353e <HAL_ADC_Init+0x1ba>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a55      	ldr	r2, [pc, #340]	; (8003664 <HAL_ADC_Init+0x2e0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d103      	bne.n	800351a <HAL_ADC_Init+0x196>
 8003512:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e011      	b.n	800353e <HAL_ADC_Init+0x1ba>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a54      	ldr	r2, [pc, #336]	; (8003670 <HAL_ADC_Init+0x2ec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d102      	bne.n	800352a <HAL_ADC_Init+0x1a6>
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_ADC_Init+0x2f0>)
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e009      	b.n	800353e <HAL_ADC_Init+0x1ba>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a51      	ldr	r2, [pc, #324]	; (8003674 <HAL_ADC_Init+0x2f0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d102      	bne.n	800353a <HAL_ADC_Init+0x1b6>
 8003534:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <HAL_ADC_Init+0x2ec>)
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e001      	b.n	800353e <HAL_ADC_Init+0x1ba>
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d108      	bne.n	800355e <HAL_ADC_Init+0x1da>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ADC_Init+0x1da>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_ADC_Init+0x1dc>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d11c      	bne.n	800359e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003564:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_ADC_Init+0x202>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Init+0x202>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_ADC_Init+0x204>
 8003586:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003588:	2b00      	cmp	r3, #0
 800358a:	d108      	bne.n	800359e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800358c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	431a      	orrs	r2, r3
 800359a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7e5b      	ldrb	r3, [r3, #25]
 80035a2:	035b      	lsls	r3, r3, #13
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035a8:	2a01      	cmp	r2, #1
 80035aa:	d002      	beq.n	80035b2 <HAL_ADC_Init+0x22e>
 80035ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035b0:	e000      	b.n	80035b4 <HAL_ADC_Init+0x230>
 80035b2:	2200      	movs	r2, #0
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035c4:	4313      	orrs	r3, r2
 80035c6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11b      	bne.n	800360a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7e5b      	ldrb	r3, [r3, #25]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	3b01      	subs	r3, #1
 80035e0:	045a      	lsls	r2, r3, #17
 80035e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ea:	663b      	str	r3, [r7, #96]	; 0x60
 80035ec:	e00d      	b.n	800360a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	2b01      	cmp	r3, #1
 8003610:	d03a      	beq.n	8003688 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_ADC_Init+0x2ec>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_ADC_Init+0x2a2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a14      	ldr	r2, [pc, #80]	; (8003674 <HAL_ADC_Init+0x2f0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d128      	bne.n	8003678 <HAL_ADC_Init+0x2f4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800362e:	d012      	beq.n	8003656 <HAL_ADC_Init+0x2d2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	d00a      	beq.n	8003650 <HAL_ADC_Init+0x2cc>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003642:	d002      	beq.n	800364a <HAL_ADC_Init+0x2c6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	e018      	b.n	800367c <HAL_ADC_Init+0x2f8>
 800364a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800364e:	e015      	b.n	800367c <HAL_ADC_Init+0x2f8>
 8003650:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003654:	e012      	b.n	800367c <HAL_ADC_Init+0x2f8>
 8003656:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800365a:	e00f      	b.n	800367c <HAL_ADC_Init+0x2f8>
 800365c:	20000068 	.word	0x20000068
 8003660:	431bde83 	.word	0x431bde83
 8003664:	50000100 	.word	0x50000100
 8003668:	50000300 	.word	0x50000300
 800366c:	50000700 	.word	0x50000700
 8003670:	50000400 	.word	0x50000400
 8003674:	50000500 	.word	0x50000500
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003680:	4313      	orrs	r3, r2
 8003682:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003684:	4313      	orrs	r3, r2
 8003686:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b00      	cmp	r3, #0
 8003694:	d114      	bne.n	80036c0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a4:	f023 0302 	bic.w	r3, r3, #2
 80036a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7e1b      	ldrb	r3, [r3, #24]
 80036ae:	039a      	lsls	r2, r3, #14
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036bc:	4313      	orrs	r3, r2
 80036be:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <HAL_ADC_Init+0x3bc>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80036d0:	430b      	orrs	r3, r1
 80036d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d10c      	bne.n	80036f6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f023 010f 	bic.w	r1, r3, #15
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
 80036f4:	e007      	b.n	8003706 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 020f 	bic.w	r2, r2, #15
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f023 0303 	bic.w	r3, r3, #3
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
 800371c:	e00a      	b.n	8003734 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f023 0312 	bic.w	r3, r3, #18
 8003726:	f043 0210 	orr.w	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003738:	4618      	mov	r0, r3
 800373a:	3768      	adds	r7, #104	; 0x68
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	fff0c007 	.word	0xfff0c007

08003744 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8123 	bne.w	80039a6 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_ADC_Start_IT+0x2a>
 800376a:	2302      	movs	r3, #2
 800376c:	e11e      	b.n	80039ac <HAL_ADC_Start_IT+0x268>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f001 f844 	bl	8004804 <ADC_Enable>
 800377c:	4603      	mov	r3, r0
 800377e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 810a 	bne.w	800399c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a4:	d004      	beq.n	80037b0 <HAL_ADC_Start_IT+0x6c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a82      	ldr	r2, [pc, #520]	; (80039b4 <HAL_ADC_Start_IT+0x270>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d106      	bne.n	80037be <HAL_ADC_Start_IT+0x7a>
 80037b0:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <HAL_ADC_Start_IT+0x274>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d010      	beq.n	80037de <HAL_ADC_Start_IT+0x9a>
 80037bc:	e005      	b.n	80037ca <HAL_ADC_Start_IT+0x86>
 80037be:	4b7f      	ldr	r3, [pc, #508]	; (80039bc <HAL_ADC_Start_IT+0x278>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_ADC_Start_IT+0x9a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d2:	d004      	beq.n	80037de <HAL_ADC_Start_IT+0x9a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a79      	ldr	r2, [pc, #484]	; (80039c0 <HAL_ADC_Start_IT+0x27c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d115      	bne.n	800380a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d036      	beq.n	8003866 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003800:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003808:	e02d      	b.n	8003866 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800381e:	d004      	beq.n	800382a <HAL_ADC_Start_IT+0xe6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_ADC_Start_IT+0x270>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10a      	bne.n	8003840 <HAL_ADC_Start_IT+0xfc>
 800382a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e008      	b.n	8003852 <HAL_ADC_Start_IT+0x10e>
 8003840:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_ADC_Start_IT+0x27c>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800385e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d106      	bne.n	8003882 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f023 0206 	bic.w	r2, r3, #6
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
 8003880:	e002      	b.n	8003888 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	221c      	movs	r2, #28
 8003896:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d110      	bne.n	80038c2 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0204 	bic.w	r2, r2, #4
 80038ae:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	605a      	str	r2, [r3, #4]
          break;
 80038c0:	e008      	b.n	80038d4 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 020c 	orr.w	r2, r2, #12
 80038d0:	605a      	str	r2, [r3, #4]
          break;
 80038d2:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0210 	bic.w	r2, r2, #16
 80038ea:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038f4:	d004      	beq.n	8003900 <HAL_ADC_Start_IT+0x1bc>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2e      	ldr	r2, [pc, #184]	; (80039b4 <HAL_ADC_Start_IT+0x270>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d106      	bne.n	800390e <HAL_ADC_Start_IT+0x1ca>
 8003900:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <HAL_ADC_Start_IT+0x274>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2b00      	cmp	r3, #0
 800390a:	d03e      	beq.n	800398a <HAL_ADC_Start_IT+0x246>
 800390c:	e005      	b.n	800391a <HAL_ADC_Start_IT+0x1d6>
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_ADC_Start_IT+0x278>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2b00      	cmp	r3, #0
 8003918:	d037      	beq.n	800398a <HAL_ADC_Start_IT+0x246>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003922:	d004      	beq.n	800392e <HAL_ADC_Start_IT+0x1ea>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_ADC_Start_IT+0x270>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d106      	bne.n	800393c <HAL_ADC_Start_IT+0x1f8>
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_ADC_Start_IT+0x274>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2b05      	cmp	r3, #5
 8003938:	d027      	beq.n	800398a <HAL_ADC_Start_IT+0x246>
 800393a:	e005      	b.n	8003948 <HAL_ADC_Start_IT+0x204>
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <HAL_ADC_Start_IT+0x278>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	2b05      	cmp	r3, #5
 8003946:	d020      	beq.n	800398a <HAL_ADC_Start_IT+0x246>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003950:	d004      	beq.n	800395c <HAL_ADC_Start_IT+0x218>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_ADC_Start_IT+0x270>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d106      	bne.n	800396a <HAL_ADC_Start_IT+0x226>
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <HAL_ADC_Start_IT+0x274>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	2b09      	cmp	r3, #9
 8003966:	d010      	beq.n	800398a <HAL_ADC_Start_IT+0x246>
 8003968:	e005      	b.n	8003976 <HAL_ADC_Start_IT+0x232>
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_ADC_Start_IT+0x278>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2b09      	cmp	r3, #9
 8003974:	d009      	beq.n	800398a <HAL_ADC_Start_IT+0x246>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800397e:	d004      	beq.n	800398a <HAL_ADC_Start_IT+0x246>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_ADC_Start_IT+0x27c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10f      	bne.n	80039aa <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0204 	orr.w	r2, r2, #4
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	e006      	b.n	80039aa <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039a4:	e001      	b.n	80039aa <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
 80039a8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	50000100 	.word	0x50000100
 80039b8:	50000300 	.word	0x50000300
 80039bc:	50000700 	.word	0x50000700
 80039c0:	50000400 	.word	0x50000400

080039c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d106      	bne.n	8003a10 <HAL_ADC_IRQHandler+0x30>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d00f      	beq.n	8003a30 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	f040 80c0 	bne.w	8003ba0 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	f040 80b8 	bne.w	8003ba0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a50:	d004      	beq.n	8003a5c <HAL_ADC_IRQHandler+0x7c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a95      	ldr	r2, [pc, #596]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d106      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x8a>
 8003a5c:	4b94      	ldr	r3, [pc, #592]	; (8003cb0 <HAL_ADC_IRQHandler+0x2d0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03e      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x106>
 8003a68:	e005      	b.n	8003a76 <HAL_ADC_IRQHandler+0x96>
 8003a6a:	4b92      	ldr	r3, [pc, #584]	; (8003cb4 <HAL_ADC_IRQHandler+0x2d4>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d037      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x106>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a7e:	d004      	beq.n	8003a8a <HAL_ADC_IRQHandler+0xaa>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a89      	ldr	r2, [pc, #548]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d106      	bne.n	8003a98 <HAL_ADC_IRQHandler+0xb8>
 8003a8a:	4b89      	ldr	r3, [pc, #548]	; (8003cb0 <HAL_ADC_IRQHandler+0x2d0>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d027      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x106>
 8003a96:	e005      	b.n	8003aa4 <HAL_ADC_IRQHandler+0xc4>
 8003a98:	4b86      	ldr	r3, [pc, #536]	; (8003cb4 <HAL_ADC_IRQHandler+0x2d4>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d020      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x106>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADC_IRQHandler+0xd8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7e      	ldr	r2, [pc, #504]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d106      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0xe6>
 8003ab8:	4b7d      	ldr	r3, [pc, #500]	; (8003cb0 <HAL_ADC_IRQHandler+0x2d0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2b09      	cmp	r3, #9
 8003ac2:	d010      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x106>
 8003ac4:	e005      	b.n	8003ad2 <HAL_ADC_IRQHandler+0xf2>
 8003ac6:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <HAL_ADC_IRQHandler+0x2d4>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d009      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x106>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ada:	d004      	beq.n	8003ae6 <HAL_ADC_IRQHandler+0x106>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a75      	ldr	r2, [pc, #468]	; (8003cb8 <HAL_ADC_IRQHandler+0x2d8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d104      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e00f      	b.n	8003b10 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af8:	d004      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x124>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6b      	ldr	r2, [pc, #428]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <HAL_ADC_IRQHandler+0x12a>
 8003b04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_IRQHandler+0x12c>
 8003b0a:	4b6b      	ldr	r3, [pc, #428]	; (8003cb8 <HAL_ADC_IRQHandler+0x2d8>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d139      	bne.n	8003b92 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d134      	bne.n	8003b92 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d12d      	bne.n	8003b92 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d11a      	bne.n	8003b7a <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 020c 	bic.w	r2, r2, #12
 8003b52:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d112      	bne.n	8003b92 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f043 0201 	orr.w	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
 8003b78:	e00b      	b.n	8003b92 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f043 0210 	orr.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fb1c 	bl	80021d0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	220c      	movs	r2, #12
 8003b9e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d106      	bne.n	8003bbc <HAL_ADC_IRQHandler+0x1dc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d00f      	beq.n	8003bdc <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	f040 813c 	bne.w	8003e44 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	f040 8134 	bne.w	8003e44 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf0:	d004      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x21c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2d      	ldr	r2, [pc, #180]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d106      	bne.n	8003c0a <HAL_ADC_IRQHandler+0x22a>
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_ADC_IRQHandler+0x2d0>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03e      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x2a6>
 8003c08:	e005      	b.n	8003c16 <HAL_ADC_IRQHandler+0x236>
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <HAL_ADC_IRQHandler+0x2d4>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d037      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x2a6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c1e:	d004      	beq.n	8003c2a <HAL_ADC_IRQHandler+0x24a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d106      	bne.n	8003c38 <HAL_ADC_IRQHandler+0x258>
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_ADC_IRQHandler+0x2d0>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d027      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x2a6>
 8003c36:	e005      	b.n	8003c44 <HAL_ADC_IRQHandler+0x264>
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_ADC_IRQHandler+0x2d4>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d020      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x2a6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADC_IRQHandler+0x278>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d106      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x286>
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_ADC_IRQHandler+0x2d0>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	2b09      	cmp	r3, #9
 8003c62:	d010      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x2a6>
 8003c64:	e005      	b.n	8003c72 <HAL_ADC_IRQHandler+0x292>
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_ADC_IRQHandler+0x2d4>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2b09      	cmp	r3, #9
 8003c70:	d009      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x2a6>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7a:	d004      	beq.n	8003c86 <HAL_ADC_IRQHandler+0x2a6>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0d      	ldr	r2, [pc, #52]	; (8003cb8 <HAL_ADC_IRQHandler+0x2d8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d104      	bne.n	8003c90 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e018      	b.n	8003cc2 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c98:	d004      	beq.n	8003ca4 <HAL_ADC_IRQHandler+0x2c4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a03      	ldr	r2, [pc, #12]	; (8003cac <HAL_ADC_IRQHandler+0x2cc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d10b      	bne.n	8003cbc <HAL_ADC_IRQHandler+0x2dc>
 8003ca4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca8:	e009      	b.n	8003cbe <HAL_ADC_IRQHandler+0x2de>
 8003caa:	bf00      	nop
 8003cac:	50000100 	.word	0x50000100
 8003cb0:	50000300 	.word	0x50000300
 8003cb4:	50000700 	.word	0x50000700
 8003cb8:	50000400 	.word	0x50000400
 8003cbc:	4b9d      	ldr	r3, [pc, #628]	; (8003f34 <HAL_ADC_IRQHandler+0x554>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 80b2 	bne.w	8003e36 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 80a5 	bne.w	8003e36 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 809f 	bne.w	8003e36 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	f040 8097 	bne.w	8003e36 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d10:	d004      	beq.n	8003d1c <HAL_ADC_IRQHandler+0x33c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a88      	ldr	r2, [pc, #544]	; (8003f38 <HAL_ADC_IRQHandler+0x558>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d106      	bne.n	8003d2a <HAL_ADC_IRQHandler+0x34a>
 8003d1c:	4b87      	ldr	r3, [pc, #540]	; (8003f3c <HAL_ADC_IRQHandler+0x55c>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d03e      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x3c6>
 8003d28:	e005      	b.n	8003d36 <HAL_ADC_IRQHandler+0x356>
 8003d2a:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <HAL_ADC_IRQHandler+0x560>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d037      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x3c6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d3e:	d004      	beq.n	8003d4a <HAL_ADC_IRQHandler+0x36a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7c      	ldr	r2, [pc, #496]	; (8003f38 <HAL_ADC_IRQHandler+0x558>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d106      	bne.n	8003d58 <HAL_ADC_IRQHandler+0x378>
 8003d4a:	4b7c      	ldr	r3, [pc, #496]	; (8003f3c <HAL_ADC_IRQHandler+0x55c>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d027      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x3c6>
 8003d56:	e005      	b.n	8003d64 <HAL_ADC_IRQHandler+0x384>
 8003d58:	4b79      	ldr	r3, [pc, #484]	; (8003f40 <HAL_ADC_IRQHandler+0x560>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2b06      	cmp	r3, #6
 8003d62:	d020      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x3c6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6c:	d004      	beq.n	8003d78 <HAL_ADC_IRQHandler+0x398>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a71      	ldr	r2, [pc, #452]	; (8003f38 <HAL_ADC_IRQHandler+0x558>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d106      	bne.n	8003d86 <HAL_ADC_IRQHandler+0x3a6>
 8003d78:	4b70      	ldr	r3, [pc, #448]	; (8003f3c <HAL_ADC_IRQHandler+0x55c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	d010      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x3c6>
 8003d84:	e005      	b.n	8003d92 <HAL_ADC_IRQHandler+0x3b2>
 8003d86:	4b6e      	ldr	r3, [pc, #440]	; (8003f40 <HAL_ADC_IRQHandler+0x560>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2b07      	cmp	r3, #7
 8003d90:	d009      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x3c6>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9a:	d004      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x3c6>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a64      	ldr	r2, [pc, #400]	; (8003f34 <HAL_ADC_IRQHandler+0x554>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d104      	bne.n	8003db0 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e00f      	b.n	8003dd0 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db8:	d004      	beq.n	8003dc4 <HAL_ADC_IRQHandler+0x3e4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a5e      	ldr	r2, [pc, #376]	; (8003f38 <HAL_ADC_IRQHandler+0x558>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d102      	bne.n	8003dca <HAL_ADC_IRQHandler+0x3ea>
 8003dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dc8:	e000      	b.n	8003dcc <HAL_ADC_IRQHandler+0x3ec>
 8003dca:	4b5a      	ldr	r3, [pc, #360]	; (8003f34 <HAL_ADC_IRQHandler+0x554>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d12d      	bne.n	8003e36 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11a      	bne.n	8003e1e <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d112      	bne.n	8003e36 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e1c:	e00b      	b.n	8003e36 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8de 	bl	8003ff8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2260      	movs	r2, #96	; 0x60
 8003e42:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d113      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x49a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d10c      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fa75 	bl	800335c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d115      	bne.n	8003eb6 <HAL_ADC_IRQHandler+0x4d6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e98:	d10d      	bne.n	8003eb6 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8ba 	bl	8004020 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec4:	d115      	bne.n	8003ef2 <HAL_ADC_IRQHandler+0x512>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed4:	d10d      	bne.n	8003ef2 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8a6 	bl	8004034 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d151      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x5c4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d14a      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8003f16:	2301      	movs	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e02d      	b.n	8003f78 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f24:	d004      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x550>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a03      	ldr	r2, [pc, #12]	; (8003f38 <HAL_ADC_IRQHandler+0x558>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d109      	bne.n	8003f44 <HAL_ADC_IRQHandler+0x564>
 8003f30:	4b02      	ldr	r3, [pc, #8]	; (8003f3c <HAL_ADC_IRQHandler+0x55c>)
 8003f32:	e008      	b.n	8003f46 <HAL_ADC_IRQHandler+0x566>
 8003f34:	50000400 	.word	0x50000400
 8003f38:	50000100 	.word	0x50000100
 8003f3c:	50000300 	.word	0x50000300
 8003f40:	50000700 	.word	0x50000700
 8003f44:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_ADC_IRQHandler+0x614>)
 8003f46:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10a      	bne.n	8003f78 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003f62:	2301      	movs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e007      	b.n	8003f78 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003f74:	2301      	movs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10e      	bne.n	8003f9c <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f043 0202 	orr.w	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff f9ea 	bl	8003370 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d11b      	bne.n	8003fec <HAL_ADC_IRQHandler+0x60c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc2:	d113      	bne.n	8003fec <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	f043 0208 	orr.w	r2, r3, #8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f810 	bl	800400c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003fec:	bf00      	nop
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	50000700 	.word	0x50000700

08003ff8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b09b      	sub	sp, #108	; 0x6c
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_ADC_ConfigChannel+0x22>
 8004066:	2302      	movs	r3, #2
 8004068:	e2cb      	b.n	8004602 <HAL_ADC_ConfigChannel+0x5ba>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 82af 	bne.w	80045e0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d81c      	bhi.n	80040c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4413      	add	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	461a      	mov	r2, r3
 800409e:	231f      	movs	r3, #31
 80040a0:	4093      	lsls	r3, r2
 80040a2:	43db      	mvns	r3, r3
 80040a4:	4019      	ands	r1, r3
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
 80040c2:	e063      	b.n	800418c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b09      	cmp	r3, #9
 80040ca:	d81e      	bhi.n	800410a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	3b1e      	subs	r3, #30
 80040e0:	221f      	movs	r2, #31
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	4019      	ands	r1, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	3b1e      	subs	r3, #30
 80040fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	635a      	str	r2, [r3, #52]	; 0x34
 8004108:	e040      	b.n	800418c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b0e      	cmp	r3, #14
 8004110:	d81e      	bhi.n	8004150 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	3b3c      	subs	r3, #60	; 0x3c
 8004126:	221f      	movs	r2, #31
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	4019      	ands	r1, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	3b3c      	subs	r3, #60	; 0x3c
 8004142:	fa00 f203 	lsl.w	r2, r0, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
 800414e:	e01d      	b.n	800418c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	3b5a      	subs	r3, #90	; 0x5a
 8004164:	221f      	movs	r2, #31
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	4019      	ands	r1, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	3b5a      	subs	r3, #90	; 0x5a
 8004180:	fa00 f203 	lsl.w	r2, r0, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 80e5 	bne.w	8004366 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b09      	cmp	r3, #9
 80041a2:	d91c      	bls.n	80041de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	3b1e      	subs	r3, #30
 80041b6:	2207      	movs	r2, #7
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	4019      	ands	r1, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6898      	ldr	r0, [r3, #8]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	3b1e      	subs	r3, #30
 80041d0:	fa00 f203 	lsl.w	r2, r0, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	619a      	str	r2, [r3, #24]
 80041dc:	e019      	b.n	8004212 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6959      	ldr	r1, [r3, #20]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	2207      	movs	r2, #7
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	4019      	ands	r1, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6898      	ldr	r0, [r3, #8]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	fa00 f203 	lsl.w	r2, r0, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	3b01      	subs	r3, #1
 8004230:	2b03      	cmp	r3, #3
 8004232:	d84f      	bhi.n	80042d4 <HAL_ADC_ConfigChannel+0x28c>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <HAL_ADC_ConfigChannel+0x1f4>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800426f 	.word	0x0800426f
 8004244:	08004291 	.word	0x08004291
 8004248:	080042b3 	.word	0x080042b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004252:	4b9f      	ldr	r3, [pc, #636]	; (80044d0 <HAL_ADC_ConfigChannel+0x488>)
 8004254:	4013      	ands	r3, r2
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	0691      	lsls	r1, r2, #26
 800425c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800425e:	430a      	orrs	r2, r1
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800426a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800426c:	e07e      	b.n	800436c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004274:	4b96      	ldr	r3, [pc, #600]	; (80044d0 <HAL_ADC_ConfigChannel+0x488>)
 8004276:	4013      	ands	r3, r2
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	0691      	lsls	r1, r2, #26
 800427e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004280:	430a      	orrs	r2, r1
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800428c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800428e:	e06d      	b.n	800436c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004296:	4b8e      	ldr	r3, [pc, #568]	; (80044d0 <HAL_ADC_ConfigChannel+0x488>)
 8004298:	4013      	ands	r3, r2
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	0691      	lsls	r1, r2, #26
 80042a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042a2:	430a      	orrs	r2, r1
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042ae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042b0:	e05c      	b.n	800436c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042b8:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <HAL_ADC_ConfigChannel+0x488>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	0691      	lsls	r1, r2, #26
 80042c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042c4:	430a      	orrs	r2, r1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042d0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042d2:	e04b      	b.n	800436c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	069b      	lsls	r3, r3, #26
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042f6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	069b      	lsls	r3, r3, #26
 8004308:	429a      	cmp	r2, r3
 800430a:	d107      	bne.n	800431c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800431a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	069b      	lsls	r3, r3, #26
 800432c:	429a      	cmp	r2, r3
 800432e:	d107      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800433e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	069b      	lsls	r3, r3, #26
 8004350:	429a      	cmp	r2, r3
 8004352:	d10a      	bne.n	800436a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004362:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004364:	e001      	b.n	800436a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_ADC_ConfigChannel+0x324>
      break;
 800436a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <HAL_ADC_ConfigChannel+0x344>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x344>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_ADC_ConfigChannel+0x346>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	f040 8131 	bne.w	80045f6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d00f      	beq.n	80043bc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2201      	movs	r2, #1
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43da      	mvns	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	400a      	ands	r2, r1
 80043b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80043ba:	e049      	b.n	8004450 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2201      	movs	r2, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d91c      	bls.n	8004418 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6999      	ldr	r1, [r3, #24]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	3b1b      	subs	r3, #27
 80043f0:	2207      	movs	r2, #7
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	4019      	ands	r1, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6898      	ldr	r0, [r3, #8]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	3b1b      	subs	r3, #27
 800440a:	fa00 f203 	lsl.w	r2, r0, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	619a      	str	r2, [r3, #24]
 8004416:	e01b      	b.n	8004450 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6959      	ldr	r1, [r3, #20]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	2207      	movs	r2, #7
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	4019      	ands	r1, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6898      	ldr	r0, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	4613      	mov	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	4413      	add	r3, r2
 8004444:	fa00 f203 	lsl.w	r2, r0, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004458:	d004      	beq.n	8004464 <HAL_ADC_ConfigChannel+0x41c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_ADC_ConfigChannel+0x48c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x420>
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <HAL_ADC_ConfigChannel+0x490>)
 8004466:	e000      	b.n	800446a <HAL_ADC_ConfigChannel+0x422>
 8004468:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <HAL_ADC_ConfigChannel+0x494>)
 800446a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b10      	cmp	r3, #16
 8004472:	d105      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d015      	beq.n	80044ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004484:	2b11      	cmp	r3, #17
 8004486:	d105      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004498:	2b12      	cmp	r3, #18
 800449a:	f040 80ac 	bne.w	80045f6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800449e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 80a5 	bne.w	80045f6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b4:	d102      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x474>
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <HAL_ADC_ConfigChannel+0x48c>)
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e023      	b.n	8004504 <HAL_ADC_ConfigChannel+0x4bc>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <HAL_ADC_ConfigChannel+0x48c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10c      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x498>
 80044c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e01a      	b.n	8004504 <HAL_ADC_ConfigChannel+0x4bc>
 80044ce:	bf00      	nop
 80044d0:	83fff000 	.word	0x83fff000
 80044d4:	50000100 	.word	0x50000100
 80044d8:	50000300 	.word	0x50000300
 80044dc:	50000700 	.word	0x50000700
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a4a      	ldr	r2, [pc, #296]	; (8004610 <HAL_ADC_ConfigChannel+0x5c8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d102      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x4a8>
 80044ea:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <HAL_ADC_ConfigChannel+0x5cc>)
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e009      	b.n	8004504 <HAL_ADC_ConfigChannel+0x4bc>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a47      	ldr	r2, [pc, #284]	; (8004614 <HAL_ADC_ConfigChannel+0x5cc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d102      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x4b8>
 80044fa:	4b45      	ldr	r3, [pc, #276]	; (8004610 <HAL_ADC_ConfigChannel+0x5c8>)
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e001      	b.n	8004504 <HAL_ADC_ConfigChannel+0x4bc>
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x4dc>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x4dc>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_ADC_ConfigChannel+0x4de>
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d150      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800452a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800452c:	2b00      	cmp	r3, #0
 800452e:	d010      	beq.n	8004552 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_ADC_ConfigChannel+0x504>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_ADC_ConfigChannel+0x504>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_ADC_ConfigChannel+0x506>
 800454c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800454e:	2b00      	cmp	r3, #0
 8004550:	d13c      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b10      	cmp	r3, #16
 8004558:	d11d      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x54e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004562:	d118      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800456c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004570:	4b29      	ldr	r3, [pc, #164]	; (8004618 <HAL_ADC_ConfigChannel+0x5d0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <HAL_ADC_ConfigChannel+0x5d4>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0c9a      	lsrs	r2, r3, #18
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004586:	e002      	b.n	800458e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3b01      	subs	r3, #1
 800458c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f9      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004594:	e02e      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b11      	cmp	r3, #17
 800459c:	d10b      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x56e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a6:	d106      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80045a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80045b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045b4:	e01e      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b12      	cmp	r3, #18
 80045bc:	d11a      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80045be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045ca:	e013      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80045de:	e00a      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80045f2:	e000      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80045f4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80045fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004602:	4618      	mov	r0, r3
 8004604:	376c      	adds	r7, #108	; 0x6c
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	50000400 	.word	0x50000400
 8004614:	50000500 	.word	0x50000500
 8004618:	20000068 	.word	0x20000068
 800461c:	431bde83 	.word	0x431bde83

08004620 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004620:	b480      	push	{r7}
 8004622:	b099      	sub	sp, #100	; 0x64
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004638:	d102      	bne.n	8004640 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800463a:	4b6d      	ldr	r3, [pc, #436]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	e01a      	b.n	8004676 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6a      	ldr	r2, [pc, #424]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d103      	bne.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800464a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	e011      	b.n	8004676 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a67      	ldr	r2, [pc, #412]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d102      	bne.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800465c:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	e009      	b.n	8004676 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a64      	ldr	r2, [pc, #400]	; (80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d102      	bne.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800466c:	4b61      	ldr	r3, [pc, #388]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	e001      	b.n	8004676 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0b0      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0a9      	b.n	80047e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 808d 	bne.w	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 8086 	bne.w	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046bc:	d004      	beq.n	80046c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80046c8:	4b4c      	ldr	r3, [pc, #304]	; (80047fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80046ca:	e000      	b.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80046cc:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80046ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d040      	beq.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80046d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046ea:	035b      	lsls	r3, r3, #13
 80046ec:	430b      	orrs	r3, r1
 80046ee:	431a      	orrs	r2, r3
 80046f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d108      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004714:	2300      	movs	r3, #0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d15c      	bne.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004736:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004738:	2b00      	cmp	r3, #0
 800473a:	d14b      	bne.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800473c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004744:	f023 030f 	bic.w	r3, r3, #15
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	6811      	ldr	r1, [r2, #0]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	6892      	ldr	r2, [r2, #8]
 8004750:	430a      	orrs	r2, r1
 8004752:	431a      	orrs	r2, r3
 8004754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004756:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004758:	e03c      	b.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800475a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004764:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d108      	bne.n	8004786 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d123      	bne.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80047a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d112      	bne.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80047ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80047b6:	f023 030f 	bic.w	r3, r3, #15
 80047ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80047be:	e009      	b.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80047d2:	e000      	b.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80047d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80047de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80047e2:	4618      	mov	r0, r3
 80047e4:	3764      	adds	r7, #100	; 0x64
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	50000100 	.word	0x50000100
 80047f4:	50000400 	.word	0x50000400
 80047f8:	50000500 	.word	0x50000500
 80047fc:	50000300 	.word	0x50000300
 8004800:	50000700 	.word	0x50000700

08004804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d108      	bne.n	8004830 <ADC_Enable+0x2c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <ADC_Enable+0x2c>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <ADC_Enable+0x2e>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d13c      	bne.n	80048b0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <ADC_Enable+0xb8>)
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f043 0210 	orr.w	r2, r3, #16
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e028      	b.n	80048b2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004870:	f7fe fd46 	bl	8003300 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004876:	e014      	b.n	80048a2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004878:	f7fe fd42 	bl	8003300 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d90d      	bls.n	80048a2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0210 	orr.w	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f043 0201 	orr.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e007      	b.n	80048b2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d1e3      	bne.n	8004878 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	8000003f 	.word	0x8000003f

080048c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d108      	bne.n	80048ec <ADC_Disable+0x2c>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <ADC_Disable+0x2c>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <ADC_Disable+0x2e>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d040      	beq.n	8004974 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030d 	and.w	r3, r3, #13
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10f      	bne.n	8004920 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0202 	orr.w	r2, r2, #2
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2203      	movs	r2, #3
 8004916:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004918:	f7fe fcf2 	bl	8003300 <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800491e:	e022      	b.n	8004966 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f043 0210 	orr.w	r2, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e01c      	b.n	8004976 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800493c:	f7fe fce0 	bl	8003300 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d90d      	bls.n	8004966 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f043 0210 	orr.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f043 0201 	orr.w	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e007      	b.n	8004976 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	d0e3      	beq.n	800493c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b2:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	60d3      	str	r3, [r2, #12]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0307 	and.w	r3, r3, #7
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db0b      	blt.n	8004a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <__NVIC_EnableIRQ+0x38>)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	6039      	str	r1, [r7, #0]
 8004a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db0a      	blt.n	8004a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	490c      	ldr	r1, [pc, #48]	; (8004a6c <__NVIC_SetPriority+0x4c>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	440b      	add	r3, r1
 8004a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a48:	e00a      	b.n	8004a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4908      	ldr	r1, [pc, #32]	; (8004a70 <__NVIC_SetPriority+0x50>)
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3b04      	subs	r3, #4
 8004a58:	0112      	lsls	r2, r2, #4
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	761a      	strb	r2, [r3, #24]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000e100 	.word	0xe000e100
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	; 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f1c3 0307 	rsb	r3, r3, #7
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	bf28      	it	cs
 8004a92:	2304      	movcs	r3, #4
 8004a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d902      	bls.n	8004aa4 <NVIC_EncodePriority+0x30>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3b03      	subs	r3, #3
 8004aa2:	e000      	b.n	8004aa6 <NVIC_EncodePriority+0x32>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004abc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	43d9      	mvns	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004acc:	4313      	orrs	r3, r2
         );
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	; 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
	...

08004adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aec:	d301      	bcc.n	8004af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00f      	b.n	8004b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af2:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <SysTick_Config+0x40>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004afa:	210f      	movs	r1, #15
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	f7ff ff8e 	bl	8004a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <SysTick_Config+0x40>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b0a:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <SysTick_Config+0x40>)
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	e000e010 	.word	0xe000e010

08004b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff29 	bl	8004980 <__NVIC_SetPriorityGrouping>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b48:	f7ff ff3e 	bl	80049c8 <__NVIC_GetPriorityGrouping>
 8004b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	6978      	ldr	r0, [r7, #20]
 8004b54:	f7ff ff8e 	bl	8004a74 <NVIC_EncodePriority>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff5d 	bl	8004a20 <__NVIC_SetPriority>
}
 8004b66:	bf00      	nop
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff31 	bl	80049e4 <__NVIC_EnableIRQ>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ffa2 	bl	8004adc <SysTick_Config>
 8004b98:	4603      	mov	r3, r0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d008      	beq.n	8004bc6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e020      	b.n	8004c08 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 020e 	bic.w	r2, r2, #14
 8004bd4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	2101      	movs	r1, #1
 8004bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d005      	beq.n	8004c36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e027      	b.n	8004c86 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 020e 	bic.w	r2, r2, #14
 8004c44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f202 	lsl.w	r2, r1, r2
 8004c64:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
    } 
  }
  return status;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c9e:	e154      	b.n	8004f4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8146 	beq.w	8004f44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_GPIO_Init+0x48>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d007      	beq.n	8004cd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ccc:	2b11      	cmp	r3, #17
 8004cce:	d003      	beq.n	8004cd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b12      	cmp	r3, #18
 8004cd6:	d130      	bne.n	8004d3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d0e:	2201      	movs	r2, #1
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0201 	and.w	r2, r3, #1
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_Init+0xea>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b12      	cmp	r3, #18
 8004d78:	d123      	bne.n	8004dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	08da      	lsrs	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3208      	adds	r2, #8
 8004d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	220f      	movs	r2, #15
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	08da      	lsrs	r2, r3, #3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3208      	adds	r2, #8
 8004dbc:	6939      	ldr	r1, [r7, #16]
 8004dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2203      	movs	r2, #3
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f003 0203 	and.w	r2, r3, #3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80a0 	beq.w	8004f44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e04:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <HAL_GPIO_Init+0x2d8>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	4a57      	ldr	r2, [pc, #348]	; (8004f68 <HAL_GPIO_Init+0x2d8>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6193      	str	r3, [r2, #24]
 8004e10:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <HAL_GPIO_Init+0x2d8>)
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e1c:	4a53      	ldr	r2, [pc, #332]	; (8004f6c <HAL_GPIO_Init+0x2dc>)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	3302      	adds	r3, #2
 8004e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	220f      	movs	r2, #15
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e46:	d019      	beq.n	8004e7c <HAL_GPIO_Init+0x1ec>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a49      	ldr	r2, [pc, #292]	; (8004f70 <HAL_GPIO_Init+0x2e0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <HAL_GPIO_Init+0x1e8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a48      	ldr	r2, [pc, #288]	; (8004f74 <HAL_GPIO_Init+0x2e4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00d      	beq.n	8004e74 <HAL_GPIO_Init+0x1e4>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a47      	ldr	r2, [pc, #284]	; (8004f78 <HAL_GPIO_Init+0x2e8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <HAL_GPIO_Init+0x1e0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a46      	ldr	r2, [pc, #280]	; (8004f7c <HAL_GPIO_Init+0x2ec>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d101      	bne.n	8004e6c <HAL_GPIO_Init+0x1dc>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	e008      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e6c:	2305      	movs	r3, #5
 8004e6e:	e006      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e70:	2303      	movs	r3, #3
 8004e72:	e004      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e002      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_GPIO_Init+0x1ee>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	f002 0203 	and.w	r2, r2, #3
 8004e84:	0092      	lsls	r2, r2, #2
 8004e86:	4093      	lsls	r3, r2
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e8e:	4937      	ldr	r1, [pc, #220]	; (8004f6c <HAL_GPIO_Init+0x2dc>)
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	3302      	adds	r3, #2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e9c:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ec0:	4a2f      	ldr	r2, [pc, #188]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ef0:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f14:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f1a:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f3e:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <HAL_GPIO_Init+0x2f0>)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3301      	adds	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f47f aea3 	bne.w	8004ca0 <HAL_GPIO_Init+0x10>
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	48000400 	.word	0x48000400
 8004f74:	48000800 	.word	0x48000800
 8004f78:	48000c00 	.word	0x48000c00
 8004f7c:	48001000 	.word	0x48001000
 8004f80:	40010400 	.word	0x40010400

08004f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fc4:	787b      	ldrb	r3, [r7, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fd0:	e002      	b.n	8004fd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	041a      	lsls	r2, r3, #16
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	43d9      	mvns	r1, r3
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	400b      	ands	r3, r1
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	619a      	str	r2, [r3, #24]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d006      	beq.n	800503c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800502e:	4a05      	ldr	r2, [pc, #20]	; (8005044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fc fa00 	bl	800143c <HAL_GPIO_EXTI_Callback>
  }
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40010400 	.word	0x40010400

08005048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e081      	b.n	800515e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fd fe92 	bl	8002d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	; 0x24
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	e006      	b.n	80050d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d104      	bne.n	80050e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005104:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	ea42 0103 	orr.w	r1, r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69d9      	ldr	r1, [r3, #28]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b20      	cmp	r3, #32
 800517a:	d138      	bne.n	80051ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005186:	2302      	movs	r3, #2
 8005188:	e032      	b.n	80051f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	; 0x24
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	d139      	bne.n	8005286 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800521c:	2302      	movs	r3, #2
 800521e:	e033      	b.n	8005288 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2224      	movs	r2, #36	; 0x24
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800524e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	b08b      	sub	sp, #44	; 0x2c
 8005298:	af06      	add	r7, sp, #24
 800529a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0d0      	b.n	8005448 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fd fe98 	bl	8002ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2203      	movs	r2, #3
 80052c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f003 f90d 	bl	80084ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	e04c      	b.n	8005372 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	3301      	adds	r3, #1
 80052ea:	2201      	movs	r2, #1
 80052ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	7bfa      	ldrb	r2, [r7, #15]
 8005300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005302:	7bfa      	ldrb	r2, [r7, #15]
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	b298      	uxth	r0, r3
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	440b      	add	r3, r1
 8005314:	3336      	adds	r3, #54	; 0x36
 8005316:	4602      	mov	r2, r0
 8005318:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	440b      	add	r3, r1
 800532a:	3303      	adds	r3, #3
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	3338      	adds	r3, #56	; 0x38
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	333c      	adds	r3, #60	; 0x3c
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	3340      	adds	r3, #64	; 0x40
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	3301      	adds	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d3ad      	bcc.n	80052d8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800537c:	2300      	movs	r3, #0
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	e044      	b.n	800540c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005382:	7bfa      	ldrb	r2, [r7, #15]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053aa:	7bfa      	ldrb	r2, [r7, #15]
 80053ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053ae:	7bfa      	ldrb	r2, [r7, #15]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	440b      	add	r3, r1
 80053bc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	440b      	add	r3, r1
 80053d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053da:	7bfa      	ldrb	r2, [r7, #15]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	440b      	add	r3, r1
 80053e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053f0:	7bfa      	ldrb	r2, [r7, #15]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	440b      	add	r3, r1
 80053fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	3301      	adds	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	7bfa      	ldrb	r2, [r7, #15]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d3b5      	bcc.n	8005382 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	687e      	ldr	r6, [r7, #4]
 800541e:	466d      	mov	r5, sp
 8005420:	f106 0410 	add.w	r4, r6, #16
 8005424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	602b      	str	r3, [r5, #0]
 800542c:	1d33      	adds	r3, r6, #4
 800542e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005430:	6838      	ldr	r0, [r7, #0]
 8005432:	f003 f876 	bl	8008522 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005456:	af00      	add	r7, sp, #0
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f000 bef4 	b.w	8006252 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 816a 	beq.w	800574e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800547a:	4bb3      	ldr	r3, [pc, #716]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b04      	cmp	r3, #4
 8005484:	d00c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005486:	4bb0      	ldr	r3, [pc, #704]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b08      	cmp	r3, #8
 8005490:	d159      	bne.n	8005546 <HAL_RCC_OscConfig+0xf6>
 8005492:	4bad      	ldr	r3, [pc, #692]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549e:	d152      	bne.n	8005546 <HAL_RCC_OscConfig+0xf6>
 80054a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80054ac:	fa93 f3a3 	rbit	r3, r3
 80054b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	fab3 f383 	clz	r3, r3
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d102      	bne.n	80054d2 <HAL_RCC_OscConfig+0x82>
 80054cc:	4b9e      	ldr	r3, [pc, #632]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0xae>
 80054d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80054de:	fa93 f3a3 	rbit	r3, r3
 80054e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80054e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80054ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80054fa:	4b93      	ldr	r3, [pc, #588]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005502:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005506:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800550a:	fa92 f2a2 	rbit	r2, r2
 800550e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005512:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005516:	fab2 f282 	clz	r2, r2
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f042 0220 	orr.w	r2, r2, #32
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	f002 021f 	and.w	r2, r2, #31
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f202 	lsl.w	r2, r1, r2
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 810c 	beq.w	800574c <HAL_RCC_OscConfig+0x2fc>
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 8106 	bne.w	800574c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f000 be86 	b.w	8006252 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005550:	d106      	bne.n	8005560 <HAL_RCC_OscConfig+0x110>
 8005552:	4b7d      	ldr	r3, [pc, #500]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a7c      	ldr	r2, [pc, #496]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e030      	b.n	80055c2 <HAL_RCC_OscConfig+0x172>
 8005560:	1d3b      	adds	r3, r7, #4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <HAL_RCC_OscConfig+0x134>
 800556a:	4b77      	ldr	r3, [pc, #476]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a76      	ldr	r2, [pc, #472]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	4b74      	ldr	r3, [pc, #464]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a73      	ldr	r2, [pc, #460]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 800557c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e01e      	b.n	80055c2 <HAL_RCC_OscConfig+0x172>
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800558e:	d10c      	bne.n	80055aa <HAL_RCC_OscConfig+0x15a>
 8005590:	4b6d      	ldr	r3, [pc, #436]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a6c      	ldr	r2, [pc, #432]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	4b6a      	ldr	r3, [pc, #424]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a69      	ldr	r2, [pc, #420]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80055a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	e00b      	b.n	80055c2 <HAL_RCC_OscConfig+0x172>
 80055aa:	4b67      	ldr	r3, [pc, #412]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a66      	ldr	r2, [pc, #408]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80055b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	4b64      	ldr	r3, [pc, #400]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a63      	ldr	r2, [pc, #396]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80055bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055c2:	4b61      	ldr	r3, [pc, #388]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	f023 020f 	bic.w	r2, r3, #15
 80055ca:	1d3b      	adds	r3, r7, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	495d      	ldr	r1, [pc, #372]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d059      	beq.n	8005694 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fd fe8e 	bl	8003300 <HAL_GetTick>
 80055e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ea:	f7fd fe89 	bl	8003300 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d902      	bls.n	8005600 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	f000 be29 	b.w	8006252 <HAL_RCC_OscConfig+0xe02>
 8005600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005604:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005614:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005618:	fab3 f383 	clz	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d102      	bne.n	8005632 <HAL_RCC_OscConfig+0x1e2>
 800562c:	4b46      	ldr	r3, [pc, #280]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	e015      	b.n	800565e <HAL_RCC_OscConfig+0x20e>
 8005632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005636:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005646:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800564a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800564e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800565a:	4b3b      	ldr	r3, [pc, #236]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005662:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005666:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800566a:	fa92 f2a2 	rbit	r2, r2
 800566e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005672:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005676:	fab2 f282 	clz	r2, r2
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	f042 0220 	orr.w	r2, r2, #32
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	f002 021f 	and.w	r2, r2, #31
 8005686:	2101      	movs	r1, #1
 8005688:	fa01 f202 	lsl.w	r2, r1, r2
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0ab      	beq.n	80055ea <HAL_RCC_OscConfig+0x19a>
 8005692:	e05c      	b.n	800574e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fd fe34 	bl	8003300 <HAL_GetTick>
 8005698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569c:	e00a      	b.n	80056b4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800569e:	f7fd fe2f 	bl	8003300 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d902      	bls.n	80056b4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	f000 bdcf 	b.w	8006252 <HAL_RCC_OscConfig+0xe02>
 80056b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80056c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <HAL_RCC_OscConfig+0x296>
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	e015      	b.n	8005712 <HAL_RCC_OscConfig+0x2c2>
 80056e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80056f2:	fa93 f3a3 	rbit	r3, r3
 80056f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80056fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005702:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005706:	fa93 f3a3 	rbit	r3, r3
 800570a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <HAL_RCC_OscConfig+0x2f8>)
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005716:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800571a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800571e:	fa92 f2a2 	rbit	r2, r2
 8005722:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005726:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800572a:	fab2 f282 	clz	r2, r2
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	f042 0220 	orr.w	r2, r2, #32
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	f002 021f 	and.w	r2, r2, #31
 800573a:	2101      	movs	r1, #1
 800573c:	fa01 f202 	lsl.w	r2, r1, r2
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ab      	bne.n	800569e <HAL_RCC_OscConfig+0x24e>
 8005746:	e002      	b.n	800574e <HAL_RCC_OscConfig+0x2fe>
 8005748:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 816f 	beq.w	8005a3c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800575e:	4bd0      	ldr	r3, [pc, #832]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800576a:	4bcd      	ldr	r3, [pc, #820]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b08      	cmp	r3, #8
 8005774:	d16c      	bne.n	8005850 <HAL_RCC_OscConfig+0x400>
 8005776:	4bca      	ldr	r3, [pc, #808]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d166      	bne.n	8005850 <HAL_RCC_OscConfig+0x400>
 8005782:	2302      	movs	r3, #2
 8005784:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005794:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005798:	fab3 f383 	clz	r3, r3
 800579c:	b2db      	uxtb	r3, r3
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d102      	bne.n	80057b2 <HAL_RCC_OscConfig+0x362>
 80057ac:	4bbc      	ldr	r3, [pc, #752]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	e013      	b.n	80057da <HAL_RCC_OscConfig+0x38a>
 80057b2:	2302      	movs	r3, #2
 80057b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80057c4:	2302      	movs	r3, #2
 80057c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80057ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80057d6:	4bb2      	ldr	r3, [pc, #712]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2202      	movs	r2, #2
 80057dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80057e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80057e4:	fa92 f2a2 	rbit	r2, r2
 80057e8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80057ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80057f0:	fab2 f282 	clz	r2, r2
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	f042 0220 	orr.w	r2, r2, #32
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	f002 021f 	and.w	r2, r2, #31
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f202 	lsl.w	r2, r1, r2
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_RCC_OscConfig+0x3cc>
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d002      	beq.n	800581c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f000 bd1b 	b.w	8006252 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	4ba0      	ldr	r3, [pc, #640]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005824:	1d3b      	adds	r3, r7, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	21f8      	movs	r1, #248	; 0xf8
 800582c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005834:	fa91 f1a1 	rbit	r1, r1
 8005838:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800583c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005840:	fab1 f181 	clz	r1, r1
 8005844:	b2c9      	uxtb	r1, r1
 8005846:	408b      	lsls	r3, r1
 8005848:	4995      	ldr	r1, [pc, #596]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584e:	e0f5      	b.n	8005a3c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8085 	beq.w	8005966 <HAL_RCC_OscConfig+0x516>
 800585c:	2301      	movs	r3, #1
 800585e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005866:	fa93 f3a3 	rbit	r3, r3
 800586a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800586e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800587c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	461a      	mov	r2, r3
 8005884:	2301      	movs	r3, #1
 8005886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fd fd3a 	bl	8003300 <HAL_GetTick>
 800588c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005892:	f7fd fd35 	bl	8003300 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d902      	bls.n	80058a8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	f000 bcd5 	b.w	8006252 <HAL_RCC_OscConfig+0xe02>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80058b2:	fa93 f3a3 	rbit	r3, r3
 80058b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80058ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058be:	fab3 f383 	clz	r3, r3
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d102      	bne.n	80058d8 <HAL_RCC_OscConfig+0x488>
 80058d2:	4b73      	ldr	r3, [pc, #460]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	e013      	b.n	8005900 <HAL_RCC_OscConfig+0x4b0>
 80058d8:	2302      	movs	r3, #2
 80058da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80058e2:	fa93 f3a3 	rbit	r3, r3
 80058e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80058ea:	2302      	movs	r3, #2
 80058ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80058f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80058f4:	fa93 f3a3 	rbit	r3, r3
 80058f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80058fc:	4b68      	ldr	r3, [pc, #416]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2202      	movs	r2, #2
 8005902:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005906:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800590a:	fa92 f2a2 	rbit	r2, r2
 800590e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005912:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005916:	fab2 f282 	clz	r2, r2
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	f042 0220 	orr.w	r2, r2, #32
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	f002 021f 	and.w	r2, r2, #31
 8005926:	2101      	movs	r1, #1
 8005928:	fa01 f202 	lsl.w	r2, r1, r2
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0af      	beq.n	8005892 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800593a:	1d3b      	adds	r3, r7, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	21f8      	movs	r1, #248	; 0xf8
 8005942:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800594a:	fa91 f1a1 	rbit	r1, r1
 800594e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005952:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005956:	fab1 f181 	clz	r1, r1
 800595a:	b2c9      	uxtb	r1, r1
 800595c:	408b      	lsls	r3, r1
 800595e:	4950      	ldr	r1, [pc, #320]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 8005960:	4313      	orrs	r3, r2
 8005962:	600b      	str	r3, [r1, #0]
 8005964:	e06a      	b.n	8005a3c <HAL_RCC_OscConfig+0x5ec>
 8005966:	2301      	movs	r3, #1
 8005968:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005970:	fa93 f3a3 	rbit	r3, r3
 8005974:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005978:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005986:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	461a      	mov	r2, r3
 800598e:	2300      	movs	r3, #0
 8005990:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005992:	f7fd fcb5 	bl	8003300 <HAL_GetTick>
 8005996:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800599c:	f7fd fcb0 	bl	8003300 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d902      	bls.n	80059b2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	f000 bc50 	b.w	8006252 <HAL_RCC_OscConfig+0xe02>
 80059b2:	2302      	movs	r3, #2
 80059b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059bc:	fa93 f3a3 	rbit	r3, r3
 80059c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80059c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059c8:	fab3 f383 	clz	r3, r3
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d102      	bne.n	80059e2 <HAL_RCC_OscConfig+0x592>
 80059dc:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	e013      	b.n	8005a0a <HAL_RCC_OscConfig+0x5ba>
 80059e2:	2302      	movs	r3, #2
 80059e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059ec:	fa93 f3a3 	rbit	r3, r3
 80059f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059f4:	2302      	movs	r3, #2
 80059f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059fe:	fa93 f3a3 	rbit	r3, r3
 8005a02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a06:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <HAL_RCC_OscConfig+0x650>)
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005a10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005a14:	fa92 f2a2 	rbit	r2, r2
 8005a18:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005a1c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005a20:	fab2 f282 	clz	r2, r2
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	f042 0220 	orr.w	r2, r2, #32
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	f002 021f 	and.w	r2, r2, #31
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f202 	lsl.w	r2, r1, r2
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1af      	bne.n	800599c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80da 	beq.w	8005c00 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d069      	beq.n	8005b2a <HAL_RCC_OscConfig+0x6da>
 8005a56:	2301      	movs	r3, #1
 8005a58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a60:	fa93 f3a3 	rbit	r3, r3
 8005a64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a6c:	fab3 f383 	clz	r3, r3
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_OscConfig+0x654>)
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a80:	f7fd fc3e 	bl	8003300 <HAL_GetTick>
 8005a84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a88:	e00e      	b.n	8005aa8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a8a:	f7fd fc39 	bl	8003300 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d906      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e3d9      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	10908120 	.word	0x10908120
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005aba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005abe:	2202      	movs	r2, #2
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fa93 f2a3 	rbit	r2, r3
 8005acc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	fa93 f2a3 	rbit	r2, r3
 8005ae4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005ae8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aea:	4ba5      	ldr	r3, [pc, #660]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005af2:	2102      	movs	r1, #2
 8005af4:	6019      	str	r1, [r3, #0]
 8005af6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	fa93 f1a3 	rbit	r1, r3
 8005b00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005b04:	6019      	str	r1, [r3, #0]
  return result;
 8005b06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0b0      	beq.n	8005a8a <HAL_RCC_OscConfig+0x63a>
 8005b28:	e06a      	b.n	8005c00 <HAL_RCC_OscConfig+0x7b0>
 8005b2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	fa93 f2a3 	rbit	r2, r3
 8005b3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b40:	601a      	str	r2, [r3, #0]
  return result;
 8005b42:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005b46:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b48:	fab3 f383 	clz	r3, r3
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4b8c      	ldr	r3, [pc, #560]	; (8005d84 <HAL_RCC_OscConfig+0x934>)
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	461a      	mov	r2, r3
 8005b58:	2300      	movs	r3, #0
 8005b5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b5c:	f7fd fbd0 	bl	8003300 <HAL_GetTick>
 8005b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b64:	e009      	b.n	8005b7a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b66:	f7fd fbcb 	bl	8003300 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e36b      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
 8005b7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b7e:	2202      	movs	r2, #2
 8005b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	fa93 f2a3 	rbit	r2, r3
 8005b8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b96:	2202      	movs	r2, #2
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	fa93 f2a3 	rbit	r2, r3
 8005ba4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005bae:	2202      	movs	r2, #2
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	fa93 f2a3 	rbit	r2, r3
 8005bbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005bc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc2:	4b6f      	ldr	r3, [pc, #444]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005bca:	2102      	movs	r1, #2
 8005bcc:	6019      	str	r1, [r3, #0]
 8005bce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	fa93 f1a3 	rbit	r1, r3
 8005bd8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005bdc:	6019      	str	r1, [r3, #0]
  return result;
 8005bde:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	fab3 f383 	clz	r3, r3
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1b2      	bne.n	8005b66 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c00:	1d3b      	adds	r3, r7, #4
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8158 	beq.w	8005ec0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c16:	4b5a      	ldr	r3, [pc, #360]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d112      	bne.n	8005c48 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c22:	4b57      	ldr	r3, [pc, #348]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	4a56      	ldr	r2, [pc, #344]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	61d3      	str	r3, [r2, #28]
 8005c2e:	4b54      	ldr	r3, [pc, #336]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005c36:	f107 0308 	add.w	r3, r7, #8
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f107 0308 	add.w	r3, r7, #8
 8005c40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c48:	4b4f      	ldr	r3, [pc, #316]	; (8005d88 <HAL_RCC_OscConfig+0x938>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11a      	bne.n	8005c8a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c54:	4b4c      	ldr	r3, [pc, #304]	; (8005d88 <HAL_RCC_OscConfig+0x938>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a4b      	ldr	r2, [pc, #300]	; (8005d88 <HAL_RCC_OscConfig+0x938>)
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c60:	f7fd fb4e 	bl	8003300 <HAL_GetTick>
 8005c64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c68:	e009      	b.n	8005c7e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c6a:	f7fd fb49 	bl	8003300 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e2e9      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7e:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <HAL_RCC_OscConfig+0x938>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0ef      	beq.n	8005c6a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d106      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x852>
 8005c94:	4b3a      	ldr	r3, [pc, #232]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	4a39      	ldr	r2, [pc, #228]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	6213      	str	r3, [r2, #32]
 8005ca0:	e02f      	b.n	8005d02 <HAL_RCC_OscConfig+0x8b2>
 8005ca2:	1d3b      	adds	r3, r7, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10c      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x876>
 8005cac:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	4a33      	ldr	r2, [pc, #204]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	6213      	str	r3, [r2, #32]
 8005cb8:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4a30      	ldr	r2, [pc, #192]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	6213      	str	r3, [r2, #32]
 8005cc4:	e01d      	b.n	8005d02 <HAL_RCC_OscConfig+0x8b2>
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	d10c      	bne.n	8005cea <HAL_RCC_OscConfig+0x89a>
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cd6:	f043 0304 	orr.w	r3, r3, #4
 8005cda:	6213      	str	r3, [r2, #32]
 8005cdc:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	4a27      	ldr	r2, [pc, #156]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	6213      	str	r3, [r2, #32]
 8005ce8:	e00b      	b.n	8005d02 <HAL_RCC_OscConfig+0x8b2>
 8005cea:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	6213      	str	r3, [r2, #32]
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	4a21      	ldr	r2, [pc, #132]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005cfc:	f023 0304 	bic.w	r3, r3, #4
 8005d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d06b      	beq.n	8005de4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0c:	f7fd faf8 	bl	8003300 <HAL_GetTick>
 8005d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d14:	e00b      	b.n	8005d2e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d16:	f7fd faf3 	bl	8003300 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e291      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
 8005d2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005d32:	2202      	movs	r2, #2
 8005d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	fa93 f2a3 	rbit	r2, r3
 8005d40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	fa93 f2a3 	rbit	r2, r3
 8005d58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d5c:	601a      	str	r2, [r3, #0]
  return result;
 8005d5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d64:	fab3 f383 	clz	r3, r3
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f043 0302 	orr.w	r3, r3, #2
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d109      	bne.n	8005d8c <HAL_RCC_OscConfig+0x93c>
 8005d78:	4b01      	ldr	r3, [pc, #4]	; (8005d80 <HAL_RCC_OscConfig+0x930>)
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	e014      	b.n	8005da8 <HAL_RCC_OscConfig+0x958>
 8005d7e:	bf00      	nop
 8005d80:	40021000 	.word	0x40021000
 8005d84:	10908120 	.word	0x10908120
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d90:	2202      	movs	r2, #2
 8005d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	fa93 f2a3 	rbit	r2, r3
 8005d9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	4bbb      	ldr	r3, [pc, #748]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005dac:	2102      	movs	r1, #2
 8005dae:	6011      	str	r1, [r2, #0]
 8005db0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	fa92 f1a2 	rbit	r1, r2
 8005dba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005dbe:	6011      	str	r1, [r2, #0]
  return result;
 8005dc0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	fab2 f282 	clz	r2, r2
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	f002 021f 	and.w	r2, r2, #31
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d099      	beq.n	8005d16 <HAL_RCC_OscConfig+0x8c6>
 8005de2:	e063      	b.n	8005eac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de4:	f7fd fa8c 	bl	8003300 <HAL_GetTick>
 8005de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dec:	e00b      	b.n	8005e06 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dee:	f7fd fa87 	bl	8003300 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e225      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
 8005e06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	fa93 f2a3 	rbit	r2, r3
 8005e18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e22:	2202      	movs	r2, #2
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	fa93 f2a3 	rbit	r2, r3
 8005e30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005e34:	601a      	str	r2, [r3, #0]
  return result;
 8005e36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005e3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e3c:	fab3 f383 	clz	r3, r3
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f043 0302 	orr.w	r3, r3, #2
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d102      	bne.n	8005e56 <HAL_RCC_OscConfig+0xa06>
 8005e50:	4b90      	ldr	r3, [pc, #576]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	e00d      	b.n	8005e72 <HAL_RCC_OscConfig+0xa22>
 8005e56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fa93 f2a3 	rbit	r2, r3
 8005e68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	4b89      	ldr	r3, [pc, #548]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e76:	2102      	movs	r1, #2
 8005e78:	6011      	str	r1, [r2, #0]
 8005e7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	fa92 f1a2 	rbit	r1, r2
 8005e84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e88:	6011      	str	r1, [r2, #0]
  return result;
 8005e8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	fab2 f282 	clz	r2, r2
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	f002 021f 	and.w	r2, r2, #31
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1a0      	bne.n	8005dee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005eac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb4:	4b77      	ldr	r3, [pc, #476]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	4a76      	ldr	r2, [pc, #472]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 81c2 	beq.w	8006250 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ecc:	4b71      	ldr	r3, [pc, #452]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	f000 819c 	beq.w	8006212 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	f040 8114 	bne.w	800610e <HAL_RCC_OscConfig+0xcbe>
 8005ee6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	fa93 f2a3 	rbit	r2, r3
 8005efa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005efe:	601a      	str	r2, [r3, #0]
  return result;
 8005f00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005f04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f06:	fab3 f383 	clz	r3, r3
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	461a      	mov	r2, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fd f9f0 	bl	8003300 <HAL_GetTick>
 8005f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f24:	e009      	b.n	8005f3a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f26:	f7fd f9eb 	bl	8003300 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e18b      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
 8005f3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	fa93 f2a3 	rbit	r2, r3
 8005f4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f52:	601a      	str	r2, [r3, #0]
  return result;
 8005f54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005f58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f5a:	fab3 f383 	clz	r3, r3
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCC_OscConfig+0xb24>
 8005f6e:	4b49      	ldr	r3, [pc, #292]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	e01b      	b.n	8005fac <HAL_RCC_OscConfig+0xb5c>
 8005f74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	fa93 f2a3 	rbit	r2, r3
 8005f88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	fa93 f2a3 	rbit	r2, r3
 8005fa2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	4b3a      	ldr	r3, [pc, #232]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fb4:	6011      	str	r1, [r2, #0]
 8005fb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	fa92 f1a2 	rbit	r1, r2
 8005fc0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005fc4:	6011      	str	r1, [r2, #0]
  return result;
 8005fc6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	fab2 f282 	clz	r2, r2
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	f042 0220 	orr.w	r2, r2, #32
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	f002 021f 	and.w	r2, r2, #31
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d19e      	bne.n	8005f26 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fe8:	4b2a      	ldr	r3, [pc, #168]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	4925      	ldr	r1, [pc, #148]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]
 8006004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800600c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	fa93 f2a3 	rbit	r2, r3
 8006018:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800601c:	601a      	str	r2, [r3, #0]
  return result;
 800601e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006022:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006024:	fab3 f383 	clz	r3, r3
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800602e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	461a      	mov	r2, r3
 8006036:	2301      	movs	r3, #1
 8006038:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603a:	f7fd f961 	bl	8003300 <HAL_GetTick>
 800603e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006042:	e009      	b.n	8006058 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006044:	f7fd f95c 	bl	8003300 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e0fc      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
 8006058:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800605c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006062:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	fa93 f2a3 	rbit	r2, r3
 800606c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006070:	601a      	str	r2, [r3, #0]
  return result;
 8006072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006076:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006078:	fab3 f383 	clz	r3, r3
 800607c:	b2db      	uxtb	r3, r3
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d105      	bne.n	8006098 <HAL_RCC_OscConfig+0xc48>
 800608c:	4b01      	ldr	r3, [pc, #4]	; (8006094 <HAL_RCC_OscConfig+0xc44>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	e01e      	b.n	80060d0 <HAL_RCC_OscConfig+0xc80>
 8006092:	bf00      	nop
 8006094:	40021000 	.word	0x40021000
 8006098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800609c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	fa93 f2a3 	rbit	r2, r3
 80060ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	fa93 f2a3 	rbit	r2, r3
 80060c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	4b63      	ldr	r3, [pc, #396]	; (800625c <HAL_RCC_OscConfig+0xe0c>)
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80060d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	fa92 f1a2 	rbit	r1, r2
 80060e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80060e8:	6011      	str	r1, [r2, #0]
  return result;
 80060ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	fab2 f282 	clz	r2, r2
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	f042 0220 	orr.w	r2, r2, #32
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	f002 021f 	and.w	r2, r2, #31
 8006100:	2101      	movs	r1, #1
 8006102:	fa01 f202 	lsl.w	r2, r1, r2
 8006106:	4013      	ands	r3, r2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d09b      	beq.n	8006044 <HAL_RCC_OscConfig+0xbf4>
 800610c:	e0a0      	b.n	8006250 <HAL_RCC_OscConfig+0xe00>
 800610e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	fa93 f2a3 	rbit	r2, r3
 8006122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006126:	601a      	str	r2, [r3, #0]
  return result;
 8006128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800612c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612e:	fab3 f383 	clz	r3, r3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006138:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	461a      	mov	r2, r3
 8006140:	2300      	movs	r3, #0
 8006142:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fd f8dc 	bl	8003300 <HAL_GetTick>
 8006148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800614c:	e009      	b.n	8006162 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614e:	f7fd f8d7 	bl	8003300 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e077      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
 8006162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006166:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800616a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	fa93 f2a3 	rbit	r2, r3
 8006176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617a:	601a      	str	r2, [r3, #0]
  return result;
 800617c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006180:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006182:	fab3 f383 	clz	r3, r3
 8006186:	b2db      	uxtb	r3, r3
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b01      	cmp	r3, #1
 8006194:	d102      	bne.n	800619c <HAL_RCC_OscConfig+0xd4c>
 8006196:	4b31      	ldr	r3, [pc, #196]	; (800625c <HAL_RCC_OscConfig+0xe0c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	e01b      	b.n	80061d4 <HAL_RCC_OscConfig+0xd84>
 800619c:	f107 0320 	add.w	r3, r7, #32
 80061a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a6:	f107 0320 	add.w	r3, r7, #32
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	fa93 f2a3 	rbit	r2, r3
 80061b0:	f107 031c 	add.w	r3, r7, #28
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f107 0318 	add.w	r3, r7, #24
 80061ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f107 0318 	add.w	r3, r7, #24
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	fa93 f2a3 	rbit	r2, r3
 80061ca:	f107 0314 	add.w	r3, r7, #20
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	4b22      	ldr	r3, [pc, #136]	; (800625c <HAL_RCC_OscConfig+0xe0c>)
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	f107 0210 	add.w	r2, r7, #16
 80061d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	f107 0210 	add.w	r2, r7, #16
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	fa92 f1a2 	rbit	r1, r2
 80061e8:	f107 020c 	add.w	r2, r7, #12
 80061ec:	6011      	str	r1, [r2, #0]
  return result;
 80061ee:	f107 020c 	add.w	r2, r7, #12
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	fab2 f282 	clz	r2, r2
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	f042 0220 	orr.w	r2, r2, #32
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	f002 021f 	and.w	r2, r2, #31
 8006204:	2101      	movs	r1, #1
 8006206:	fa01 f202 	lsl.w	r2, r1, r2
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d19e      	bne.n	800614e <HAL_RCC_OscConfig+0xcfe>
 8006210:	e01e      	b.n	8006250 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e018      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <HAL_RCC_OscConfig+0xe0c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006228:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800622c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006230:	1d3b      	adds	r3, r7, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	429a      	cmp	r2, r3
 8006238:	d108      	bne.n	800624c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800623a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800623e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000

08006260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b09e      	sub	sp, #120	; 0x78
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e162      	b.n	800653e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006278:	4b90      	ldr	r3, [pc, #576]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d910      	bls.n	80062a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006286:	4b8d      	ldr	r3, [pc, #564]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 0207 	bic.w	r2, r3, #7
 800628e:	498b      	ldr	r1, [pc, #556]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	4313      	orrs	r3, r2
 8006294:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006296:	4b89      	ldr	r3, [pc, #548]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d001      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e14a      	b.n	800653e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b4:	4b82      	ldr	r3, [pc, #520]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	497f      	ldr	r1, [pc, #508]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80dc 	beq.w	800648c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d13c      	bne.n	8006356 <HAL_RCC_ClockConfig+0xf6>
 80062dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e4:	fa93 f3a3 	rbit	r3, r3
 80062e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80062ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ec:	fab3 f383 	clz	r3, r3
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d102      	bne.n	8006306 <HAL_RCC_ClockConfig+0xa6>
 8006300:	4b6f      	ldr	r3, [pc, #444]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	e00f      	b.n	8006326 <HAL_RCC_ClockConfig+0xc6>
 8006306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800630a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630e:	fa93 f3a3 	rbit	r3, r3
 8006312:	667b      	str	r3, [r7, #100]	; 0x64
 8006314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006318:	663b      	str	r3, [r7, #96]	; 0x60
 800631a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631c:	fa93 f3a3 	rbit	r3, r3
 8006320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006322:	4b67      	ldr	r3, [pc, #412]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800632a:	65ba      	str	r2, [r7, #88]	; 0x58
 800632c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800632e:	fa92 f2a2 	rbit	r2, r2
 8006332:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006336:	fab2 f282 	clz	r2, r2
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	f042 0220 	orr.w	r2, r2, #32
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	f002 021f 	and.w	r2, r2, #31
 8006346:	2101      	movs	r1, #1
 8006348:	fa01 f202 	lsl.w	r2, r1, r2
 800634c:	4013      	ands	r3, r2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d17b      	bne.n	800644a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0f3      	b.n	800653e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d13c      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x178>
 800635e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006362:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006366:	fa93 f3a3 	rbit	r3, r3
 800636a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800636c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800636e:	fab3 f383 	clz	r3, r3
 8006372:	b2db      	uxtb	r3, r3
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d102      	bne.n	8006388 <HAL_RCC_ClockConfig+0x128>
 8006382:	4b4f      	ldr	r3, [pc, #316]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	e00f      	b.n	80063a8 <HAL_RCC_ClockConfig+0x148>
 8006388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800638c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006390:	fa93 f3a3 	rbit	r3, r3
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
 8006396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	fa93 f3a3 	rbit	r3, r3
 80063a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a4:	4b46      	ldr	r3, [pc, #280]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80063ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b0:	fa92 f2a2 	rbit	r2, r2
 80063b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80063b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b8:	fab2 f282 	clz	r2, r2
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	f042 0220 	orr.w	r2, r2, #32
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	f002 021f 	and.w	r2, r2, #31
 80063c8:	2101      	movs	r1, #1
 80063ca:	fa01 f202 	lsl.w	r2, r1, r2
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d13a      	bne.n	800644a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0b2      	b.n	800653e <HAL_RCC_ClockConfig+0x2de>
 80063d8:	2302      	movs	r3, #2
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	fa93 f3a3 	rbit	r3, r3
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	fab3 f383 	clz	r3, r3
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d102      	bne.n	8006400 <HAL_RCC_ClockConfig+0x1a0>
 80063fa:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	e00d      	b.n	800641c <HAL_RCC_ClockConfig+0x1bc>
 8006400:	2302      	movs	r3, #2
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	fa93 f3a3 	rbit	r3, r3
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
 800640c:	2302      	movs	r3, #2
 800640e:	623b      	str	r3, [r7, #32]
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	fa93 f3a3 	rbit	r3, r3
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	4b29      	ldr	r3, [pc, #164]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	2202      	movs	r2, #2
 800641e:	61ba      	str	r2, [r7, #24]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	fa92 f2a2 	rbit	r2, r2
 8006426:	617a      	str	r2, [r7, #20]
  return result;
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	fab2 f282 	clz	r2, r2
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	f042 0220 	orr.w	r2, r2, #32
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	f002 021f 	and.w	r2, r2, #31
 800643a:	2101      	movs	r1, #1
 800643c:	fa01 f202 	lsl.w	r2, r1, r2
 8006440:	4013      	ands	r3, r2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e079      	b.n	800653e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800644a:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f023 0203 	bic.w	r2, r3, #3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	491a      	ldr	r1, [pc, #104]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006458:	4313      	orrs	r3, r2
 800645a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800645c:	f7fc ff50 	bl	8003300 <HAL_GetTick>
 8006460:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006462:	e00a      	b.n	800647a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006464:	f7fc ff4c 	bl	8003300 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006472:	4293      	cmp	r3, r2
 8006474:	d901      	bls.n	800647a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e061      	b.n	800653e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f003 020c 	and.w	r2, r3, #12
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	429a      	cmp	r2, r3
 800648a:	d1eb      	bne.n	8006464 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d214      	bcs.n	80064c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649a:	4b08      	ldr	r3, [pc, #32]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 0207 	bic.w	r2, r3, #7
 80064a2:	4906      	ldr	r1, [pc, #24]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064aa:	4b04      	ldr	r3, [pc, #16]	; (80064bc <HAL_RCC_ClockConfig+0x25c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e040      	b.n	800653e <HAL_RCC_ClockConfig+0x2de>
 80064bc:	40022000 	.word	0x40022000
 80064c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d0:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <HAL_RCC_ClockConfig+0x2e8>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	491a      	ldr	r1, [pc, #104]	; (8006548 <HAL_RCC_ClockConfig+0x2e8>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_RCC_ClockConfig+0x2e8>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4912      	ldr	r1, [pc, #72]	; (8006548 <HAL_RCC_ClockConfig+0x2e8>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006502:	f000 f829 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8006506:	4601      	mov	r1, r0
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <HAL_RCC_ClockConfig+0x2e8>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006510:	22f0      	movs	r2, #240	; 0xf0
 8006512:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	fa92 f2a2 	rbit	r2, r2
 800651a:	60fa      	str	r2, [r7, #12]
  return result;
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	fab2 f282 	clz	r2, r2
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	40d3      	lsrs	r3, r2
 8006526:	4a09      	ldr	r2, [pc, #36]	; (800654c <HAL_RCC_ClockConfig+0x2ec>)
 8006528:	5cd3      	ldrb	r3, [r2, r3]
 800652a:	fa21 f303 	lsr.w	r3, r1, r3
 800652e:	4a08      	ldr	r2, [pc, #32]	; (8006550 <HAL_RCC_ClockConfig+0x2f0>)
 8006530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <HAL_RCC_ClockConfig+0x2f4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fc fe9e 	bl	8003278 <HAL_InitTick>
  
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3778      	adds	r7, #120	; 0x78
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40021000 	.word	0x40021000
 800654c:	0800c170 	.word	0x0800c170
 8006550:	20000068 	.word	0x20000068
 8006554:	2000006c 	.word	0x2000006c

08006558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	b08b      	sub	sp, #44	; 0x2c
 800655c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006572:	4b29      	ldr	r3, [pc, #164]	; (8006618 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 030c 	and.w	r3, r3, #12
 800657e:	2b04      	cmp	r3, #4
 8006580:	d002      	beq.n	8006588 <HAL_RCC_GetSysClockFreq+0x30>
 8006582:	2b08      	cmp	r3, #8
 8006584:	d003      	beq.n	800658e <HAL_RCC_GetSysClockFreq+0x36>
 8006586:	e03c      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006588:	4b24      	ldr	r3, [pc, #144]	; (800661c <HAL_RCC_GetSysClockFreq+0xc4>)
 800658a:	623b      	str	r3, [r7, #32]
      break;
 800658c:	e03c      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006594:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006598:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	fa92 f2a2 	rbit	r2, r2
 80065a0:	607a      	str	r2, [r7, #4]
  return result;
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	fab2 f282 	clz	r2, r2
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	40d3      	lsrs	r3, r2
 80065ac:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <HAL_RCC_GetSysClockFreq+0xc8>)
 80065ae:	5cd3      	ldrb	r3, [r2, r3]
 80065b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80065b2:	4b19      	ldr	r3, [pc, #100]	; (8006618 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	220f      	movs	r2, #15
 80065bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	fa92 f2a2 	rbit	r2, r2
 80065c4:	60fa      	str	r2, [r7, #12]
  return result;
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	fab2 f282 	clz	r2, r2
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	40d3      	lsrs	r3, r2
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <HAL_RCC_GetSysClockFreq+0xcc>)
 80065d2:	5cd3      	ldrb	r3, [r2, r3]
 80065d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d008      	beq.n	80065f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80065e0:	4a0e      	ldr	r2, [pc, #56]	; (800661c <HAL_RCC_GetSysClockFreq+0xc4>)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
 80065f0:	e004      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	623b      	str	r3, [r7, #32]
      break;
 8006600:	e002      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006604:	623b      	str	r3, [r7, #32]
      break;
 8006606:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006608:	6a3b      	ldr	r3, [r7, #32]
}
 800660a:	4618      	mov	r0, r3
 800660c:	372c      	adds	r7, #44	; 0x2c
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40021000 	.word	0x40021000
 800661c:	007a1200 	.word	0x007a1200
 8006620:	0800c188 	.word	0x0800c188
 8006624:	0800c198 	.word	0x0800c198
 8006628:	003d0900 	.word	0x003d0900

0800662c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006630:	4b03      	ldr	r3, [pc, #12]	; (8006640 <HAL_RCC_GetHCLKFreq+0x14>)
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	20000068 	.word	0x20000068

08006644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800664a:	f7ff ffef 	bl	800662c <HAL_RCC_GetHCLKFreq>
 800664e:	4601      	mov	r1, r0
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006658:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800665c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	fa92 f2a2 	rbit	r2, r2
 8006664:	603a      	str	r2, [r7, #0]
  return result;
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	fab2 f282 	clz	r2, r2
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	40d3      	lsrs	r3, r2
 8006670:	4a04      	ldr	r2, [pc, #16]	; (8006684 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006672:	5cd3      	ldrb	r3, [r2, r3]
 8006674:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40021000 	.word	0x40021000
 8006684:	0800c180 	.word	0x0800c180

08006688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800668e:	f7ff ffcd 	bl	800662c <HAL_RCC_GetHCLKFreq>
 8006692:	4601      	mov	r1, r0
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800669c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80066a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	fa92 f2a2 	rbit	r2, r2
 80066a8:	603a      	str	r2, [r7, #0]
  return result;
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	fab2 f282 	clz	r2, r2
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	40d3      	lsrs	r3, r2
 80066b4:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80066b6:	5cd3      	ldrb	r3, [r2, r3]
 80066b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40021000 	.word	0x40021000
 80066c8:	0800c180 	.word	0x0800c180

080066cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b092      	sub	sp, #72	; 0x48
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80d4 	beq.w	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f0:	4b4e      	ldr	r3, [pc, #312]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10e      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fc:	4b4b      	ldr	r3, [pc, #300]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	4a4a      	ldr	r2, [pc, #296]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006706:	61d3      	str	r3, [r2, #28]
 8006708:	4b48      	ldr	r3, [pc, #288]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671a:	4b45      	ldr	r3, [pc, #276]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d118      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006726:	4b42      	ldr	r3, [pc, #264]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a41      	ldr	r2, [pc, #260]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800672c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006730:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006732:	f7fc fde5 	bl	8003300 <HAL_GetTick>
 8006736:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006738:	e008      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673a:	f7fc fde1 	bl	8003300 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b64      	cmp	r3, #100	; 0x64
 8006746:	d901      	bls.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e169      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	4b38      	ldr	r3, [pc, #224]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006758:	4b34      	ldr	r3, [pc, #208]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006760:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8084 	beq.w	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006774:	429a      	cmp	r2, r3
 8006776:	d07c      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006778:	4b2c      	ldr	r3, [pc, #176]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006786:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	fa93 f3a3 	rbit	r3, r3
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006792:	fab3 f383 	clz	r3, r3
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	461a      	mov	r2, r3
 80067a2:	2301      	movs	r3, #1
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	fa93 f3a3 	rbit	r3, r3
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067b6:	fab3 f383 	clz	r3, r3
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067ca:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04b      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067da:	f7fc fd91 	bl	8003300 <HAL_GetTick>
 80067de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e0:	e00a      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e2:	f7fc fd8d 	bl	8003300 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e113      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80067f8:	2302      	movs	r3, #2
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	fa93 f3a3 	rbit	r3, r3
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	2302      	movs	r3, #2
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	fa93 f3a3 	rbit	r3, r3
 800680e:	61fb      	str	r3, [r7, #28]
  return result;
 8006810:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006812:	fab3 f383 	clz	r3, r3
 8006816:	b2db      	uxtb	r3, r3
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d108      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006826:	4b01      	ldr	r3, [pc, #4]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	e00d      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800682c:	40021000 	.word	0x40021000
 8006830:	40007000 	.word	0x40007000
 8006834:	10908100 	.word	0x10908100
 8006838:	2302      	movs	r3, #2
 800683a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	fa93 f3a3 	rbit	r3, r3
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	4b78      	ldr	r3, [pc, #480]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2202      	movs	r2, #2
 800684a:	613a      	str	r2, [r7, #16]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	fa92 f2a2 	rbit	r2, r2
 8006852:	60fa      	str	r2, [r7, #12]
  return result;
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	fab2 f282 	clz	r2, r2
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	f002 021f 	and.w	r2, r2, #31
 8006866:	2101      	movs	r1, #1
 8006868:	fa01 f202 	lsl.w	r2, r1, r2
 800686c:	4013      	ands	r3, r2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0b7      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006872:	4b6d      	ldr	r3, [pc, #436]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	496a      	ldr	r1, [pc, #424]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006880:	4313      	orrs	r3, r2
 8006882:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006884:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688c:	4b66      	ldr	r3, [pc, #408]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4a65      	ldr	r2, [pc, #404]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006896:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068a4:	4b60      	ldr	r3, [pc, #384]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	f023 0203 	bic.w	r2, r3, #3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	495d      	ldr	r1, [pc, #372]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068c2:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	4956      	ldr	r1, [pc, #344]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068e0:	4b51      	ldr	r3, [pc, #324]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	494e      	ldr	r1, [pc, #312]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068fe:	4b4a      	ldr	r3, [pc, #296]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f023 0210 	bic.w	r2, r3, #16
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	4947      	ldr	r1, [pc, #284]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800690c:	4313      	orrs	r3, r2
 800690e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800691c:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	493f      	ldr	r1, [pc, #252]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800693a:	4b3b      	ldr	r3, [pc, #236]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	f023 0220 	bic.w	r2, r3, #32
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	4938      	ldr	r1, [pc, #224]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d008      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006958:	4b33      	ldr	r3, [pc, #204]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	4930      	ldr	r1, [pc, #192]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006976:	4b2c      	ldr	r3, [pc, #176]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	4929      	ldr	r1, [pc, #164]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006984:	4313      	orrs	r3, r2
 8006986:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006994:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4921      	ldr	r1, [pc, #132]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069b2:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	491a      	ldr	r1, [pc, #104]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80069d0:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	4912      	ldr	r1, [pc, #72]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80069ee:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	490b      	ldr	r1, [pc, #44]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	4903      	ldr	r1, [pc, #12]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3748      	adds	r7, #72	; 0x48
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40021000 	.word	0x40021000

08006a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e09d      	b.n	8006b7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d108      	bne.n	8006a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a4e:	d009      	beq.n	8006a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	61da      	str	r2, [r3, #28]
 8006a56:	e005      	b.n	8006a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fc f9ce 	bl	8002e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aa4:	d902      	bls.n	8006aac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	e002      	b.n	8006ab2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ab0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006aba:	d007      	beq.n	8006acc <HAL_SPI_Init+0xa0>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ac4:	d002      	beq.n	8006acc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0e:	ea42 0103 	orr.w	r1, r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	f003 0204 	and.w	r2, r3, #4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b48:	ea42 0103 	orr.w	r1, r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e049      	b.n	8006c28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fc f97b 	bl	8002ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f000 fa9f 	bl	8007104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d001      	beq.n	8006c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e04a      	b.n	8006cde <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a21      	ldr	r2, [pc, #132]	; (8006cec <HAL_TIM_Base_Start_IT+0xbc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d018      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x6c>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c72:	d013      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x6c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1d      	ldr	r2, [pc, #116]	; (8006cf0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x6c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1c      	ldr	r2, [pc, #112]	; (8006cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x6c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1a      	ldr	r2, [pc, #104]	; (8006cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x6c>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a19      	ldr	r2, [pc, #100]	; (8006cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d115      	bne.n	8006cc8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b06      	cmp	r3, #6
 8006cac:	d015      	beq.n	8006cda <HAL_TIM_Base_Start_IT+0xaa>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb4:	d011      	beq.n	8006cda <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0201 	orr.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc6:	e008      	b.n	8006cda <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	e000      	b.n	8006cdc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40013400 	.word	0x40013400
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	00010007 	.word	0x00010007

08006d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d122      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d11b      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0202 	mvn.w	r2, #2
 8006d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f9be 	bl	80070c8 <HAL_TIM_IC_CaptureCallback>
 8006d4c:	e005      	b.n	8006d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9b0 	bl	80070b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f9c1 	bl	80070dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d122      	bne.n	8006db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d11b      	bne.n	8006db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f06f 0204 	mvn.w	r2, #4
 8006d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f994 	bl	80070c8 <HAL_TIM_IC_CaptureCallback>
 8006da0:	e005      	b.n	8006dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f986 	bl	80070b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f997 	bl	80070dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d122      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d11b      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0208 	mvn.w	r2, #8
 8006dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2204      	movs	r2, #4
 8006dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f96a 	bl	80070c8 <HAL_TIM_IC_CaptureCallback>
 8006df4:	e005      	b.n	8006e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f95c 	bl	80070b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f96d 	bl	80070dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b10      	cmp	r3, #16
 8006e14:	d122      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0310 	and.w	r3, r3, #16
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d11b      	bne.n	8006e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0210 	mvn.w	r2, #16
 8006e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2208      	movs	r2, #8
 8006e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f940 	bl	80070c8 <HAL_TIM_IC_CaptureCallback>
 8006e48:	e005      	b.n	8006e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f932 	bl	80070b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f943 	bl	80070dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d10e      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d107      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0201 	mvn.w	r2, #1
 8006e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fa fd92 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d10e      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea0:	2b80      	cmp	r3, #128	; 0x80
 8006ea2:	d107      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fadc 	bl	800746c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec2:	d10e      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d107      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 facf 	bl	8007480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d10e      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d107      	bne.n	8006f0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f8f1 	bl	80070f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d10e      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d107      	bne.n	8006f3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f06f 0220 	mvn.w	r2, #32
 8006f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fa8f 	bl	8007458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_ConfigClockSource+0x18>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e0a8      	b.n	80070ac <HAL_TIM_ConfigClockSource+0x16a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f84:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d067      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x124>
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d80b      	bhi.n	8006fb2 <HAL_TIM_ConfigClockSource+0x70>
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d073      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x144>
 8006f9e:	2b10      	cmp	r3, #16
 8006fa0:	d802      	bhi.n	8006fa8 <HAL_TIM_ConfigClockSource+0x66>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d06f      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006fa6:	e078      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d06c      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x144>
 8006fac:	2b30      	cmp	r3, #48	; 0x30
 8006fae:	d06a      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006fb0:	e073      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006fb2:	2b70      	cmp	r3, #112	; 0x70
 8006fb4:	d00d      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x90>
 8006fb6:	2b70      	cmp	r3, #112	; 0x70
 8006fb8:	d804      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x82>
 8006fba:	2b50      	cmp	r3, #80	; 0x50
 8006fbc:	d033      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0xe4>
 8006fbe:	2b60      	cmp	r3, #96	; 0x60
 8006fc0:	d041      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006fc2:	e06a      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d066      	beq.n	8007098 <HAL_TIM_ConfigClockSource+0x156>
 8006fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fce:	d017      	beq.n	8007000 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006fd0:	e063      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6899      	ldr	r1, [r3, #8]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f000 f999 	bl	8007318 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ff4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	609a      	str	r2, [r3, #8]
      break;
 8006ffe:	e04c      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	6899      	ldr	r1, [r3, #8]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f000 f982 	bl	8007318 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007022:	609a      	str	r2, [r3, #8]
      break;
 8007024:	e039      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	461a      	mov	r2, r3
 8007034:	f000 f8f6 	bl	8007224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2150      	movs	r1, #80	; 0x50
 800703e:	4618      	mov	r0, r3
 8007040:	f000 f94f 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8007044:	e029      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6859      	ldr	r1, [r3, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	461a      	mov	r2, r3
 8007054:	f000 f915 	bl	8007282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2160      	movs	r1, #96	; 0x60
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f93f 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8007064:	e019      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6859      	ldr	r1, [r3, #4]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	461a      	mov	r2, r3
 8007074:	f000 f8d6 	bl	8007224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2140      	movs	r1, #64	; 0x40
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f92f 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8007084:	e009      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f000 f926 	bl	80072e2 <TIM_ITRx_SetConfig>
        break;
 8007096:	e000      	b.n	800709a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007098:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <TIM_Base_SetConfig+0x104>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00f      	beq.n	800713c <TIM_Base_SetConfig+0x38>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007122:	d00b      	beq.n	800713c <TIM_Base_SetConfig+0x38>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a39      	ldr	r2, [pc, #228]	; (800720c <TIM_Base_SetConfig+0x108>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_Base_SetConfig+0x38>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a38      	ldr	r2, [pc, #224]	; (8007210 <TIM_Base_SetConfig+0x10c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_Base_SetConfig+0x38>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a37      	ldr	r2, [pc, #220]	; (8007214 <TIM_Base_SetConfig+0x110>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d108      	bne.n	800714e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2d      	ldr	r2, [pc, #180]	; (8007208 <TIM_Base_SetConfig+0x104>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01b      	beq.n	800718e <TIM_Base_SetConfig+0x8a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715c:	d017      	beq.n	800718e <TIM_Base_SetConfig+0x8a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2a      	ldr	r2, [pc, #168]	; (800720c <TIM_Base_SetConfig+0x108>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <TIM_Base_SetConfig+0x8a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a29      	ldr	r2, [pc, #164]	; (8007210 <TIM_Base_SetConfig+0x10c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00f      	beq.n	800718e <TIM_Base_SetConfig+0x8a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a28      	ldr	r2, [pc, #160]	; (8007214 <TIM_Base_SetConfig+0x110>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00b      	beq.n	800718e <TIM_Base_SetConfig+0x8a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a27      	ldr	r2, [pc, #156]	; (8007218 <TIM_Base_SetConfig+0x114>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <TIM_Base_SetConfig+0x8a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a26      	ldr	r2, [pc, #152]	; (800721c <TIM_Base_SetConfig+0x118>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_Base_SetConfig+0x8a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a25      	ldr	r2, [pc, #148]	; (8007220 <TIM_Base_SetConfig+0x11c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d108      	bne.n	80071a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a10      	ldr	r2, [pc, #64]	; (8007208 <TIM_Base_SetConfig+0x104>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00f      	beq.n	80071ec <TIM_Base_SetConfig+0xe8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a11      	ldr	r2, [pc, #68]	; (8007214 <TIM_Base_SetConfig+0x110>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00b      	beq.n	80071ec <TIM_Base_SetConfig+0xe8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a10      	ldr	r2, [pc, #64]	; (8007218 <TIM_Base_SetConfig+0x114>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d007      	beq.n	80071ec <TIM_Base_SetConfig+0xe8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a0f      	ldr	r2, [pc, #60]	; (800721c <TIM_Base_SetConfig+0x118>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d003      	beq.n	80071ec <TIM_Base_SetConfig+0xe8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <TIM_Base_SetConfig+0x11c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d103      	bne.n	80071f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	615a      	str	r2, [r3, #20]
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40000400 	.word	0x40000400
 8007210:	40000800 	.word	0x40000800
 8007214:	40013400 	.word	0x40013400
 8007218:	40014000 	.word	0x40014000
 800721c:	40014400 	.word	0x40014400
 8007220:	40014800 	.word	0x40014800

08007224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f023 0201 	bic.w	r2, r3, #1
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800724e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 030a 	bic.w	r3, r3, #10
 8007260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	621a      	str	r2, [r3, #32]
}
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007282:	b480      	push	{r7}
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f023 0210 	bic.w	r2, r3, #16
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	031b      	lsls	r3, r3, #12
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	f043 0307 	orr.w	r3, r3, #7
 8007304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	609a      	str	r2, [r3, #8]
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	021a      	lsls	r2, r3, #8
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	431a      	orrs	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4313      	orrs	r3, r2
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	609a      	str	r2, [r3, #8]
}
 800734c:	bf00      	nop
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800736c:	2302      	movs	r3, #2
 800736e:	e063      	b.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2b      	ldr	r2, [pc, #172]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d108      	bne.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1b      	ldr	r2, [pc, #108]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d018      	beq.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e2:	d013      	beq.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a18      	ldr	r2, [pc, #96]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00e      	beq.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a17      	ldr	r2, [pc, #92]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d009      	beq.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a12      	ldr	r2, [pc, #72]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d004      	beq.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a13      	ldr	r2, [pc, #76]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d10c      	bne.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	4313      	orrs	r3, r2
 800741c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40013400 	.word	0x40013400
 800744c:	40000400 	.word	0x40000400
 8007450:	40000800 	.word	0x40000800
 8007454:	40014000 	.word	0x40014000

08007458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e040      	b.n	8007528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fb fd50 	bl	8002f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2224      	movs	r2, #36	; 0x24
 80074c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0201 	bic.w	r2, r2, #1
 80074d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fb1e 	bl	8007b14 <UART_SetConfig>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e022      	b.n	8007528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fce4 	bl	8007eb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800750e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fd6b 	bl	8007ffc <UART_CheckIdleState>
 8007526:	4603      	mov	r3, r0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007544:	2b20      	cmp	r3, #32
 8007546:	f040 8082 	bne.w	800764e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HAL_UART_Transmit+0x26>
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e07a      	b.n	8007650 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_UART_Transmit+0x38>
 8007564:	2302      	movs	r3, #2
 8007566:	e073      	b.n	8007650 <HAL_UART_Transmit+0x120>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2221      	movs	r2, #33	; 0x21
 800757c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800757e:	f7fb febf 	bl	8003300 <HAL_GetTick>
 8007582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	88fa      	ldrh	r2, [r7, #6]
 8007588:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	88fa      	ldrh	r2, [r7, #6]
 8007590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d108      	bne.n	80075b0 <HAL_UART_Transmit+0x80>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e003      	b.n	80075b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80075c0:	e02d      	b.n	800761e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fd5e 	bl	800808e <UART_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e039      	b.n	8007650 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	881a      	ldrh	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ee:	b292      	uxth	r2, r2
 80075f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3302      	adds	r3, #2
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	e008      	b.n	800760c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	b292      	uxth	r2, r2
 8007604:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	3301      	adds	r3, #1
 800760a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1cb      	bne.n	80075c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2200      	movs	r2, #0
 8007632:	2140      	movs	r1, #64	; 0x40
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fd2a 	bl	800808e <UART_WaitOnFlagUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e005      	b.n	8007650 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e000      	b.n	8007650 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800766a:	2b20      	cmp	r3, #32
 800766c:	d12c      	bne.n	80076c8 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_UART_Receive_IT+0x22>
 8007674:	88fb      	ldrh	r3, [r7, #6]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e025      	b.n	80076ca <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_UART_Receive_IT+0x34>
 8007688:	2302      	movs	r3, #2
 800768a:	e01e      	b.n	80076ca <HAL_UART_Receive_IT+0x72>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d007      	beq.n	80076b8 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80076b6:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	461a      	mov	r2, r3
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fd62 	bl	8008188 <UART_Start_Receive_IT>
 80076c4:	4603      	mov	r3, r0
 80076c6:	e000      	b.n	80076ca <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80076c8:	2302      	movs	r3, #2
  }
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80076fa:	4013      	ands	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d113      	bne.n	800772c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b00      	cmp	r3, #0
 8007716:	d009      	beq.n	800772c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 81cd 	beq.w	8007abc <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
      }
      return;
 800772a:	e1c7      	b.n	8007abc <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80e3 	beq.w	80078fa <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	4ba5      	ldr	r3, [pc, #660]	; (80079d8 <HAL_UART_IRQHandler+0x304>)
 8007742:	4013      	ands	r3, r2
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80d8 	beq.w	80078fa <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d010      	beq.n	8007776 <HAL_UART_IRQHandler+0xa2>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <HAL_UART_IRQHandler+0xce>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00b      	beq.n	80077a2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2202      	movs	r2, #2
 8007790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007798:	f043 0204 	orr.w	r2, r3, #4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d010      	beq.n	80077ce <HAL_UART_IRQHandler+0xfa>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2204      	movs	r2, #4
 80077bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077c4:	f043 0202 	orr.w	r2, r3, #2
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d015      	beq.n	8007804 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d104      	bne.n	80077ec <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2208      	movs	r2, #8
 80077f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fa:	f043 0208 	orr.w	r2, r3, #8
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800780a:	2b00      	cmp	r3, #0
 800780c:	d011      	beq.n	8007832 <HAL_UART_IRQHandler+0x15e>
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8141 	beq.w	8007ac0 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	f003 0320 	and.w	r3, r3, #32
 800784e:	2b00      	cmp	r3, #0
 8007850:	d007      	beq.n	8007862 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007868:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007874:	2b40      	cmp	r3, #64	; 0x40
 8007876:	d004      	beq.n	8007882 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800787e:	2b00      	cmp	r3, #0
 8007880:	d031      	beq.n	80078e6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fcf6 	bl	8008274 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d123      	bne.n	80078de <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d013      	beq.n	80078d6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	4a4a      	ldr	r2, [pc, #296]	; (80079dc <HAL_UART_IRQHandler+0x308>)
 80078b4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd f9aa 	bl	8004c14 <HAL_DMA_Abort_IT>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d017      	beq.n	80078f6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	e00f      	b.n	80078f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f906 	bl	8007ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	e00b      	b.n	80078f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f902 	bl	8007ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e007      	b.n	80078f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f8fe 	bl	8007ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80078f4:	e0e4      	b.n	8007ac0 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f6:	bf00      	nop
    return;
 80078f8:	e0e2      	b.n	8007ac0 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078fe:	2b01      	cmp	r3, #1
 8007900:	f040 80a7 	bne.w	8007a52 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80a1 	beq.w	8007a52 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f003 0310 	and.w	r3, r3, #16
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 809b 	beq.w	8007a52 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2210      	movs	r2, #16
 8007922:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b40      	cmp	r3, #64	; 0x40
 8007930:	d156      	bne.n	80079e0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800793c:	893b      	ldrh	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80c0 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800794a:	893a      	ldrh	r2, [r7, #8]
 800794c:	429a      	cmp	r2, r3
 800794e:	f080 80b9 	bcs.w	8007ac4 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	893a      	ldrh	r2, [r7, #8]
 8007956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b20      	cmp	r3, #32
 8007962:	d02a      	beq.n	80079ba <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007972:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689a      	ldr	r2, [r3, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007992:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0210 	bic.w	r2, r2, #16
 80079ae:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fd f8f4 	bl	8004ba2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f894 	bl	8007afc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80079d4:	e076      	b.n	8007ac4 <HAL_UART_IRQHandler+0x3f0>
 80079d6:	bf00      	nop
 80079d8:	04000120 	.word	0x04000120
 80079dc:	080082d3 	.word	0x080082d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d064      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 80079fe:	897b      	ldrh	r3, [r7, #10]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d061      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a12:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0201 	bic.w	r2, r2, #1
 8007a22:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0210 	bic.w	r2, r2, #16
 8007a44:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a46:	897b      	ldrh	r3, [r7, #10]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f856 	bl	8007afc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007a50:	e03a      	b.n	8007ac8 <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00d      	beq.n	8007a78 <HAL_UART_IRQHandler+0x3a4>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fd31 	bl	80084d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a76:	e02a      	b.n	8007ace <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00d      	beq.n	8007a9e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01b      	beq.n	8007acc <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
    }
    return;
 8007a9c:	e016      	b.n	8007acc <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d012      	beq.n	8007ace <HAL_UART_IRQHandler+0x3fa>
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00d      	beq.n	8007ace <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fc23 	bl	80082fe <UART_EndTransmit_IT>
    return;
 8007ab8:	bf00      	nop
 8007aba:	e008      	b.n	8007ace <HAL_UART_IRQHandler+0x3fa>
      return;
 8007abc:	bf00      	nop
 8007abe:	e006      	b.n	8007ace <HAL_UART_IRQHandler+0x3fa>
    return;
 8007ac0:	bf00      	nop
 8007ac2:	e004      	b.n	8007ace <HAL_UART_IRQHandler+0x3fa>
      return;
 8007ac4:	bf00      	nop
 8007ac6:	e002      	b.n	8007ace <HAL_UART_IRQHandler+0x3fa>
      return;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <HAL_UART_IRQHandler+0x3fa>
    return;
 8007acc:	bf00      	nop
  }

}
 8007ace:	3720      	adds	r7, #32
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b42:	f023 030c 	bic.w	r3, r3, #12
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	6979      	ldr	r1, [r7, #20]
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4aad      	ldr	r2, [pc, #692]	; (8007e44 <UART_SetConfig+0x330>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d121      	bne.n	8007bd8 <UART_SetConfig+0xc4>
 8007b94:	4bac      	ldr	r3, [pc, #688]	; (8007e48 <UART_SetConfig+0x334>)
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d817      	bhi.n	8007bd0 <UART_SetConfig+0xbc>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <UART_SetConfig+0x94>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bc5 	.word	0x08007bc5
 8007bb0:	08007bcb 	.word	0x08007bcb
 8007bb4:	08007bbf 	.word	0x08007bbf
 8007bb8:	2301      	movs	r3, #1
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e0b2      	b.n	8007d24 <UART_SetConfig+0x210>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e0af      	b.n	8007d24 <UART_SetConfig+0x210>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e0ac      	b.n	8007d24 <UART_SetConfig+0x210>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	77fb      	strb	r3, [r7, #31]
 8007bce:	e0a9      	b.n	8007d24 <UART_SetConfig+0x210>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	bf00      	nop
 8007bd6:	e0a5      	b.n	8007d24 <UART_SetConfig+0x210>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a9b      	ldr	r2, [pc, #620]	; (8007e4c <UART_SetConfig+0x338>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d123      	bne.n	8007c2a <UART_SetConfig+0x116>
 8007be2:	4b99      	ldr	r3, [pc, #612]	; (8007e48 <UART_SetConfig+0x334>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bee:	d012      	beq.n	8007c16 <UART_SetConfig+0x102>
 8007bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf4:	d802      	bhi.n	8007bfc <UART_SetConfig+0xe8>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <UART_SetConfig+0xf6>
 8007bfa:	e012      	b.n	8007c22 <UART_SetConfig+0x10e>
 8007bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c00:	d00c      	beq.n	8007c1c <UART_SetConfig+0x108>
 8007c02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c06:	d003      	beq.n	8007c10 <UART_SetConfig+0xfc>
 8007c08:	e00b      	b.n	8007c22 <UART_SetConfig+0x10e>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	77fb      	strb	r3, [r7, #31]
 8007c0e:	e089      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c10:	2302      	movs	r3, #2
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	e086      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c16:	2304      	movs	r3, #4
 8007c18:	77fb      	strb	r3, [r7, #31]
 8007c1a:	e083      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	77fb      	strb	r3, [r7, #31]
 8007c20:	e080      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c22:	2310      	movs	r3, #16
 8007c24:	77fb      	strb	r3, [r7, #31]
 8007c26:	bf00      	nop
 8007c28:	e07c      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a88      	ldr	r2, [pc, #544]	; (8007e50 <UART_SetConfig+0x33c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d123      	bne.n	8007c7c <UART_SetConfig+0x168>
 8007c34:	4b84      	ldr	r3, [pc, #528]	; (8007e48 <UART_SetConfig+0x334>)
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007c3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c40:	d012      	beq.n	8007c68 <UART_SetConfig+0x154>
 8007c42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c46:	d802      	bhi.n	8007c4e <UART_SetConfig+0x13a>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d007      	beq.n	8007c5c <UART_SetConfig+0x148>
 8007c4c:	e012      	b.n	8007c74 <UART_SetConfig+0x160>
 8007c4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c52:	d00c      	beq.n	8007c6e <UART_SetConfig+0x15a>
 8007c54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c58:	d003      	beq.n	8007c62 <UART_SetConfig+0x14e>
 8007c5a:	e00b      	b.n	8007c74 <UART_SetConfig+0x160>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	77fb      	strb	r3, [r7, #31]
 8007c60:	e060      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c62:	2302      	movs	r3, #2
 8007c64:	77fb      	strb	r3, [r7, #31]
 8007c66:	e05d      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c68:	2304      	movs	r3, #4
 8007c6a:	77fb      	strb	r3, [r7, #31]
 8007c6c:	e05a      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c6e:	2308      	movs	r3, #8
 8007c70:	77fb      	strb	r3, [r7, #31]
 8007c72:	e057      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c74:	2310      	movs	r3, #16
 8007c76:	77fb      	strb	r3, [r7, #31]
 8007c78:	bf00      	nop
 8007c7a:	e053      	b.n	8007d24 <UART_SetConfig+0x210>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a74      	ldr	r2, [pc, #464]	; (8007e54 <UART_SetConfig+0x340>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d123      	bne.n	8007cce <UART_SetConfig+0x1ba>
 8007c86:	4b70      	ldr	r3, [pc, #448]	; (8007e48 <UART_SetConfig+0x334>)
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c92:	d012      	beq.n	8007cba <UART_SetConfig+0x1a6>
 8007c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c98:	d802      	bhi.n	8007ca0 <UART_SetConfig+0x18c>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d007      	beq.n	8007cae <UART_SetConfig+0x19a>
 8007c9e:	e012      	b.n	8007cc6 <UART_SetConfig+0x1b2>
 8007ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca4:	d00c      	beq.n	8007cc0 <UART_SetConfig+0x1ac>
 8007ca6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007caa:	d003      	beq.n	8007cb4 <UART_SetConfig+0x1a0>
 8007cac:	e00b      	b.n	8007cc6 <UART_SetConfig+0x1b2>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e037      	b.n	8007d24 <UART_SetConfig+0x210>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e034      	b.n	8007d24 <UART_SetConfig+0x210>
 8007cba:	2304      	movs	r3, #4
 8007cbc:	77fb      	strb	r3, [r7, #31]
 8007cbe:	e031      	b.n	8007d24 <UART_SetConfig+0x210>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	77fb      	strb	r3, [r7, #31]
 8007cc4:	e02e      	b.n	8007d24 <UART_SetConfig+0x210>
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	77fb      	strb	r3, [r7, #31]
 8007cca:	bf00      	nop
 8007ccc:	e02a      	b.n	8007d24 <UART_SetConfig+0x210>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a61      	ldr	r2, [pc, #388]	; (8007e58 <UART_SetConfig+0x344>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d123      	bne.n	8007d20 <UART_SetConfig+0x20c>
 8007cd8:	4b5b      	ldr	r3, [pc, #364]	; (8007e48 <UART_SetConfig+0x334>)
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ce4:	d012      	beq.n	8007d0c <UART_SetConfig+0x1f8>
 8007ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cea:	d802      	bhi.n	8007cf2 <UART_SetConfig+0x1de>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <UART_SetConfig+0x1ec>
 8007cf0:	e012      	b.n	8007d18 <UART_SetConfig+0x204>
 8007cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cf6:	d00c      	beq.n	8007d12 <UART_SetConfig+0x1fe>
 8007cf8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007cfc:	d003      	beq.n	8007d06 <UART_SetConfig+0x1f2>
 8007cfe:	e00b      	b.n	8007d18 <UART_SetConfig+0x204>
 8007d00:	2300      	movs	r3, #0
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e00e      	b.n	8007d24 <UART_SetConfig+0x210>
 8007d06:	2302      	movs	r3, #2
 8007d08:	77fb      	strb	r3, [r7, #31]
 8007d0a:	e00b      	b.n	8007d24 <UART_SetConfig+0x210>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	77fb      	strb	r3, [r7, #31]
 8007d10:	e008      	b.n	8007d24 <UART_SetConfig+0x210>
 8007d12:	2308      	movs	r3, #8
 8007d14:	77fb      	strb	r3, [r7, #31]
 8007d16:	e005      	b.n	8007d24 <UART_SetConfig+0x210>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	bf00      	nop
 8007d1e:	e001      	b.n	8007d24 <UART_SetConfig+0x210>
 8007d20:	2310      	movs	r3, #16
 8007d22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d2c:	d15d      	bne.n	8007dea <UART_SetConfig+0x2d6>
  {
    switch (clocksource)
 8007d2e:	7ffb      	ldrb	r3, [r7, #31]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d828      	bhi.n	8007d86 <UART_SetConfig+0x272>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <UART_SetConfig+0x228>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	08007d87 	.word	0x08007d87
 8007d4c:	08007d77 	.word	0x08007d77
 8007d50:	08007d87 	.word	0x08007d87
 8007d54:	08007d87 	.word	0x08007d87
 8007d58:	08007d87 	.word	0x08007d87
 8007d5c:	08007d7f 	.word	0x08007d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d60:	f7fe fc70 	bl	8006644 <HAL_RCC_GetPCLK1Freq>
 8007d64:	61b8      	str	r0, [r7, #24]
        break;
 8007d66:	e013      	b.n	8007d90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d68:	f7fe fc8e 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
 8007d6c:	61b8      	str	r0, [r7, #24]
        break;
 8007d6e:	e00f      	b.n	8007d90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d70:	4b3a      	ldr	r3, [pc, #232]	; (8007e5c <UART_SetConfig+0x348>)
 8007d72:	61bb      	str	r3, [r7, #24]
        break;
 8007d74:	e00c      	b.n	8007d90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d76:	f7fe fbef 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8007d7a:	61b8      	str	r0, [r7, #24]
        break;
 8007d7c:	e008      	b.n	8007d90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d82:	61bb      	str	r3, [r7, #24]
        break;
 8007d84:	e004      	b.n	8007d90 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	77bb      	strb	r3, [r7, #30]
        break;
 8007d8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8085 	beq.w	8007ea2 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	005a      	lsls	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	085b      	lsrs	r3, r3, #1
 8007da2:	441a      	add	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2b0f      	cmp	r3, #15
 8007db4:	d916      	bls.n	8007de4 <UART_SetConfig+0x2d0>
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dbc:	d212      	bcs.n	8007de4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f023 030f 	bic.w	r3, r3, #15
 8007dc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	085b      	lsrs	r3, r3, #1
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	89fa      	ldrh	r2, [r7, #14]
 8007de0:	60da      	str	r2, [r3, #12]
 8007de2:	e05e      	b.n	8007ea2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	77bb      	strb	r3, [r7, #30]
 8007de8:	e05b      	b.n	8007ea2 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dea:	7ffb      	ldrb	r3, [r7, #31]
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d837      	bhi.n	8007e60 <UART_SetConfig+0x34c>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <UART_SetConfig+0x2e4>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e1d 	.word	0x08007e1d
 8007dfc:	08007e25 	.word	0x08007e25
 8007e00:	08007e2d 	.word	0x08007e2d
 8007e04:	08007e61 	.word	0x08007e61
 8007e08:	08007e33 	.word	0x08007e33
 8007e0c:	08007e61 	.word	0x08007e61
 8007e10:	08007e61 	.word	0x08007e61
 8007e14:	08007e61 	.word	0x08007e61
 8007e18:	08007e3b 	.word	0x08007e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e1c:	f7fe fc12 	bl	8006644 <HAL_RCC_GetPCLK1Freq>
 8007e20:	61b8      	str	r0, [r7, #24]
        break;
 8007e22:	e022      	b.n	8007e6a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e24:	f7fe fc30 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
 8007e28:	61b8      	str	r0, [r7, #24]
        break;
 8007e2a:	e01e      	b.n	8007e6a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <UART_SetConfig+0x348>)
 8007e2e:	61bb      	str	r3, [r7, #24]
        break;
 8007e30:	e01b      	b.n	8007e6a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e32:	f7fe fb91 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8007e36:	61b8      	str	r0, [r7, #24]
        break;
 8007e38:	e017      	b.n	8007e6a <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3e:	61bb      	str	r3, [r7, #24]
        break;
 8007e40:	e013      	b.n	8007e6a <UART_SetConfig+0x356>
 8007e42:	bf00      	nop
 8007e44:	40013800 	.word	0x40013800
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	40004400 	.word	0x40004400
 8007e50:	40004800 	.word	0x40004800
 8007e54:	40004c00 	.word	0x40004c00
 8007e58:	40005000 	.word	0x40005000
 8007e5c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	77bb      	strb	r3, [r7, #30]
        break;
 8007e68:	bf00      	nop
    }

    if (pclk != 0U)
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d018      	beq.n	8007ea2 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	085a      	lsrs	r2, r3, #1
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	441a      	add	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b0f      	cmp	r3, #15
 8007e8a:	d908      	bls.n	8007e9e <UART_SetConfig+0x38a>
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e92:	d204      	bcs.n	8007e9e <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = usartdiv;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	60da      	str	r2, [r3, #12]
 8007e9c:	e001      	b.n	8007ea2 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007eae:	7fbb      	ldrb	r3, [r7, #30]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	f003 0308 	and.w	r3, r3, #8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d01a      	beq.n	8007fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fb6:	d10a      	bne.n	8007fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	605a      	str	r2, [r3, #4]
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800800c:	f7fb f978 	bl	8003300 <HAL_GetTick>
 8008010:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b08      	cmp	r3, #8
 800801e:	d10e      	bne.n	800803e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f82d 	bl	800808e <UART_WaitOnFlagUntilTimeout>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e023      	b.n	8008086 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b04      	cmp	r3, #4
 800804a:	d10e      	bne.n	800806a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f817 	bl	800808e <UART_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e00d      	b.n	8008086 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	603b      	str	r3, [r7, #0]
 800809a:	4613      	mov	r3, r2
 800809c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809e:	e05e      	b.n	800815e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d05a      	beq.n	800815e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a8:	f7fb f92a 	bl	8003300 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d302      	bcc.n	80080be <UART_WaitOnFlagUntilTimeout+0x30>
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d11b      	bne.n	80080f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2220      	movs	r2, #32
 80080e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e043      	b.n	800817e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02c      	beq.n	800815e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800810e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008112:	d124      	bne.n	800815e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800811c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800812c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0201 	bic.w	r2, r2, #1
 800813c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e00f      	b.n	800817e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4013      	ands	r3, r2
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	bf0c      	ite	eq
 800816e:	2301      	moveq	r3, #1
 8008170:	2300      	movne	r3, #0
 8008172:	b2db      	uxtb	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	429a      	cmp	r2, r3
 800817a:	d091      	beq.n	80080a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	88fa      	ldrh	r2, [r7, #6]
 80081a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	88fa      	ldrh	r2, [r7, #6]
 80081a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ba:	d10e      	bne.n	80081da <UART_Start_Receive_IT+0x52>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <UART_Start_Receive_IT+0x48>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081ce:	e01a      	b.n	8008206 <UART_Start_Receive_IT+0x7e>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	22ff      	movs	r2, #255	; 0xff
 80081d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081d8:	e015      	b.n	8008206 <UART_Start_Receive_IT+0x7e>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10d      	bne.n	80081fe <UART_Start_Receive_IT+0x76>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <UART_Start_Receive_IT+0x6c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	22ff      	movs	r2, #255	; 0xff
 80081ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081f2:	e008      	b.n	8008206 <UART_Start_Receive_IT+0x7e>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	227f      	movs	r2, #127	; 0x7f
 80081f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081fc:	e003      	b.n	8008206 <UART_Start_Receive_IT+0x7e>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2222      	movs	r2, #34	; 0x22
 8008212:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0201 	orr.w	r2, r2, #1
 8008222:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822c:	d107      	bne.n	800823e <UART_Start_Receive_IT+0xb6>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <UART_Start_Receive_IT+0xb6>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a0c      	ldr	r2, [pc, #48]	; (800826c <UART_Start_Receive_IT+0xe4>)
 800823a:	665a      	str	r2, [r3, #100]	; 0x64
 800823c:	e002      	b.n	8008244 <UART_Start_Receive_IT+0xbc>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a0b      	ldr	r2, [pc, #44]	; (8008270 <UART_Start_Receive_IT+0xe8>)
 8008242:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800825a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	08008405 	.word	0x08008405
 8008270:	08008331 	.word	0x08008331

08008274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800828a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0201 	bic.w	r2, r2, #1
 800829a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d107      	bne.n	80082b4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0210 	bic.w	r2, r2, #16
 80082b2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fbf9 	bl	8007ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008314:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fbd6 	bl	8007ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800833e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008344:	2b22      	cmp	r3, #34	; 0x22
 8008346:	d151      	bne.n	80083ec <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800834e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008350:	89bb      	ldrh	r3, [r7, #12]
 8008352:	b2d9      	uxtb	r1, r3
 8008354:	89fb      	ldrh	r3, [r7, #14]
 8008356:	b2da      	uxtb	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835c:	400a      	ands	r2, r1
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008384:	b29b      	uxth	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d138      	bne.n	80083fc <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008398:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 0201 	bic.w	r2, r2, #1
 80083a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d10f      	bne.n	80083de <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0210 	bic.w	r2, r2, #16
 80083cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7ff fb90 	bl	8007afc <HAL_UARTEx_RxEventCallback>
 80083dc:	e002      	b.n	80083e4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7f9 fa78 	bl	80018d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083ea:	e007      	b.n	80083fc <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0208 	orr.w	r2, r2, #8
 80083fa:	619a      	str	r2, [r3, #24]
}
 80083fc:	bf00      	nop
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008412:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008418:	2b22      	cmp	r3, #34	; 0x22
 800841a:	d151      	bne.n	80084c0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008422:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008428:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800842a:	89ba      	ldrh	r2, [r7, #12]
 800842c:	89fb      	ldrh	r3, [r7, #14]
 800842e:	4013      	ands	r3, r2
 8008430:	b29a      	uxth	r2, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	1c9a      	adds	r2, r3, #2
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008446:	b29b      	uxth	r3, r3
 8008448:	3b01      	subs	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d138      	bne.n	80084d0 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800846c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 0201 	bic.w	r2, r2, #1
 800847c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848e:	2b01      	cmp	r3, #1
 8008490:	d10f      	bne.n	80084b2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0210 	bic.w	r2, r2, #16
 80084a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff fb26 	bl	8007afc <HAL_UARTEx_RxEventCallback>
 80084b0:	e002      	b.n	80084b8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7f9 fa0e 	bl	80018d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084be:	e007      	b.n	80084d0 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0208 	orr.w	r2, r2, #8
 80084ce:	619a      	str	r2, [r3, #24]
}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80084f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80084f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	b29b      	uxth	r3, r3
 8008506:	43db      	mvns	r3, r3
 8008508:	b29b      	uxth	r3, r3
 800850a:	4013      	ands	r3, r2
 800850c:	b29a      	uxth	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008522:	b084      	sub	sp, #16
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	f107 0014 	add.w	r0, r7, #20
 8008530:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	b004      	add	sp, #16
 8008562:	4770      	bx	lr

08008564 <__errno>:
 8008564:	4b01      	ldr	r3, [pc, #4]	; (800856c <__errno+0x8>)
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20000074 	.word	0x20000074

08008570 <__libc_init_array>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4e0d      	ldr	r6, [pc, #52]	; (80085a8 <__libc_init_array+0x38>)
 8008574:	4c0d      	ldr	r4, [pc, #52]	; (80085ac <__libc_init_array+0x3c>)
 8008576:	1ba4      	subs	r4, r4, r6
 8008578:	10a4      	asrs	r4, r4, #2
 800857a:	2500      	movs	r5, #0
 800857c:	42a5      	cmp	r5, r4
 800857e:	d109      	bne.n	8008594 <__libc_init_array+0x24>
 8008580:	4e0b      	ldr	r6, [pc, #44]	; (80085b0 <__libc_init_array+0x40>)
 8008582:	4c0c      	ldr	r4, [pc, #48]	; (80085b4 <__libc_init_array+0x44>)
 8008584:	f003 fdae 	bl	800c0e4 <_init>
 8008588:	1ba4      	subs	r4, r4, r6
 800858a:	10a4      	asrs	r4, r4, #2
 800858c:	2500      	movs	r5, #0
 800858e:	42a5      	cmp	r5, r4
 8008590:	d105      	bne.n	800859e <__libc_init_array+0x2e>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008598:	4798      	blx	r3
 800859a:	3501      	adds	r5, #1
 800859c:	e7ee      	b.n	800857c <__libc_init_array+0xc>
 800859e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085a2:	4798      	blx	r3
 80085a4:	3501      	adds	r5, #1
 80085a6:	e7f2      	b.n	800858e <__libc_init_array+0x1e>
 80085a8:	0800c460 	.word	0x0800c460
 80085ac:	0800c460 	.word	0x0800c460
 80085b0:	0800c460 	.word	0x0800c460
 80085b4:	0800c464 	.word	0x0800c464

080085b8 <memset>:
 80085b8:	4402      	add	r2, r0
 80085ba:	4603      	mov	r3, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <memset+0xa>
 80085c0:	4770      	bx	lr
 80085c2:	f803 1b01 	strb.w	r1, [r3], #1
 80085c6:	e7f9      	b.n	80085bc <memset+0x4>

080085c8 <__cvt>:
 80085c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	ec55 4b10 	vmov	r4, r5, d0
 80085d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80085d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	460e      	mov	r6, r1
 80085da:	4691      	mov	r9, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	bfb8      	it	lt
 80085e0:	4622      	movlt	r2, r4
 80085e2:	462b      	mov	r3, r5
 80085e4:	f027 0720 	bic.w	r7, r7, #32
 80085e8:	bfbb      	ittet	lt
 80085ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085ee:	461d      	movlt	r5, r3
 80085f0:	2300      	movge	r3, #0
 80085f2:	232d      	movlt	r3, #45	; 0x2d
 80085f4:	bfb8      	it	lt
 80085f6:	4614      	movlt	r4, r2
 80085f8:	2f46      	cmp	r7, #70	; 0x46
 80085fa:	700b      	strb	r3, [r1, #0]
 80085fc:	d004      	beq.n	8008608 <__cvt+0x40>
 80085fe:	2f45      	cmp	r7, #69	; 0x45
 8008600:	d100      	bne.n	8008604 <__cvt+0x3c>
 8008602:	3601      	adds	r6, #1
 8008604:	2102      	movs	r1, #2
 8008606:	e000      	b.n	800860a <__cvt+0x42>
 8008608:	2103      	movs	r1, #3
 800860a:	ab03      	add	r3, sp, #12
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	ab02      	add	r3, sp, #8
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4632      	mov	r2, r6
 8008614:	4653      	mov	r3, sl
 8008616:	ec45 4b10 	vmov	d0, r4, r5
 800861a:	f001 fdcd 	bl	800a1b8 <_dtoa_r>
 800861e:	2f47      	cmp	r7, #71	; 0x47
 8008620:	4680      	mov	r8, r0
 8008622:	d102      	bne.n	800862a <__cvt+0x62>
 8008624:	f019 0f01 	tst.w	r9, #1
 8008628:	d026      	beq.n	8008678 <__cvt+0xb0>
 800862a:	2f46      	cmp	r7, #70	; 0x46
 800862c:	eb08 0906 	add.w	r9, r8, r6
 8008630:	d111      	bne.n	8008656 <__cvt+0x8e>
 8008632:	f898 3000 	ldrb.w	r3, [r8]
 8008636:	2b30      	cmp	r3, #48	; 0x30
 8008638:	d10a      	bne.n	8008650 <__cvt+0x88>
 800863a:	2200      	movs	r2, #0
 800863c:	2300      	movs	r3, #0
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	f7f8 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008646:	b918      	cbnz	r0, 8008650 <__cvt+0x88>
 8008648:	f1c6 0601 	rsb	r6, r6, #1
 800864c:	f8ca 6000 	str.w	r6, [sl]
 8008650:	f8da 3000 	ldr.w	r3, [sl]
 8008654:	4499      	add	r9, r3
 8008656:	2200      	movs	r2, #0
 8008658:	2300      	movs	r3, #0
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	f7f8 fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8008662:	b938      	cbnz	r0, 8008674 <__cvt+0xac>
 8008664:	2230      	movs	r2, #48	; 0x30
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	454b      	cmp	r3, r9
 800866a:	d205      	bcs.n	8008678 <__cvt+0xb0>
 800866c:	1c59      	adds	r1, r3, #1
 800866e:	9103      	str	r1, [sp, #12]
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	e7f8      	b.n	8008666 <__cvt+0x9e>
 8008674:	f8cd 900c 	str.w	r9, [sp, #12]
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800867c:	eba3 0308 	sub.w	r3, r3, r8
 8008680:	4640      	mov	r0, r8
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	b004      	add	sp, #16
 8008686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800868a <__exponent>:
 800868a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800868c:	2900      	cmp	r1, #0
 800868e:	4604      	mov	r4, r0
 8008690:	bfba      	itte	lt
 8008692:	4249      	neglt	r1, r1
 8008694:	232d      	movlt	r3, #45	; 0x2d
 8008696:	232b      	movge	r3, #43	; 0x2b
 8008698:	2909      	cmp	r1, #9
 800869a:	f804 2b02 	strb.w	r2, [r4], #2
 800869e:	7043      	strb	r3, [r0, #1]
 80086a0:	dd20      	ble.n	80086e4 <__exponent+0x5a>
 80086a2:	f10d 0307 	add.w	r3, sp, #7
 80086a6:	461f      	mov	r7, r3
 80086a8:	260a      	movs	r6, #10
 80086aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80086ae:	fb06 1115 	mls	r1, r6, r5, r1
 80086b2:	3130      	adds	r1, #48	; 0x30
 80086b4:	2d09      	cmp	r5, #9
 80086b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80086be:	4629      	mov	r1, r5
 80086c0:	dc09      	bgt.n	80086d6 <__exponent+0x4c>
 80086c2:	3130      	adds	r1, #48	; 0x30
 80086c4:	3b02      	subs	r3, #2
 80086c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086ca:	42bb      	cmp	r3, r7
 80086cc:	4622      	mov	r2, r4
 80086ce:	d304      	bcc.n	80086da <__exponent+0x50>
 80086d0:	1a10      	subs	r0, r2, r0
 80086d2:	b003      	add	sp, #12
 80086d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d6:	4613      	mov	r3, r2
 80086d8:	e7e7      	b.n	80086aa <__exponent+0x20>
 80086da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086de:	f804 2b01 	strb.w	r2, [r4], #1
 80086e2:	e7f2      	b.n	80086ca <__exponent+0x40>
 80086e4:	2330      	movs	r3, #48	; 0x30
 80086e6:	4419      	add	r1, r3
 80086e8:	7083      	strb	r3, [r0, #2]
 80086ea:	1d02      	adds	r2, r0, #4
 80086ec:	70c1      	strb	r1, [r0, #3]
 80086ee:	e7ef      	b.n	80086d0 <__exponent+0x46>

080086f0 <_printf_float>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	b08d      	sub	sp, #52	; 0x34
 80086f6:	460c      	mov	r4, r1
 80086f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80086fc:	4616      	mov	r6, r2
 80086fe:	461f      	mov	r7, r3
 8008700:	4605      	mov	r5, r0
 8008702:	f002 fe3d 	bl	800b380 <_localeconv_r>
 8008706:	6803      	ldr	r3, [r0, #0]
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	4618      	mov	r0, r3
 800870c:	f7f7 fd60 	bl	80001d0 <strlen>
 8008710:	2300      	movs	r3, #0
 8008712:	930a      	str	r3, [sp, #40]	; 0x28
 8008714:	f8d8 3000 	ldr.w	r3, [r8]
 8008718:	9005      	str	r0, [sp, #20]
 800871a:	3307      	adds	r3, #7
 800871c:	f023 0307 	bic.w	r3, r3, #7
 8008720:	f103 0208 	add.w	r2, r3, #8
 8008724:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008728:	f8d4 b000 	ldr.w	fp, [r4]
 800872c:	f8c8 2000 	str.w	r2, [r8]
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008738:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800873c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008740:	9307      	str	r3, [sp, #28]
 8008742:	f8cd 8018 	str.w	r8, [sp, #24]
 8008746:	f04f 32ff 	mov.w	r2, #4294967295
 800874a:	4ba7      	ldr	r3, [pc, #668]	; (80089e8 <_printf_float+0x2f8>)
 800874c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008750:	f7f8 f9ec 	bl	8000b2c <__aeabi_dcmpun>
 8008754:	bb70      	cbnz	r0, 80087b4 <_printf_float+0xc4>
 8008756:	f04f 32ff 	mov.w	r2, #4294967295
 800875a:	4ba3      	ldr	r3, [pc, #652]	; (80089e8 <_printf_float+0x2f8>)
 800875c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008760:	f7f8 f9c6 	bl	8000af0 <__aeabi_dcmple>
 8008764:	bb30      	cbnz	r0, 80087b4 <_printf_float+0xc4>
 8008766:	2200      	movs	r2, #0
 8008768:	2300      	movs	r3, #0
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f8 f9b5 	bl	8000adc <__aeabi_dcmplt>
 8008772:	b110      	cbz	r0, 800877a <_printf_float+0x8a>
 8008774:	232d      	movs	r3, #45	; 0x2d
 8008776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800877a:	4a9c      	ldr	r2, [pc, #624]	; (80089ec <_printf_float+0x2fc>)
 800877c:	4b9c      	ldr	r3, [pc, #624]	; (80089f0 <_printf_float+0x300>)
 800877e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008782:	bf8c      	ite	hi
 8008784:	4690      	movhi	r8, r2
 8008786:	4698      	movls	r8, r3
 8008788:	2303      	movs	r3, #3
 800878a:	f02b 0204 	bic.w	r2, fp, #4
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	6022      	str	r2, [r4, #0]
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	9700      	str	r7, [sp, #0]
 8008798:	4633      	mov	r3, r6
 800879a:	aa0b      	add	r2, sp, #44	; 0x2c
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 f9e6 	bl	8008b70 <_printf_common>
 80087a4:	3001      	adds	r0, #1
 80087a6:	f040 808d 	bne.w	80088c4 <_printf_float+0x1d4>
 80087aa:	f04f 30ff 	mov.w	r0, #4294967295
 80087ae:	b00d      	add	sp, #52	; 0x34
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	4642      	mov	r2, r8
 80087b6:	464b      	mov	r3, r9
 80087b8:	4640      	mov	r0, r8
 80087ba:	4649      	mov	r1, r9
 80087bc:	f7f8 f9b6 	bl	8000b2c <__aeabi_dcmpun>
 80087c0:	b110      	cbz	r0, 80087c8 <_printf_float+0xd8>
 80087c2:	4a8c      	ldr	r2, [pc, #560]	; (80089f4 <_printf_float+0x304>)
 80087c4:	4b8c      	ldr	r3, [pc, #560]	; (80089f8 <_printf_float+0x308>)
 80087c6:	e7da      	b.n	800877e <_printf_float+0x8e>
 80087c8:	6861      	ldr	r1, [r4, #4]
 80087ca:	1c4b      	adds	r3, r1, #1
 80087cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80087d0:	a80a      	add	r0, sp, #40	; 0x28
 80087d2:	d13e      	bne.n	8008852 <_printf_float+0x162>
 80087d4:	2306      	movs	r3, #6
 80087d6:	6063      	str	r3, [r4, #4]
 80087d8:	2300      	movs	r3, #0
 80087da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087de:	ab09      	add	r3, sp, #36	; 0x24
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	ec49 8b10 	vmov	d0, r8, r9
 80087e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087ea:	6022      	str	r2, [r4, #0]
 80087ec:	f8cd a004 	str.w	sl, [sp, #4]
 80087f0:	6861      	ldr	r1, [r4, #4]
 80087f2:	4628      	mov	r0, r5
 80087f4:	f7ff fee8 	bl	80085c8 <__cvt>
 80087f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80087fc:	2b47      	cmp	r3, #71	; 0x47
 80087fe:	4680      	mov	r8, r0
 8008800:	d109      	bne.n	8008816 <_printf_float+0x126>
 8008802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008804:	1cd8      	adds	r0, r3, #3
 8008806:	db02      	blt.n	800880e <_printf_float+0x11e>
 8008808:	6862      	ldr	r2, [r4, #4]
 800880a:	4293      	cmp	r3, r2
 800880c:	dd47      	ble.n	800889e <_printf_float+0x1ae>
 800880e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008812:	fa5f fa8a 	uxtb.w	sl, sl
 8008816:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800881a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800881c:	d824      	bhi.n	8008868 <_printf_float+0x178>
 800881e:	3901      	subs	r1, #1
 8008820:	4652      	mov	r2, sl
 8008822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008826:	9109      	str	r1, [sp, #36]	; 0x24
 8008828:	f7ff ff2f 	bl	800868a <__exponent>
 800882c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800882e:	1813      	adds	r3, r2, r0
 8008830:	2a01      	cmp	r2, #1
 8008832:	4681      	mov	r9, r0
 8008834:	6123      	str	r3, [r4, #16]
 8008836:	dc02      	bgt.n	800883e <_printf_float+0x14e>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	07d1      	lsls	r1, r2, #31
 800883c:	d501      	bpl.n	8008842 <_printf_float+0x152>
 800883e:	3301      	adds	r3, #1
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0a5      	beq.n	8008796 <_printf_float+0xa6>
 800884a:	232d      	movs	r3, #45	; 0x2d
 800884c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008850:	e7a1      	b.n	8008796 <_printf_float+0xa6>
 8008852:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008856:	f000 8177 	beq.w	8008b48 <_printf_float+0x458>
 800885a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800885e:	d1bb      	bne.n	80087d8 <_printf_float+0xe8>
 8008860:	2900      	cmp	r1, #0
 8008862:	d1b9      	bne.n	80087d8 <_printf_float+0xe8>
 8008864:	2301      	movs	r3, #1
 8008866:	e7b6      	b.n	80087d6 <_printf_float+0xe6>
 8008868:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800886c:	d119      	bne.n	80088a2 <_printf_float+0x1b2>
 800886e:	2900      	cmp	r1, #0
 8008870:	6863      	ldr	r3, [r4, #4]
 8008872:	dd0c      	ble.n	800888e <_printf_float+0x19e>
 8008874:	6121      	str	r1, [r4, #16]
 8008876:	b913      	cbnz	r3, 800887e <_printf_float+0x18e>
 8008878:	6822      	ldr	r2, [r4, #0]
 800887a:	07d2      	lsls	r2, r2, #31
 800887c:	d502      	bpl.n	8008884 <_printf_float+0x194>
 800887e:	3301      	adds	r3, #1
 8008880:	440b      	add	r3, r1
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008886:	65a3      	str	r3, [r4, #88]	; 0x58
 8008888:	f04f 0900 	mov.w	r9, #0
 800888c:	e7d9      	b.n	8008842 <_printf_float+0x152>
 800888e:	b913      	cbnz	r3, 8008896 <_printf_float+0x1a6>
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	07d0      	lsls	r0, r2, #31
 8008894:	d501      	bpl.n	800889a <_printf_float+0x1aa>
 8008896:	3302      	adds	r3, #2
 8008898:	e7f3      	b.n	8008882 <_printf_float+0x192>
 800889a:	2301      	movs	r3, #1
 800889c:	e7f1      	b.n	8008882 <_printf_float+0x192>
 800889e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80088a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088a6:	4293      	cmp	r3, r2
 80088a8:	db05      	blt.n	80088b6 <_printf_float+0x1c6>
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	07d1      	lsls	r1, r2, #31
 80088b0:	d5e8      	bpl.n	8008884 <_printf_float+0x194>
 80088b2:	3301      	adds	r3, #1
 80088b4:	e7e5      	b.n	8008882 <_printf_float+0x192>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfd4      	ite	le
 80088ba:	f1c3 0302 	rsble	r3, r3, #2
 80088be:	2301      	movgt	r3, #1
 80088c0:	4413      	add	r3, r2
 80088c2:	e7de      	b.n	8008882 <_printf_float+0x192>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	055a      	lsls	r2, r3, #21
 80088c8:	d407      	bmi.n	80088da <_printf_float+0x1ea>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	4642      	mov	r2, r8
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d12b      	bne.n	8008930 <_printf_float+0x240>
 80088d8:	e767      	b.n	80087aa <_printf_float+0xba>
 80088da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80088de:	f240 80dc 	bls.w	8008a9a <_printf_float+0x3aa>
 80088e2:	2200      	movs	r2, #0
 80088e4:	2300      	movs	r3, #0
 80088e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ea:	f7f8 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d033      	beq.n	800895a <_printf_float+0x26a>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4a41      	ldr	r2, [pc, #260]	; (80089fc <_printf_float+0x30c>)
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	f43f af54 	beq.w	80087aa <_printf_float+0xba>
 8008902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008906:	429a      	cmp	r2, r3
 8008908:	db02      	blt.n	8008910 <_printf_float+0x220>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	07d8      	lsls	r0, r3, #31
 800890e:	d50f      	bpl.n	8008930 <_printf_float+0x240>
 8008910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	f43f af45 	beq.w	80087aa <_printf_float+0xba>
 8008920:	f04f 0800 	mov.w	r8, #0
 8008924:	f104 091a 	add.w	r9, r4, #26
 8008928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892a:	3b01      	subs	r3, #1
 800892c:	4543      	cmp	r3, r8
 800892e:	dc09      	bgt.n	8008944 <_printf_float+0x254>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	079b      	lsls	r3, r3, #30
 8008934:	f100 8103 	bmi.w	8008b3e <_printf_float+0x44e>
 8008938:	68e0      	ldr	r0, [r4, #12]
 800893a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800893c:	4298      	cmp	r0, r3
 800893e:	bfb8      	it	lt
 8008940:	4618      	movlt	r0, r3
 8008942:	e734      	b.n	80087ae <_printf_float+0xbe>
 8008944:	2301      	movs	r3, #1
 8008946:	464a      	mov	r2, r9
 8008948:	4631      	mov	r1, r6
 800894a:	4628      	mov	r0, r5
 800894c:	47b8      	blx	r7
 800894e:	3001      	adds	r0, #1
 8008950:	f43f af2b 	beq.w	80087aa <_printf_float+0xba>
 8008954:	f108 0801 	add.w	r8, r8, #1
 8008958:	e7e6      	b.n	8008928 <_printf_float+0x238>
 800895a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	dc2b      	bgt.n	80089b8 <_printf_float+0x2c8>
 8008960:	2301      	movs	r3, #1
 8008962:	4a26      	ldr	r2, [pc, #152]	; (80089fc <_printf_float+0x30c>)
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af1d 	beq.w	80087aa <_printf_float+0xba>
 8008970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008972:	b923      	cbnz	r3, 800897e <_printf_float+0x28e>
 8008974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008976:	b913      	cbnz	r3, 800897e <_printf_float+0x28e>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	07d9      	lsls	r1, r3, #31
 800897c:	d5d8      	bpl.n	8008930 <_printf_float+0x240>
 800897e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f af0e 	beq.w	80087aa <_printf_float+0xba>
 800898e:	f04f 0900 	mov.w	r9, #0
 8008992:	f104 0a1a 	add.w	sl, r4, #26
 8008996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008998:	425b      	negs	r3, r3
 800899a:	454b      	cmp	r3, r9
 800899c:	dc01      	bgt.n	80089a2 <_printf_float+0x2b2>
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	e794      	b.n	80088cc <_printf_float+0x1dc>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4652      	mov	r2, sl
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	f43f aefc 	beq.w	80087aa <_printf_float+0xba>
 80089b2:	f109 0901 	add.w	r9, r9, #1
 80089b6:	e7ee      	b.n	8008996 <_printf_float+0x2a6>
 80089b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089bc:	429a      	cmp	r2, r3
 80089be:	bfa8      	it	ge
 80089c0:	461a      	movge	r2, r3
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	4691      	mov	r9, r2
 80089c6:	dd07      	ble.n	80089d8 <_printf_float+0x2e8>
 80089c8:	4613      	mov	r3, r2
 80089ca:	4631      	mov	r1, r6
 80089cc:	4642      	mov	r2, r8
 80089ce:	4628      	mov	r0, r5
 80089d0:	47b8      	blx	r7
 80089d2:	3001      	adds	r0, #1
 80089d4:	f43f aee9 	beq.w	80087aa <_printf_float+0xba>
 80089d8:	f104 031a 	add.w	r3, r4, #26
 80089dc:	f04f 0b00 	mov.w	fp, #0
 80089e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	e015      	b.n	8008a14 <_printf_float+0x324>
 80089e8:	7fefffff 	.word	0x7fefffff
 80089ec:	0800c1ac 	.word	0x0800c1ac
 80089f0:	0800c1a8 	.word	0x0800c1a8
 80089f4:	0800c1b4 	.word	0x0800c1b4
 80089f8:	0800c1b0 	.word	0x0800c1b0
 80089fc:	0800c1b8 	.word	0x0800c1b8
 8008a00:	2301      	movs	r3, #1
 8008a02:	9a06      	ldr	r2, [sp, #24]
 8008a04:	4631      	mov	r1, r6
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b8      	blx	r7
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	f43f aecd 	beq.w	80087aa <_printf_float+0xba>
 8008a10:	f10b 0b01 	add.w	fp, fp, #1
 8008a14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008a18:	ebaa 0309 	sub.w	r3, sl, r9
 8008a1c:	455b      	cmp	r3, fp
 8008a1e:	dcef      	bgt.n	8008a00 <_printf_float+0x310>
 8008a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a24:	429a      	cmp	r2, r3
 8008a26:	44d0      	add	r8, sl
 8008a28:	db15      	blt.n	8008a56 <_printf_float+0x366>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	07da      	lsls	r2, r3, #31
 8008a2e:	d412      	bmi.n	8008a56 <_printf_float+0x366>
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a34:	eba3 020a 	sub.w	r2, r3, sl
 8008a38:	eba3 0a01 	sub.w	sl, r3, r1
 8008a3c:	4592      	cmp	sl, r2
 8008a3e:	bfa8      	it	ge
 8008a40:	4692      	movge	sl, r2
 8008a42:	f1ba 0f00 	cmp.w	sl, #0
 8008a46:	dc0e      	bgt.n	8008a66 <_printf_float+0x376>
 8008a48:	f04f 0800 	mov.w	r8, #0
 8008a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a50:	f104 091a 	add.w	r9, r4, #26
 8008a54:	e019      	b.n	8008a8a <_printf_float+0x39a>
 8008a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	d1e5      	bne.n	8008a30 <_printf_float+0x340>
 8008a64:	e6a1      	b.n	80087aa <_printf_float+0xba>
 8008a66:	4653      	mov	r3, sl
 8008a68:	4642      	mov	r2, r8
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	d1e9      	bne.n	8008a48 <_printf_float+0x358>
 8008a74:	e699      	b.n	80087aa <_printf_float+0xba>
 8008a76:	2301      	movs	r3, #1
 8008a78:	464a      	mov	r2, r9
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	f43f ae92 	beq.w	80087aa <_printf_float+0xba>
 8008a86:	f108 0801 	add.w	r8, r8, #1
 8008a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	eba3 030a 	sub.w	r3, r3, sl
 8008a94:	4543      	cmp	r3, r8
 8008a96:	dcee      	bgt.n	8008a76 <_printf_float+0x386>
 8008a98:	e74a      	b.n	8008930 <_printf_float+0x240>
 8008a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a9c:	2a01      	cmp	r2, #1
 8008a9e:	dc01      	bgt.n	8008aa4 <_printf_float+0x3b4>
 8008aa0:	07db      	lsls	r3, r3, #31
 8008aa2:	d53a      	bpl.n	8008b1a <_printf_float+0x42a>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4642      	mov	r2, r8
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f ae7b 	beq.w	80087aa <_printf_float+0xba>
 8008ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f108 0801 	add.w	r8, r8, #1
 8008ac4:	f43f ae71 	beq.w	80087aa <_printf_float+0xba>
 8008ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aca:	2200      	movs	r2, #0
 8008acc:	f103 3aff 	add.w	sl, r3, #4294967295
 8008ad0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f7f7 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ada:	b9c8      	cbnz	r0, 8008b10 <_printf_float+0x420>
 8008adc:	4653      	mov	r3, sl
 8008ade:	4642      	mov	r2, r8
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d10e      	bne.n	8008b08 <_printf_float+0x418>
 8008aea:	e65e      	b.n	80087aa <_printf_float+0xba>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4652      	mov	r2, sl
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	f43f ae57 	beq.w	80087aa <_printf_float+0xba>
 8008afc:	f108 0801 	add.w	r8, r8, #1
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	3b01      	subs	r3, #1
 8008b04:	4543      	cmp	r3, r8
 8008b06:	dcf1      	bgt.n	8008aec <_printf_float+0x3fc>
 8008b08:	464b      	mov	r3, r9
 8008b0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b0e:	e6de      	b.n	80088ce <_printf_float+0x1de>
 8008b10:	f04f 0800 	mov.w	r8, #0
 8008b14:	f104 0a1a 	add.w	sl, r4, #26
 8008b18:	e7f2      	b.n	8008b00 <_printf_float+0x410>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e7df      	b.n	8008ade <_printf_float+0x3ee>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	464a      	mov	r2, r9
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f43f ae3e 	beq.w	80087aa <_printf_float+0xba>
 8008b2e:	f108 0801 	add.w	r8, r8, #1
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	4543      	cmp	r3, r8
 8008b3a:	dcf0      	bgt.n	8008b1e <_printf_float+0x42e>
 8008b3c:	e6fc      	b.n	8008938 <_printf_float+0x248>
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	f104 0919 	add.w	r9, r4, #25
 8008b46:	e7f4      	b.n	8008b32 <_printf_float+0x442>
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	f43f ae8b 	beq.w	8008864 <_printf_float+0x174>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008b54:	ab09      	add	r3, sp, #36	; 0x24
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	ec49 8b10 	vmov	d0, r8, r9
 8008b5c:	6022      	str	r2, [r4, #0]
 8008b5e:	f8cd a004 	str.w	sl, [sp, #4]
 8008b62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b66:	4628      	mov	r0, r5
 8008b68:	f7ff fd2e 	bl	80085c8 <__cvt>
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	e648      	b.n	8008802 <_printf_float+0x112>

08008b70 <_printf_common>:
 8008b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b74:	4691      	mov	r9, r2
 8008b76:	461f      	mov	r7, r3
 8008b78:	688a      	ldr	r2, [r1, #8]
 8008b7a:	690b      	ldr	r3, [r1, #16]
 8008b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b80:	4293      	cmp	r3, r2
 8008b82:	bfb8      	it	lt
 8008b84:	4613      	movlt	r3, r2
 8008b86:	f8c9 3000 	str.w	r3, [r9]
 8008b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460c      	mov	r4, r1
 8008b92:	b112      	cbz	r2, 8008b9a <_printf_common+0x2a>
 8008b94:	3301      	adds	r3, #1
 8008b96:	f8c9 3000 	str.w	r3, [r9]
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	0699      	lsls	r1, r3, #26
 8008b9e:	bf42      	ittt	mi
 8008ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ba4:	3302      	addmi	r3, #2
 8008ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8008baa:	6825      	ldr	r5, [r4, #0]
 8008bac:	f015 0506 	ands.w	r5, r5, #6
 8008bb0:	d107      	bne.n	8008bc2 <_printf_common+0x52>
 8008bb2:	f104 0a19 	add.w	sl, r4, #25
 8008bb6:	68e3      	ldr	r3, [r4, #12]
 8008bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	42ab      	cmp	r3, r5
 8008bc0:	dc28      	bgt.n	8008c14 <_printf_common+0xa4>
 8008bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	3300      	adds	r3, #0
 8008bca:	bf18      	it	ne
 8008bcc:	2301      	movne	r3, #1
 8008bce:	0692      	lsls	r2, r2, #26
 8008bd0:	d42d      	bmi.n	8008c2e <_printf_common+0xbe>
 8008bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	4630      	mov	r0, r6
 8008bda:	47c0      	blx	r8
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d020      	beq.n	8008c22 <_printf_common+0xb2>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	68e5      	ldr	r5, [r4, #12]
 8008be4:	f8d9 2000 	ldr.w	r2, [r9]
 8008be8:	f003 0306 	and.w	r3, r3, #6
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	bf08      	it	eq
 8008bf0:	1aad      	subeq	r5, r5, r2
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	bf0c      	ite	eq
 8008bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bfc:	2500      	movne	r5, #0
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	bfc4      	itt	gt
 8008c02:	1a9b      	subgt	r3, r3, r2
 8008c04:	18ed      	addgt	r5, r5, r3
 8008c06:	f04f 0900 	mov.w	r9, #0
 8008c0a:	341a      	adds	r4, #26
 8008c0c:	454d      	cmp	r5, r9
 8008c0e:	d11a      	bne.n	8008c46 <_printf_common+0xd6>
 8008c10:	2000      	movs	r0, #0
 8008c12:	e008      	b.n	8008c26 <_printf_common+0xb6>
 8008c14:	2301      	movs	r3, #1
 8008c16:	4652      	mov	r2, sl
 8008c18:	4639      	mov	r1, r7
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	47c0      	blx	r8
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d103      	bne.n	8008c2a <_printf_common+0xba>
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295
 8008c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2a:	3501      	adds	r5, #1
 8008c2c:	e7c3      	b.n	8008bb6 <_printf_common+0x46>
 8008c2e:	18e1      	adds	r1, r4, r3
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	2030      	movs	r0, #48	; 0x30
 8008c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c38:	4422      	add	r2, r4
 8008c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c42:	3302      	adds	r3, #2
 8008c44:	e7c5      	b.n	8008bd2 <_printf_common+0x62>
 8008c46:	2301      	movs	r3, #1
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	47c0      	blx	r8
 8008c50:	3001      	adds	r0, #1
 8008c52:	d0e6      	beq.n	8008c22 <_printf_common+0xb2>
 8008c54:	f109 0901 	add.w	r9, r9, #1
 8008c58:	e7d8      	b.n	8008c0c <_printf_common+0x9c>
	...

08008c5c <_printf_i>:
 8008c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c64:	460c      	mov	r4, r1
 8008c66:	7e09      	ldrb	r1, [r1, #24]
 8008c68:	b085      	sub	sp, #20
 8008c6a:	296e      	cmp	r1, #110	; 0x6e
 8008c6c:	4617      	mov	r7, r2
 8008c6e:	4606      	mov	r6, r0
 8008c70:	4698      	mov	r8, r3
 8008c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c74:	f000 80b3 	beq.w	8008dde <_printf_i+0x182>
 8008c78:	d822      	bhi.n	8008cc0 <_printf_i+0x64>
 8008c7a:	2963      	cmp	r1, #99	; 0x63
 8008c7c:	d036      	beq.n	8008cec <_printf_i+0x90>
 8008c7e:	d80a      	bhi.n	8008c96 <_printf_i+0x3a>
 8008c80:	2900      	cmp	r1, #0
 8008c82:	f000 80b9 	beq.w	8008df8 <_printf_i+0x19c>
 8008c86:	2958      	cmp	r1, #88	; 0x58
 8008c88:	f000 8083 	beq.w	8008d92 <_printf_i+0x136>
 8008c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c94:	e032      	b.n	8008cfc <_printf_i+0xa0>
 8008c96:	2964      	cmp	r1, #100	; 0x64
 8008c98:	d001      	beq.n	8008c9e <_printf_i+0x42>
 8008c9a:	2969      	cmp	r1, #105	; 0x69
 8008c9c:	d1f6      	bne.n	8008c8c <_printf_i+0x30>
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	6813      	ldr	r3, [r2, #0]
 8008ca2:	0605      	lsls	r5, r0, #24
 8008ca4:	f103 0104 	add.w	r1, r3, #4
 8008ca8:	d52a      	bpl.n	8008d00 <_printf_i+0xa4>
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6011      	str	r1, [r2, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	da03      	bge.n	8008cba <_printf_i+0x5e>
 8008cb2:	222d      	movs	r2, #45	; 0x2d
 8008cb4:	425b      	negs	r3, r3
 8008cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008cba:	486f      	ldr	r0, [pc, #444]	; (8008e78 <_printf_i+0x21c>)
 8008cbc:	220a      	movs	r2, #10
 8008cbe:	e039      	b.n	8008d34 <_printf_i+0xd8>
 8008cc0:	2973      	cmp	r1, #115	; 0x73
 8008cc2:	f000 809d 	beq.w	8008e00 <_printf_i+0x1a4>
 8008cc6:	d808      	bhi.n	8008cda <_printf_i+0x7e>
 8008cc8:	296f      	cmp	r1, #111	; 0x6f
 8008cca:	d020      	beq.n	8008d0e <_printf_i+0xb2>
 8008ccc:	2970      	cmp	r1, #112	; 0x70
 8008cce:	d1dd      	bne.n	8008c8c <_printf_i+0x30>
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	f043 0320 	orr.w	r3, r3, #32
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	e003      	b.n	8008ce2 <_printf_i+0x86>
 8008cda:	2975      	cmp	r1, #117	; 0x75
 8008cdc:	d017      	beq.n	8008d0e <_printf_i+0xb2>
 8008cde:	2978      	cmp	r1, #120	; 0x78
 8008ce0:	d1d4      	bne.n	8008c8c <_printf_i+0x30>
 8008ce2:	2378      	movs	r3, #120	; 0x78
 8008ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ce8:	4864      	ldr	r0, [pc, #400]	; (8008e7c <_printf_i+0x220>)
 8008cea:	e055      	b.n	8008d98 <_printf_i+0x13c>
 8008cec:	6813      	ldr	r3, [r2, #0]
 8008cee:	1d19      	adds	r1, r3, #4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6011      	str	r1, [r2, #0]
 8008cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e08c      	b.n	8008e1a <_printf_i+0x1be>
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6011      	str	r1, [r2, #0]
 8008d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d08:	bf18      	it	ne
 8008d0a:	b21b      	sxthne	r3, r3
 8008d0c:	e7cf      	b.n	8008cae <_printf_i+0x52>
 8008d0e:	6813      	ldr	r3, [r2, #0]
 8008d10:	6825      	ldr	r5, [r4, #0]
 8008d12:	1d18      	adds	r0, r3, #4
 8008d14:	6010      	str	r0, [r2, #0]
 8008d16:	0628      	lsls	r0, r5, #24
 8008d18:	d501      	bpl.n	8008d1e <_printf_i+0xc2>
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	e002      	b.n	8008d24 <_printf_i+0xc8>
 8008d1e:	0668      	lsls	r0, r5, #25
 8008d20:	d5fb      	bpl.n	8008d1a <_printf_i+0xbe>
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	4854      	ldr	r0, [pc, #336]	; (8008e78 <_printf_i+0x21c>)
 8008d26:	296f      	cmp	r1, #111	; 0x6f
 8008d28:	bf14      	ite	ne
 8008d2a:	220a      	movne	r2, #10
 8008d2c:	2208      	moveq	r2, #8
 8008d2e:	2100      	movs	r1, #0
 8008d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d34:	6865      	ldr	r5, [r4, #4]
 8008d36:	60a5      	str	r5, [r4, #8]
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	f2c0 8095 	blt.w	8008e68 <_printf_i+0x20c>
 8008d3e:	6821      	ldr	r1, [r4, #0]
 8008d40:	f021 0104 	bic.w	r1, r1, #4
 8008d44:	6021      	str	r1, [r4, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d13d      	bne.n	8008dc6 <_printf_i+0x16a>
 8008d4a:	2d00      	cmp	r5, #0
 8008d4c:	f040 808e 	bne.w	8008e6c <_printf_i+0x210>
 8008d50:	4665      	mov	r5, ip
 8008d52:	2a08      	cmp	r2, #8
 8008d54:	d10b      	bne.n	8008d6e <_printf_i+0x112>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	07db      	lsls	r3, r3, #31
 8008d5a:	d508      	bpl.n	8008d6e <_printf_i+0x112>
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	6862      	ldr	r2, [r4, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	bfde      	ittt	le
 8008d64:	2330      	movle	r3, #48	; 0x30
 8008d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d6e:	ebac 0305 	sub.w	r3, ip, r5
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	f8cd 8000 	str.w	r8, [sp]
 8008d78:	463b      	mov	r3, r7
 8008d7a:	aa03      	add	r2, sp, #12
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f7ff fef6 	bl	8008b70 <_printf_common>
 8008d84:	3001      	adds	r0, #1
 8008d86:	d14d      	bne.n	8008e24 <_printf_i+0x1c8>
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	b005      	add	sp, #20
 8008d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d92:	4839      	ldr	r0, [pc, #228]	; (8008e78 <_printf_i+0x21c>)
 8008d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d98:	6813      	ldr	r3, [r2, #0]
 8008d9a:	6821      	ldr	r1, [r4, #0]
 8008d9c:	1d1d      	adds	r5, r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6015      	str	r5, [r2, #0]
 8008da2:	060a      	lsls	r2, r1, #24
 8008da4:	d50b      	bpl.n	8008dbe <_printf_i+0x162>
 8008da6:	07ca      	lsls	r2, r1, #31
 8008da8:	bf44      	itt	mi
 8008daa:	f041 0120 	orrmi.w	r1, r1, #32
 8008dae:	6021      	strmi	r1, [r4, #0]
 8008db0:	b91b      	cbnz	r3, 8008dba <_printf_i+0x15e>
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	f022 0220 	bic.w	r2, r2, #32
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	2210      	movs	r2, #16
 8008dbc:	e7b7      	b.n	8008d2e <_printf_i+0xd2>
 8008dbe:	064d      	lsls	r5, r1, #25
 8008dc0:	bf48      	it	mi
 8008dc2:	b29b      	uxthmi	r3, r3
 8008dc4:	e7ef      	b.n	8008da6 <_printf_i+0x14a>
 8008dc6:	4665      	mov	r5, ip
 8008dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8008dd0:	5cc3      	ldrb	r3, [r0, r3]
 8008dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	d1f5      	bne.n	8008dc8 <_printf_i+0x16c>
 8008ddc:	e7b9      	b.n	8008d52 <_printf_i+0xf6>
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	6825      	ldr	r5, [r4, #0]
 8008de2:	6961      	ldr	r1, [r4, #20]
 8008de4:	1d18      	adds	r0, r3, #4
 8008de6:	6010      	str	r0, [r2, #0]
 8008de8:	0628      	lsls	r0, r5, #24
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	d501      	bpl.n	8008df2 <_printf_i+0x196>
 8008dee:	6019      	str	r1, [r3, #0]
 8008df0:	e002      	b.n	8008df8 <_printf_i+0x19c>
 8008df2:	066a      	lsls	r2, r5, #25
 8008df4:	d5fb      	bpl.n	8008dee <_printf_i+0x192>
 8008df6:	8019      	strh	r1, [r3, #0]
 8008df8:	2300      	movs	r3, #0
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	4665      	mov	r5, ip
 8008dfe:	e7b9      	b.n	8008d74 <_printf_i+0x118>
 8008e00:	6813      	ldr	r3, [r2, #0]
 8008e02:	1d19      	adds	r1, r3, #4
 8008e04:	6011      	str	r1, [r2, #0]
 8008e06:	681d      	ldr	r5, [r3, #0]
 8008e08:	6862      	ldr	r2, [r4, #4]
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f7f7 f9e7 	bl	80001e0 <memchr>
 8008e12:	b108      	cbz	r0, 8008e18 <_printf_i+0x1bc>
 8008e14:	1b40      	subs	r0, r0, r5
 8008e16:	6060      	str	r0, [r4, #4]
 8008e18:	6863      	ldr	r3, [r4, #4]
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e22:	e7a7      	b.n	8008d74 <_printf_i+0x118>
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	462a      	mov	r2, r5
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	47c0      	blx	r8
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d0aa      	beq.n	8008d88 <_printf_i+0x12c>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	079b      	lsls	r3, r3, #30
 8008e36:	d413      	bmi.n	8008e60 <_printf_i+0x204>
 8008e38:	68e0      	ldr	r0, [r4, #12]
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	4298      	cmp	r0, r3
 8008e3e:	bfb8      	it	lt
 8008e40:	4618      	movlt	r0, r3
 8008e42:	e7a3      	b.n	8008d8c <_printf_i+0x130>
 8008e44:	2301      	movs	r3, #1
 8008e46:	464a      	mov	r2, r9
 8008e48:	4639      	mov	r1, r7
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	47c0      	blx	r8
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d09a      	beq.n	8008d88 <_printf_i+0x12c>
 8008e52:	3501      	adds	r5, #1
 8008e54:	68e3      	ldr	r3, [r4, #12]
 8008e56:	9a03      	ldr	r2, [sp, #12]
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	42ab      	cmp	r3, r5
 8008e5c:	dcf2      	bgt.n	8008e44 <_printf_i+0x1e8>
 8008e5e:	e7eb      	b.n	8008e38 <_printf_i+0x1dc>
 8008e60:	2500      	movs	r5, #0
 8008e62:	f104 0919 	add.w	r9, r4, #25
 8008e66:	e7f5      	b.n	8008e54 <_printf_i+0x1f8>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1ac      	bne.n	8008dc6 <_printf_i+0x16a>
 8008e6c:	7803      	ldrb	r3, [r0, #0]
 8008e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e76:	e76c      	b.n	8008d52 <_printf_i+0xf6>
 8008e78:	0800c1ba 	.word	0x0800c1ba
 8008e7c:	0800c1cb 	.word	0x0800c1cb

08008e80 <_scanf_float>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	469a      	mov	sl, r3
 8008e86:	688b      	ldr	r3, [r1, #8]
 8008e88:	4616      	mov	r6, r2
 8008e8a:	1e5a      	subs	r2, r3, #1
 8008e8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e90:	b087      	sub	sp, #28
 8008e92:	bf83      	ittte	hi
 8008e94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008e98:	189b      	addhi	r3, r3, r2
 8008e9a:	9301      	strhi	r3, [sp, #4]
 8008e9c:	2300      	movls	r3, #0
 8008e9e:	bf86      	itte	hi
 8008ea0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ea4:	608b      	strhi	r3, [r1, #8]
 8008ea6:	9301      	strls	r3, [sp, #4]
 8008ea8:	680b      	ldr	r3, [r1, #0]
 8008eaa:	4688      	mov	r8, r1
 8008eac:	f04f 0b00 	mov.w	fp, #0
 8008eb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008eb4:	f848 3b1c 	str.w	r3, [r8], #28
 8008eb8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	4645      	mov	r5, r8
 8008ec2:	465a      	mov	r2, fp
 8008ec4:	46d9      	mov	r9, fp
 8008ec6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eca:	68a1      	ldr	r1, [r4, #8]
 8008ecc:	b181      	cbz	r1, 8008ef0 <_scanf_float+0x70>
 8008ece:	6833      	ldr	r3, [r6, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b49      	cmp	r3, #73	; 0x49
 8008ed4:	d071      	beq.n	8008fba <_scanf_float+0x13a>
 8008ed6:	d84d      	bhi.n	8008f74 <_scanf_float+0xf4>
 8008ed8:	2b39      	cmp	r3, #57	; 0x39
 8008eda:	d840      	bhi.n	8008f5e <_scanf_float+0xde>
 8008edc:	2b31      	cmp	r3, #49	; 0x31
 8008ede:	f080 8088 	bcs.w	8008ff2 <_scanf_float+0x172>
 8008ee2:	2b2d      	cmp	r3, #45	; 0x2d
 8008ee4:	f000 8090 	beq.w	8009008 <_scanf_float+0x188>
 8008ee8:	d815      	bhi.n	8008f16 <_scanf_float+0x96>
 8008eea:	2b2b      	cmp	r3, #43	; 0x2b
 8008eec:	f000 808c 	beq.w	8009008 <_scanf_float+0x188>
 8008ef0:	f1b9 0f00 	cmp.w	r9, #0
 8008ef4:	d003      	beq.n	8008efe <_scanf_float+0x7e>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	3a01      	subs	r2, #1
 8008f00:	2a01      	cmp	r2, #1
 8008f02:	f200 80ea 	bhi.w	80090da <_scanf_float+0x25a>
 8008f06:	4545      	cmp	r5, r8
 8008f08:	f200 80dc 	bhi.w	80090c4 <_scanf_float+0x244>
 8008f0c:	2601      	movs	r6, #1
 8008f0e:	4630      	mov	r0, r6
 8008f10:	b007      	add	sp, #28
 8008f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f16:	2b2e      	cmp	r3, #46	; 0x2e
 8008f18:	f000 809f 	beq.w	800905a <_scanf_float+0x1da>
 8008f1c:	2b30      	cmp	r3, #48	; 0x30
 8008f1e:	d1e7      	bne.n	8008ef0 <_scanf_float+0x70>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008f26:	d064      	beq.n	8008ff2 <_scanf_float+0x172>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008f2e:	6020      	str	r0, [r4, #0]
 8008f30:	f109 0901 	add.w	r9, r9, #1
 8008f34:	b11b      	cbz	r3, 8008f3e <_scanf_float+0xbe>
 8008f36:	3b01      	subs	r3, #1
 8008f38:	3101      	adds	r1, #1
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	60a1      	str	r1, [r4, #8]
 8008f3e:	68a3      	ldr	r3, [r4, #8]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	60a3      	str	r3, [r4, #8]
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	3301      	adds	r3, #1
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	6873      	ldr	r3, [r6, #4]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	6073      	str	r3, [r6, #4]
 8008f52:	f340 80ac 	ble.w	80090ae <_scanf_float+0x22e>
 8008f56:	6833      	ldr	r3, [r6, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	e7b5      	b.n	8008eca <_scanf_float+0x4a>
 8008f5e:	2b45      	cmp	r3, #69	; 0x45
 8008f60:	f000 8085 	beq.w	800906e <_scanf_float+0x1ee>
 8008f64:	2b46      	cmp	r3, #70	; 0x46
 8008f66:	d06a      	beq.n	800903e <_scanf_float+0x1be>
 8008f68:	2b41      	cmp	r3, #65	; 0x41
 8008f6a:	d1c1      	bne.n	8008ef0 <_scanf_float+0x70>
 8008f6c:	2a01      	cmp	r2, #1
 8008f6e:	d1bf      	bne.n	8008ef0 <_scanf_float+0x70>
 8008f70:	2202      	movs	r2, #2
 8008f72:	e046      	b.n	8009002 <_scanf_float+0x182>
 8008f74:	2b65      	cmp	r3, #101	; 0x65
 8008f76:	d07a      	beq.n	800906e <_scanf_float+0x1ee>
 8008f78:	d818      	bhi.n	8008fac <_scanf_float+0x12c>
 8008f7a:	2b54      	cmp	r3, #84	; 0x54
 8008f7c:	d066      	beq.n	800904c <_scanf_float+0x1cc>
 8008f7e:	d811      	bhi.n	8008fa4 <_scanf_float+0x124>
 8008f80:	2b4e      	cmp	r3, #78	; 0x4e
 8008f82:	d1b5      	bne.n	8008ef0 <_scanf_float+0x70>
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	d146      	bne.n	8009016 <_scanf_float+0x196>
 8008f88:	f1b9 0f00 	cmp.w	r9, #0
 8008f8c:	d145      	bne.n	800901a <_scanf_float+0x19a>
 8008f8e:	6821      	ldr	r1, [r4, #0]
 8008f90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008f94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008f98:	d13f      	bne.n	800901a <_scanf_float+0x19a>
 8008f9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008f9e:	6021      	str	r1, [r4, #0]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	e02e      	b.n	8009002 <_scanf_float+0x182>
 8008fa4:	2b59      	cmp	r3, #89	; 0x59
 8008fa6:	d01e      	beq.n	8008fe6 <_scanf_float+0x166>
 8008fa8:	2b61      	cmp	r3, #97	; 0x61
 8008faa:	e7de      	b.n	8008f6a <_scanf_float+0xea>
 8008fac:	2b6e      	cmp	r3, #110	; 0x6e
 8008fae:	d0e9      	beq.n	8008f84 <_scanf_float+0x104>
 8008fb0:	d815      	bhi.n	8008fde <_scanf_float+0x15e>
 8008fb2:	2b66      	cmp	r3, #102	; 0x66
 8008fb4:	d043      	beq.n	800903e <_scanf_float+0x1be>
 8008fb6:	2b69      	cmp	r3, #105	; 0x69
 8008fb8:	d19a      	bne.n	8008ef0 <_scanf_float+0x70>
 8008fba:	f1bb 0f00 	cmp.w	fp, #0
 8008fbe:	d138      	bne.n	8009032 <_scanf_float+0x1b2>
 8008fc0:	f1b9 0f00 	cmp.w	r9, #0
 8008fc4:	d197      	bne.n	8008ef6 <_scanf_float+0x76>
 8008fc6:	6821      	ldr	r1, [r4, #0]
 8008fc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008fcc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008fd0:	d195      	bne.n	8008efe <_scanf_float+0x7e>
 8008fd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008fd6:	6021      	str	r1, [r4, #0]
 8008fd8:	f04f 0b01 	mov.w	fp, #1
 8008fdc:	e011      	b.n	8009002 <_scanf_float+0x182>
 8008fde:	2b74      	cmp	r3, #116	; 0x74
 8008fe0:	d034      	beq.n	800904c <_scanf_float+0x1cc>
 8008fe2:	2b79      	cmp	r3, #121	; 0x79
 8008fe4:	d184      	bne.n	8008ef0 <_scanf_float+0x70>
 8008fe6:	f1bb 0f07 	cmp.w	fp, #7
 8008fea:	d181      	bne.n	8008ef0 <_scanf_float+0x70>
 8008fec:	f04f 0b08 	mov.w	fp, #8
 8008ff0:	e007      	b.n	8009002 <_scanf_float+0x182>
 8008ff2:	eb12 0f0b 	cmn.w	r2, fp
 8008ff6:	f47f af7b 	bne.w	8008ef0 <_scanf_float+0x70>
 8008ffa:	6821      	ldr	r1, [r4, #0]
 8008ffc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009000:	6021      	str	r1, [r4, #0]
 8009002:	702b      	strb	r3, [r5, #0]
 8009004:	3501      	adds	r5, #1
 8009006:	e79a      	b.n	8008f3e <_scanf_float+0xbe>
 8009008:	6821      	ldr	r1, [r4, #0]
 800900a:	0608      	lsls	r0, r1, #24
 800900c:	f57f af70 	bpl.w	8008ef0 <_scanf_float+0x70>
 8009010:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009014:	e7f4      	b.n	8009000 <_scanf_float+0x180>
 8009016:	2a02      	cmp	r2, #2
 8009018:	d047      	beq.n	80090aa <_scanf_float+0x22a>
 800901a:	f1bb 0f01 	cmp.w	fp, #1
 800901e:	d003      	beq.n	8009028 <_scanf_float+0x1a8>
 8009020:	f1bb 0f04 	cmp.w	fp, #4
 8009024:	f47f af64 	bne.w	8008ef0 <_scanf_float+0x70>
 8009028:	f10b 0b01 	add.w	fp, fp, #1
 800902c:	fa5f fb8b 	uxtb.w	fp, fp
 8009030:	e7e7      	b.n	8009002 <_scanf_float+0x182>
 8009032:	f1bb 0f03 	cmp.w	fp, #3
 8009036:	d0f7      	beq.n	8009028 <_scanf_float+0x1a8>
 8009038:	f1bb 0f05 	cmp.w	fp, #5
 800903c:	e7f2      	b.n	8009024 <_scanf_float+0x1a4>
 800903e:	f1bb 0f02 	cmp.w	fp, #2
 8009042:	f47f af55 	bne.w	8008ef0 <_scanf_float+0x70>
 8009046:	f04f 0b03 	mov.w	fp, #3
 800904a:	e7da      	b.n	8009002 <_scanf_float+0x182>
 800904c:	f1bb 0f06 	cmp.w	fp, #6
 8009050:	f47f af4e 	bne.w	8008ef0 <_scanf_float+0x70>
 8009054:	f04f 0b07 	mov.w	fp, #7
 8009058:	e7d3      	b.n	8009002 <_scanf_float+0x182>
 800905a:	6821      	ldr	r1, [r4, #0]
 800905c:	0588      	lsls	r0, r1, #22
 800905e:	f57f af47 	bpl.w	8008ef0 <_scanf_float+0x70>
 8009062:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009066:	6021      	str	r1, [r4, #0]
 8009068:	f8cd 9008 	str.w	r9, [sp, #8]
 800906c:	e7c9      	b.n	8009002 <_scanf_float+0x182>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009074:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009078:	d006      	beq.n	8009088 <_scanf_float+0x208>
 800907a:	0548      	lsls	r0, r1, #21
 800907c:	f57f af38 	bpl.w	8008ef0 <_scanf_float+0x70>
 8009080:	f1b9 0f00 	cmp.w	r9, #0
 8009084:	f43f af3b 	beq.w	8008efe <_scanf_float+0x7e>
 8009088:	0588      	lsls	r0, r1, #22
 800908a:	bf58      	it	pl
 800908c:	9802      	ldrpl	r0, [sp, #8]
 800908e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009092:	bf58      	it	pl
 8009094:	eba9 0000 	subpl.w	r0, r9, r0
 8009098:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800909c:	bf58      	it	pl
 800909e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80090a2:	6021      	str	r1, [r4, #0]
 80090a4:	f04f 0900 	mov.w	r9, #0
 80090a8:	e7ab      	b.n	8009002 <_scanf_float+0x182>
 80090aa:	2203      	movs	r2, #3
 80090ac:	e7a9      	b.n	8009002 <_scanf_float+0x182>
 80090ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090b2:	9205      	str	r2, [sp, #20]
 80090b4:	4631      	mov	r1, r6
 80090b6:	4638      	mov	r0, r7
 80090b8:	4798      	blx	r3
 80090ba:	9a05      	ldr	r2, [sp, #20]
 80090bc:	2800      	cmp	r0, #0
 80090be:	f43f af04 	beq.w	8008eca <_scanf_float+0x4a>
 80090c2:	e715      	b.n	8008ef0 <_scanf_float+0x70>
 80090c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80090cc:	4632      	mov	r2, r6
 80090ce:	4638      	mov	r0, r7
 80090d0:	4798      	blx	r3
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	e715      	b.n	8008f06 <_scanf_float+0x86>
 80090da:	f10b 33ff 	add.w	r3, fp, #4294967295
 80090de:	2b06      	cmp	r3, #6
 80090e0:	d80a      	bhi.n	80090f8 <_scanf_float+0x278>
 80090e2:	f1bb 0f02 	cmp.w	fp, #2
 80090e6:	d968      	bls.n	80091ba <_scanf_float+0x33a>
 80090e8:	f1ab 0b03 	sub.w	fp, fp, #3
 80090ec:	fa5f fb8b 	uxtb.w	fp, fp
 80090f0:	eba5 0b0b 	sub.w	fp, r5, fp
 80090f4:	455d      	cmp	r5, fp
 80090f6:	d14b      	bne.n	8009190 <_scanf_float+0x310>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	05da      	lsls	r2, r3, #23
 80090fc:	d51f      	bpl.n	800913e <_scanf_float+0x2be>
 80090fe:	055b      	lsls	r3, r3, #21
 8009100:	d468      	bmi.n	80091d4 <_scanf_float+0x354>
 8009102:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	2965      	cmp	r1, #101	; 0x65
 800910a:	f103 33ff 	add.w	r3, r3, #4294967295
 800910e:	f105 3bff 	add.w	fp, r5, #4294967295
 8009112:	6123      	str	r3, [r4, #16]
 8009114:	d00d      	beq.n	8009132 <_scanf_float+0x2b2>
 8009116:	2945      	cmp	r1, #69	; 0x45
 8009118:	d00b      	beq.n	8009132 <_scanf_float+0x2b2>
 800911a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800911e:	4632      	mov	r2, r6
 8009120:	4638      	mov	r0, r7
 8009122:	4798      	blx	r3
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800912a:	3b01      	subs	r3, #1
 800912c:	f1a5 0b02 	sub.w	fp, r5, #2
 8009130:	6123      	str	r3, [r4, #16]
 8009132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009136:	4632      	mov	r2, r6
 8009138:	4638      	mov	r0, r7
 800913a:	4798      	blx	r3
 800913c:	465d      	mov	r5, fp
 800913e:	6826      	ldr	r6, [r4, #0]
 8009140:	f016 0610 	ands.w	r6, r6, #16
 8009144:	d17a      	bne.n	800923c <_scanf_float+0x3bc>
 8009146:	702e      	strb	r6, [r5, #0]
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800914e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009152:	d142      	bne.n	80091da <_scanf_float+0x35a>
 8009154:	9b02      	ldr	r3, [sp, #8]
 8009156:	eba9 0303 	sub.w	r3, r9, r3
 800915a:	425a      	negs	r2, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d149      	bne.n	80091f4 <_scanf_float+0x374>
 8009160:	2200      	movs	r2, #0
 8009162:	4641      	mov	r1, r8
 8009164:	4638      	mov	r0, r7
 8009166:	f000 fefb 	bl	8009f60 <_strtod_r>
 800916a:	6825      	ldr	r5, [r4, #0]
 800916c:	f8da 3000 	ldr.w	r3, [sl]
 8009170:	f015 0f02 	tst.w	r5, #2
 8009174:	f103 0204 	add.w	r2, r3, #4
 8009178:	ec59 8b10 	vmov	r8, r9, d0
 800917c:	f8ca 2000 	str.w	r2, [sl]
 8009180:	d043      	beq.n	800920a <_scanf_float+0x38a>
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	e9c3 8900 	strd	r8, r9, [r3]
 8009188:	68e3      	ldr	r3, [r4, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60e3      	str	r3, [r4, #12]
 800918e:	e6be      	b.n	8008f0e <_scanf_float+0x8e>
 8009190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009194:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009198:	4632      	mov	r2, r6
 800919a:	4638      	mov	r0, r7
 800919c:	4798      	blx	r3
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	6123      	str	r3, [r4, #16]
 80091a4:	e7a6      	b.n	80090f4 <_scanf_float+0x274>
 80091a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80091ae:	4632      	mov	r2, r6
 80091b0:	4638      	mov	r0, r7
 80091b2:	4798      	blx	r3
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	6123      	str	r3, [r4, #16]
 80091ba:	4545      	cmp	r5, r8
 80091bc:	d8f3      	bhi.n	80091a6 <_scanf_float+0x326>
 80091be:	e6a5      	b.n	8008f0c <_scanf_float+0x8c>
 80091c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80091c8:	4632      	mov	r2, r6
 80091ca:	4638      	mov	r0, r7
 80091cc:	4798      	blx	r3
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	4545      	cmp	r5, r8
 80091d6:	d8f3      	bhi.n	80091c0 <_scanf_float+0x340>
 80091d8:	e698      	b.n	8008f0c <_scanf_float+0x8c>
 80091da:	9b03      	ldr	r3, [sp, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0bf      	beq.n	8009160 <_scanf_float+0x2e0>
 80091e0:	9904      	ldr	r1, [sp, #16]
 80091e2:	230a      	movs	r3, #10
 80091e4:	4632      	mov	r2, r6
 80091e6:	3101      	adds	r1, #1
 80091e8:	4638      	mov	r0, r7
 80091ea:	f000 ff45 	bl	800a078 <_strtol_r>
 80091ee:	9b03      	ldr	r3, [sp, #12]
 80091f0:	9d04      	ldr	r5, [sp, #16]
 80091f2:	1ac2      	subs	r2, r0, r3
 80091f4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091f8:	429d      	cmp	r5, r3
 80091fa:	bf28      	it	cs
 80091fc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009200:	490f      	ldr	r1, [pc, #60]	; (8009240 <_scanf_float+0x3c0>)
 8009202:	4628      	mov	r0, r5
 8009204:	f000 f87c 	bl	8009300 <siprintf>
 8009208:	e7aa      	b.n	8009160 <_scanf_float+0x2e0>
 800920a:	f015 0504 	ands.w	r5, r5, #4
 800920e:	d1b8      	bne.n	8009182 <_scanf_float+0x302>
 8009210:	681f      	ldr	r7, [r3, #0]
 8009212:	ee10 2a10 	vmov	r2, s0
 8009216:	464b      	mov	r3, r9
 8009218:	ee10 0a10 	vmov	r0, s0
 800921c:	4649      	mov	r1, r9
 800921e:	f7f7 fc85 	bl	8000b2c <__aeabi_dcmpun>
 8009222:	b128      	cbz	r0, 8009230 <_scanf_float+0x3b0>
 8009224:	4628      	mov	r0, r5
 8009226:	f000 f865 	bl	80092f4 <nanf>
 800922a:	ed87 0a00 	vstr	s0, [r7]
 800922e:	e7ab      	b.n	8009188 <_scanf_float+0x308>
 8009230:	4640      	mov	r0, r8
 8009232:	4649      	mov	r1, r9
 8009234:	f7f7 fcd8 	bl	8000be8 <__aeabi_d2f>
 8009238:	6038      	str	r0, [r7, #0]
 800923a:	e7a5      	b.n	8009188 <_scanf_float+0x308>
 800923c:	2600      	movs	r6, #0
 800923e:	e666      	b.n	8008f0e <_scanf_float+0x8e>
 8009240:	0800c1dc 	.word	0x0800c1dc

08009244 <srand>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4b0d      	ldr	r3, [pc, #52]	; (800927c <srand+0x38>)
 8009248:	681c      	ldr	r4, [r3, #0]
 800924a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800924c:	4605      	mov	r5, r0
 800924e:	b97b      	cbnz	r3, 8009270 <srand+0x2c>
 8009250:	2018      	movs	r0, #24
 8009252:	f002 f8a3 	bl	800b39c <malloc>
 8009256:	4a0a      	ldr	r2, [pc, #40]	; (8009280 <srand+0x3c>)
 8009258:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <srand+0x40>)
 800925a:	63a0      	str	r0, [r4, #56]	; 0x38
 800925c:	e9c0 2300 	strd	r2, r3, [r0]
 8009260:	4b09      	ldr	r3, [pc, #36]	; (8009288 <srand+0x44>)
 8009262:	6083      	str	r3, [r0, #8]
 8009264:	230b      	movs	r3, #11
 8009266:	8183      	strh	r3, [r0, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	2300      	movs	r3, #0
 800926c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009272:	2200      	movs	r2, #0
 8009274:	611d      	str	r5, [r3, #16]
 8009276:	615a      	str	r2, [r3, #20]
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	20000074 	.word	0x20000074
 8009280:	abcd330e 	.word	0xabcd330e
 8009284:	e66d1234 	.word	0xe66d1234
 8009288:	0005deec 	.word	0x0005deec

0800928c <rand>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <rand+0x50>)
 8009290:	681c      	ldr	r4, [r3, #0]
 8009292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009294:	b97b      	cbnz	r3, 80092b6 <rand+0x2a>
 8009296:	2018      	movs	r0, #24
 8009298:	f002 f880 	bl	800b39c <malloc>
 800929c:	4a10      	ldr	r2, [pc, #64]	; (80092e0 <rand+0x54>)
 800929e:	4b11      	ldr	r3, [pc, #68]	; (80092e4 <rand+0x58>)
 80092a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80092a2:	e9c0 2300 	strd	r2, r3, [r0]
 80092a6:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <rand+0x5c>)
 80092a8:	6083      	str	r3, [r0, #8]
 80092aa:	230b      	movs	r3, #11
 80092ac:	8183      	strh	r3, [r0, #12]
 80092ae:	2201      	movs	r2, #1
 80092b0:	2300      	movs	r3, #0
 80092b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80092b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092b8:	480c      	ldr	r0, [pc, #48]	; (80092ec <rand+0x60>)
 80092ba:	690a      	ldr	r2, [r1, #16]
 80092bc:	694b      	ldr	r3, [r1, #20]
 80092be:	4c0c      	ldr	r4, [pc, #48]	; (80092f0 <rand+0x64>)
 80092c0:	4350      	muls	r0, r2
 80092c2:	fb04 0003 	mla	r0, r4, r3, r0
 80092c6:	fba2 2304 	umull	r2, r3, r2, r4
 80092ca:	4403      	add	r3, r0
 80092cc:	1c54      	adds	r4, r2, #1
 80092ce:	f143 0500 	adc.w	r5, r3, #0
 80092d2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80092d6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000074 	.word	0x20000074
 80092e0:	abcd330e 	.word	0xabcd330e
 80092e4:	e66d1234 	.word	0xe66d1234
 80092e8:	0005deec 	.word	0x0005deec
 80092ec:	5851f42d 	.word	0x5851f42d
 80092f0:	4c957f2d 	.word	0x4c957f2d

080092f4 <nanf>:
 80092f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092fc <nanf+0x8>
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	7fc00000 	.word	0x7fc00000

08009300 <siprintf>:
 8009300:	b40e      	push	{r1, r2, r3}
 8009302:	b500      	push	{lr}
 8009304:	b09c      	sub	sp, #112	; 0x70
 8009306:	ab1d      	add	r3, sp, #116	; 0x74
 8009308:	9002      	str	r0, [sp, #8]
 800930a:	9006      	str	r0, [sp, #24]
 800930c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009310:	4809      	ldr	r0, [pc, #36]	; (8009338 <siprintf+0x38>)
 8009312:	9107      	str	r1, [sp, #28]
 8009314:	9104      	str	r1, [sp, #16]
 8009316:	4909      	ldr	r1, [pc, #36]	; (800933c <siprintf+0x3c>)
 8009318:	f853 2b04 	ldr.w	r2, [r3], #4
 800931c:	9105      	str	r1, [sp, #20]
 800931e:	6800      	ldr	r0, [r0, #0]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	a902      	add	r1, sp, #8
 8009324:	f002 fd6e 	bl	800be04 <_svfiprintf_r>
 8009328:	9b02      	ldr	r3, [sp, #8]
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	b01c      	add	sp, #112	; 0x70
 8009330:	f85d eb04 	ldr.w	lr, [sp], #4
 8009334:	b003      	add	sp, #12
 8009336:	4770      	bx	lr
 8009338:	20000074 	.word	0x20000074
 800933c:	ffff0208 	.word	0xffff0208

08009340 <sulp>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	4604      	mov	r4, r0
 8009344:	460d      	mov	r5, r1
 8009346:	ec45 4b10 	vmov	d0, r4, r5
 800934a:	4616      	mov	r6, r2
 800934c:	f002 fb16 	bl	800b97c <__ulp>
 8009350:	ec51 0b10 	vmov	r0, r1, d0
 8009354:	b17e      	cbz	r6, 8009376 <sulp+0x36>
 8009356:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800935a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd09      	ble.n	8009376 <sulp+0x36>
 8009362:	051b      	lsls	r3, r3, #20
 8009364:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009368:	2400      	movs	r4, #0
 800936a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800936e:	4622      	mov	r2, r4
 8009370:	462b      	mov	r3, r5
 8009372:	f7f7 f941 	bl	80005f8 <__aeabi_dmul>
 8009376:	bd70      	pop	{r4, r5, r6, pc}

08009378 <_strtod_l>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	461f      	mov	r7, r3
 800937e:	b0a1      	sub	sp, #132	; 0x84
 8009380:	2300      	movs	r3, #0
 8009382:	4681      	mov	r9, r0
 8009384:	4638      	mov	r0, r7
 8009386:	460e      	mov	r6, r1
 8009388:	9217      	str	r2, [sp, #92]	; 0x5c
 800938a:	931c      	str	r3, [sp, #112]	; 0x70
 800938c:	f001 fff5 	bl	800b37a <__localeconv_l>
 8009390:	4680      	mov	r8, r0
 8009392:	6800      	ldr	r0, [r0, #0]
 8009394:	f7f6 ff1c 	bl	80001d0 <strlen>
 8009398:	f04f 0a00 	mov.w	sl, #0
 800939c:	4604      	mov	r4, r0
 800939e:	f04f 0b00 	mov.w	fp, #0
 80093a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80093a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	2a0d      	cmp	r2, #13
 80093aa:	d832      	bhi.n	8009412 <_strtod_l+0x9a>
 80093ac:	2a09      	cmp	r2, #9
 80093ae:	d236      	bcs.n	800941e <_strtod_l+0xa6>
 80093b0:	2a00      	cmp	r2, #0
 80093b2:	d03e      	beq.n	8009432 <_strtod_l+0xba>
 80093b4:	2300      	movs	r3, #0
 80093b6:	930d      	str	r3, [sp, #52]	; 0x34
 80093b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80093ba:	782b      	ldrb	r3, [r5, #0]
 80093bc:	2b30      	cmp	r3, #48	; 0x30
 80093be:	f040 80ac 	bne.w	800951a <_strtod_l+0x1a2>
 80093c2:	786b      	ldrb	r3, [r5, #1]
 80093c4:	2b58      	cmp	r3, #88	; 0x58
 80093c6:	d001      	beq.n	80093cc <_strtod_l+0x54>
 80093c8:	2b78      	cmp	r3, #120	; 0x78
 80093ca:	d167      	bne.n	800949c <_strtod_l+0x124>
 80093cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	ab1c      	add	r3, sp, #112	; 0x70
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	9702      	str	r7, [sp, #8]
 80093d6:	ab1d      	add	r3, sp, #116	; 0x74
 80093d8:	4a88      	ldr	r2, [pc, #544]	; (80095fc <_strtod_l+0x284>)
 80093da:	a91b      	add	r1, sp, #108	; 0x6c
 80093dc:	4648      	mov	r0, r9
 80093de:	f001 fcf2 	bl	800adc6 <__gethex>
 80093e2:	f010 0407 	ands.w	r4, r0, #7
 80093e6:	4606      	mov	r6, r0
 80093e8:	d005      	beq.n	80093f6 <_strtod_l+0x7e>
 80093ea:	2c06      	cmp	r4, #6
 80093ec:	d12b      	bne.n	8009446 <_strtod_l+0xce>
 80093ee:	3501      	adds	r5, #1
 80093f0:	2300      	movs	r3, #0
 80093f2:	951b      	str	r5, [sp, #108]	; 0x6c
 80093f4:	930d      	str	r3, [sp, #52]	; 0x34
 80093f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f040 859a 	bne.w	8009f32 <_strtod_l+0xbba>
 80093fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009400:	b1e3      	cbz	r3, 800943c <_strtod_l+0xc4>
 8009402:	4652      	mov	r2, sl
 8009404:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009408:	ec43 2b10 	vmov	d0, r2, r3
 800940c:	b021      	add	sp, #132	; 0x84
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	2a2b      	cmp	r2, #43	; 0x2b
 8009414:	d015      	beq.n	8009442 <_strtod_l+0xca>
 8009416:	2a2d      	cmp	r2, #45	; 0x2d
 8009418:	d004      	beq.n	8009424 <_strtod_l+0xac>
 800941a:	2a20      	cmp	r2, #32
 800941c:	d1ca      	bne.n	80093b4 <_strtod_l+0x3c>
 800941e:	3301      	adds	r3, #1
 8009420:	931b      	str	r3, [sp, #108]	; 0x6c
 8009422:	e7bf      	b.n	80093a4 <_strtod_l+0x2c>
 8009424:	2201      	movs	r2, #1
 8009426:	920d      	str	r2, [sp, #52]	; 0x34
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	921b      	str	r2, [sp, #108]	; 0x6c
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1c2      	bne.n	80093b8 <_strtod_l+0x40>
 8009432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009434:	961b      	str	r6, [sp, #108]	; 0x6c
 8009436:	2b00      	cmp	r3, #0
 8009438:	f040 8579 	bne.w	8009f2e <_strtod_l+0xbb6>
 800943c:	4652      	mov	r2, sl
 800943e:	465b      	mov	r3, fp
 8009440:	e7e2      	b.n	8009408 <_strtod_l+0x90>
 8009442:	2200      	movs	r2, #0
 8009444:	e7ef      	b.n	8009426 <_strtod_l+0xae>
 8009446:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009448:	b13a      	cbz	r2, 800945a <_strtod_l+0xe2>
 800944a:	2135      	movs	r1, #53	; 0x35
 800944c:	a81e      	add	r0, sp, #120	; 0x78
 800944e:	f002 fb8d 	bl	800bb6c <__copybits>
 8009452:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009454:	4648      	mov	r0, r9
 8009456:	f001 fffa 	bl	800b44e <_Bfree>
 800945a:	3c01      	subs	r4, #1
 800945c:	2c04      	cmp	r4, #4
 800945e:	d806      	bhi.n	800946e <_strtod_l+0xf6>
 8009460:	e8df f004 	tbb	[pc, r4]
 8009464:	1714030a 	.word	0x1714030a
 8009468:	0a          	.byte	0x0a
 8009469:	00          	.byte	0x00
 800946a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800946e:	0730      	lsls	r0, r6, #28
 8009470:	d5c1      	bpl.n	80093f6 <_strtod_l+0x7e>
 8009472:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009476:	e7be      	b.n	80093f6 <_strtod_l+0x7e>
 8009478:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800947c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800947e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009482:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009486:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800948a:	e7f0      	b.n	800946e <_strtod_l+0xf6>
 800948c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009600 <_strtod_l+0x288>
 8009490:	e7ed      	b.n	800946e <_strtod_l+0xf6>
 8009492:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009496:	f04f 3aff 	mov.w	sl, #4294967295
 800949a:	e7e8      	b.n	800946e <_strtod_l+0xf6>
 800949c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b30      	cmp	r3, #48	; 0x30
 80094a6:	d0f9      	beq.n	800949c <_strtod_l+0x124>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0a4      	beq.n	80093f6 <_strtod_l+0x7e>
 80094ac:	2301      	movs	r3, #1
 80094ae:	2500      	movs	r5, #0
 80094b0:	9306      	str	r3, [sp, #24]
 80094b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094b4:	9308      	str	r3, [sp, #32]
 80094b6:	9507      	str	r5, [sp, #28]
 80094b8:	9505      	str	r5, [sp, #20]
 80094ba:	220a      	movs	r2, #10
 80094bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80094be:	7807      	ldrb	r7, [r0, #0]
 80094c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80094c4:	b2d9      	uxtb	r1, r3
 80094c6:	2909      	cmp	r1, #9
 80094c8:	d929      	bls.n	800951e <_strtod_l+0x1a6>
 80094ca:	4622      	mov	r2, r4
 80094cc:	f8d8 1000 	ldr.w	r1, [r8]
 80094d0:	f002 fda0 	bl	800c014 <strncmp>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d031      	beq.n	800953c <_strtod_l+0x1c4>
 80094d8:	2000      	movs	r0, #0
 80094da:	9c05      	ldr	r4, [sp, #20]
 80094dc:	9004      	str	r0, [sp, #16]
 80094de:	463b      	mov	r3, r7
 80094e0:	4602      	mov	r2, r0
 80094e2:	2b65      	cmp	r3, #101	; 0x65
 80094e4:	d001      	beq.n	80094ea <_strtod_l+0x172>
 80094e6:	2b45      	cmp	r3, #69	; 0x45
 80094e8:	d114      	bne.n	8009514 <_strtod_l+0x19c>
 80094ea:	b924      	cbnz	r4, 80094f6 <_strtod_l+0x17e>
 80094ec:	b910      	cbnz	r0, 80094f4 <_strtod_l+0x17c>
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d09e      	beq.n	8009432 <_strtod_l+0xba>
 80094f4:	2400      	movs	r4, #0
 80094f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80094f8:	1c73      	adds	r3, r6, #1
 80094fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80094fc:	7873      	ldrb	r3, [r6, #1]
 80094fe:	2b2b      	cmp	r3, #43	; 0x2b
 8009500:	d078      	beq.n	80095f4 <_strtod_l+0x27c>
 8009502:	2b2d      	cmp	r3, #45	; 0x2d
 8009504:	d070      	beq.n	80095e8 <_strtod_l+0x270>
 8009506:	f04f 0c00 	mov.w	ip, #0
 800950a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800950e:	2f09      	cmp	r7, #9
 8009510:	d97c      	bls.n	800960c <_strtod_l+0x294>
 8009512:	961b      	str	r6, [sp, #108]	; 0x6c
 8009514:	f04f 0e00 	mov.w	lr, #0
 8009518:	e09a      	b.n	8009650 <_strtod_l+0x2d8>
 800951a:	2300      	movs	r3, #0
 800951c:	e7c7      	b.n	80094ae <_strtod_l+0x136>
 800951e:	9905      	ldr	r1, [sp, #20]
 8009520:	2908      	cmp	r1, #8
 8009522:	bfdd      	ittte	le
 8009524:	9907      	ldrle	r1, [sp, #28]
 8009526:	fb02 3301 	mlale	r3, r2, r1, r3
 800952a:	9307      	strle	r3, [sp, #28]
 800952c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009530:	9b05      	ldr	r3, [sp, #20]
 8009532:	3001      	adds	r0, #1
 8009534:	3301      	adds	r3, #1
 8009536:	9305      	str	r3, [sp, #20]
 8009538:	901b      	str	r0, [sp, #108]	; 0x6c
 800953a:	e7bf      	b.n	80094bc <_strtod_l+0x144>
 800953c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800953e:	191a      	adds	r2, r3, r4
 8009540:	921b      	str	r2, [sp, #108]	; 0x6c
 8009542:	9a05      	ldr	r2, [sp, #20]
 8009544:	5d1b      	ldrb	r3, [r3, r4]
 8009546:	2a00      	cmp	r2, #0
 8009548:	d037      	beq.n	80095ba <_strtod_l+0x242>
 800954a:	9c05      	ldr	r4, [sp, #20]
 800954c:	4602      	mov	r2, r0
 800954e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009552:	2909      	cmp	r1, #9
 8009554:	d913      	bls.n	800957e <_strtod_l+0x206>
 8009556:	2101      	movs	r1, #1
 8009558:	9104      	str	r1, [sp, #16]
 800955a:	e7c2      	b.n	80094e2 <_strtod_l+0x16a>
 800955c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	921b      	str	r2, [sp, #108]	; 0x6c
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	3001      	adds	r0, #1
 8009566:	2b30      	cmp	r3, #48	; 0x30
 8009568:	d0f8      	beq.n	800955c <_strtod_l+0x1e4>
 800956a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800956e:	2a08      	cmp	r2, #8
 8009570:	f200 84e4 	bhi.w	8009f3c <_strtod_l+0xbc4>
 8009574:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009576:	9208      	str	r2, [sp, #32]
 8009578:	4602      	mov	r2, r0
 800957a:	2000      	movs	r0, #0
 800957c:	4604      	mov	r4, r0
 800957e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009582:	f100 0101 	add.w	r1, r0, #1
 8009586:	d012      	beq.n	80095ae <_strtod_l+0x236>
 8009588:	440a      	add	r2, r1
 800958a:	eb00 0c04 	add.w	ip, r0, r4
 800958e:	4621      	mov	r1, r4
 8009590:	270a      	movs	r7, #10
 8009592:	458c      	cmp	ip, r1
 8009594:	d113      	bne.n	80095be <_strtod_l+0x246>
 8009596:	1821      	adds	r1, r4, r0
 8009598:	2908      	cmp	r1, #8
 800959a:	f104 0401 	add.w	r4, r4, #1
 800959e:	4404      	add	r4, r0
 80095a0:	dc19      	bgt.n	80095d6 <_strtod_l+0x25e>
 80095a2:	9b07      	ldr	r3, [sp, #28]
 80095a4:	210a      	movs	r1, #10
 80095a6:	fb01 e303 	mla	r3, r1, r3, lr
 80095aa:	9307      	str	r3, [sp, #28]
 80095ac:	2100      	movs	r1, #0
 80095ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095b0:	1c58      	adds	r0, r3, #1
 80095b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	4608      	mov	r0, r1
 80095b8:	e7c9      	b.n	800954e <_strtod_l+0x1d6>
 80095ba:	9805      	ldr	r0, [sp, #20]
 80095bc:	e7d3      	b.n	8009566 <_strtod_l+0x1ee>
 80095be:	2908      	cmp	r1, #8
 80095c0:	f101 0101 	add.w	r1, r1, #1
 80095c4:	dc03      	bgt.n	80095ce <_strtod_l+0x256>
 80095c6:	9b07      	ldr	r3, [sp, #28]
 80095c8:	437b      	muls	r3, r7
 80095ca:	9307      	str	r3, [sp, #28]
 80095cc:	e7e1      	b.n	8009592 <_strtod_l+0x21a>
 80095ce:	2910      	cmp	r1, #16
 80095d0:	bfd8      	it	le
 80095d2:	437d      	mulle	r5, r7
 80095d4:	e7dd      	b.n	8009592 <_strtod_l+0x21a>
 80095d6:	2c10      	cmp	r4, #16
 80095d8:	bfdc      	itt	le
 80095da:	210a      	movle	r1, #10
 80095dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80095e0:	e7e4      	b.n	80095ac <_strtod_l+0x234>
 80095e2:	2301      	movs	r3, #1
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	e781      	b.n	80094ec <_strtod_l+0x174>
 80095e8:	f04f 0c01 	mov.w	ip, #1
 80095ec:	1cb3      	adds	r3, r6, #2
 80095ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80095f0:	78b3      	ldrb	r3, [r6, #2]
 80095f2:	e78a      	b.n	800950a <_strtod_l+0x192>
 80095f4:	f04f 0c00 	mov.w	ip, #0
 80095f8:	e7f8      	b.n	80095ec <_strtod_l+0x274>
 80095fa:	bf00      	nop
 80095fc:	0800c1e4 	.word	0x0800c1e4
 8009600:	7ff00000 	.word	0x7ff00000
 8009604:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009606:	1c5f      	adds	r7, r3, #1
 8009608:	971b      	str	r7, [sp, #108]	; 0x6c
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	2b30      	cmp	r3, #48	; 0x30
 800960e:	d0f9      	beq.n	8009604 <_strtod_l+0x28c>
 8009610:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009614:	2f08      	cmp	r7, #8
 8009616:	f63f af7d 	bhi.w	8009514 <_strtod_l+0x19c>
 800961a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800961e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009620:	930a      	str	r3, [sp, #40]	; 0x28
 8009622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009624:	1c5f      	adds	r7, r3, #1
 8009626:	971b      	str	r7, [sp, #108]	; 0x6c
 8009628:	785b      	ldrb	r3, [r3, #1]
 800962a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800962e:	f1b8 0f09 	cmp.w	r8, #9
 8009632:	d937      	bls.n	80096a4 <_strtod_l+0x32c>
 8009634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009636:	1a7f      	subs	r7, r7, r1
 8009638:	2f08      	cmp	r7, #8
 800963a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800963e:	dc37      	bgt.n	80096b0 <_strtod_l+0x338>
 8009640:	45be      	cmp	lr, r7
 8009642:	bfa8      	it	ge
 8009644:	46be      	movge	lr, r7
 8009646:	f1bc 0f00 	cmp.w	ip, #0
 800964a:	d001      	beq.n	8009650 <_strtod_l+0x2d8>
 800964c:	f1ce 0e00 	rsb	lr, lr, #0
 8009650:	2c00      	cmp	r4, #0
 8009652:	d151      	bne.n	80096f8 <_strtod_l+0x380>
 8009654:	2800      	cmp	r0, #0
 8009656:	f47f aece 	bne.w	80093f6 <_strtod_l+0x7e>
 800965a:	9a06      	ldr	r2, [sp, #24]
 800965c:	2a00      	cmp	r2, #0
 800965e:	f47f aeca 	bne.w	80093f6 <_strtod_l+0x7e>
 8009662:	9a04      	ldr	r2, [sp, #16]
 8009664:	2a00      	cmp	r2, #0
 8009666:	f47f aee4 	bne.w	8009432 <_strtod_l+0xba>
 800966a:	2b4e      	cmp	r3, #78	; 0x4e
 800966c:	d027      	beq.n	80096be <_strtod_l+0x346>
 800966e:	dc21      	bgt.n	80096b4 <_strtod_l+0x33c>
 8009670:	2b49      	cmp	r3, #73	; 0x49
 8009672:	f47f aede 	bne.w	8009432 <_strtod_l+0xba>
 8009676:	49a0      	ldr	r1, [pc, #640]	; (80098f8 <_strtod_l+0x580>)
 8009678:	a81b      	add	r0, sp, #108	; 0x6c
 800967a:	f001 fdd7 	bl	800b22c <__match>
 800967e:	2800      	cmp	r0, #0
 8009680:	f43f aed7 	beq.w	8009432 <_strtod_l+0xba>
 8009684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009686:	499d      	ldr	r1, [pc, #628]	; (80098fc <_strtod_l+0x584>)
 8009688:	3b01      	subs	r3, #1
 800968a:	a81b      	add	r0, sp, #108	; 0x6c
 800968c:	931b      	str	r3, [sp, #108]	; 0x6c
 800968e:	f001 fdcd 	bl	800b22c <__match>
 8009692:	b910      	cbnz	r0, 800969a <_strtod_l+0x322>
 8009694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009696:	3301      	adds	r3, #1
 8009698:	931b      	str	r3, [sp, #108]	; 0x6c
 800969a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009910 <_strtod_l+0x598>
 800969e:	f04f 0a00 	mov.w	sl, #0
 80096a2:	e6a8      	b.n	80093f6 <_strtod_l+0x7e>
 80096a4:	210a      	movs	r1, #10
 80096a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80096aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80096ae:	e7b8      	b.n	8009622 <_strtod_l+0x2aa>
 80096b0:	46be      	mov	lr, r7
 80096b2:	e7c8      	b.n	8009646 <_strtod_l+0x2ce>
 80096b4:	2b69      	cmp	r3, #105	; 0x69
 80096b6:	d0de      	beq.n	8009676 <_strtod_l+0x2fe>
 80096b8:	2b6e      	cmp	r3, #110	; 0x6e
 80096ba:	f47f aeba 	bne.w	8009432 <_strtod_l+0xba>
 80096be:	4990      	ldr	r1, [pc, #576]	; (8009900 <_strtod_l+0x588>)
 80096c0:	a81b      	add	r0, sp, #108	; 0x6c
 80096c2:	f001 fdb3 	bl	800b22c <__match>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f43f aeb3 	beq.w	8009432 <_strtod_l+0xba>
 80096cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	2b28      	cmp	r3, #40	; 0x28
 80096d2:	d10e      	bne.n	80096f2 <_strtod_l+0x37a>
 80096d4:	aa1e      	add	r2, sp, #120	; 0x78
 80096d6:	498b      	ldr	r1, [pc, #556]	; (8009904 <_strtod_l+0x58c>)
 80096d8:	a81b      	add	r0, sp, #108	; 0x6c
 80096da:	f001 fdbb 	bl	800b254 <__hexnan>
 80096de:	2805      	cmp	r0, #5
 80096e0:	d107      	bne.n	80096f2 <_strtod_l+0x37a>
 80096e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80096e4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80096e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80096ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80096f0:	e681      	b.n	80093f6 <_strtod_l+0x7e>
 80096f2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009918 <_strtod_l+0x5a0>
 80096f6:	e7d2      	b.n	800969e <_strtod_l+0x326>
 80096f8:	ebae 0302 	sub.w	r3, lr, r2
 80096fc:	9306      	str	r3, [sp, #24]
 80096fe:	9b05      	ldr	r3, [sp, #20]
 8009700:	9807      	ldr	r0, [sp, #28]
 8009702:	2b00      	cmp	r3, #0
 8009704:	bf08      	it	eq
 8009706:	4623      	moveq	r3, r4
 8009708:	2c10      	cmp	r4, #16
 800970a:	9305      	str	r3, [sp, #20]
 800970c:	46a0      	mov	r8, r4
 800970e:	bfa8      	it	ge
 8009710:	f04f 0810 	movge.w	r8, #16
 8009714:	f7f6 fef6 	bl	8000504 <__aeabi_ui2d>
 8009718:	2c09      	cmp	r4, #9
 800971a:	4682      	mov	sl, r0
 800971c:	468b      	mov	fp, r1
 800971e:	dc13      	bgt.n	8009748 <_strtod_l+0x3d0>
 8009720:	9b06      	ldr	r3, [sp, #24]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f43f ae67 	beq.w	80093f6 <_strtod_l+0x7e>
 8009728:	9b06      	ldr	r3, [sp, #24]
 800972a:	dd7a      	ble.n	8009822 <_strtod_l+0x4aa>
 800972c:	2b16      	cmp	r3, #22
 800972e:	dc61      	bgt.n	80097f4 <_strtod_l+0x47c>
 8009730:	4a75      	ldr	r2, [pc, #468]	; (8009908 <_strtod_l+0x590>)
 8009732:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009736:	e9de 0100 	ldrd	r0, r1, [lr]
 800973a:	4652      	mov	r2, sl
 800973c:	465b      	mov	r3, fp
 800973e:	f7f6 ff5b 	bl	80005f8 <__aeabi_dmul>
 8009742:	4682      	mov	sl, r0
 8009744:	468b      	mov	fp, r1
 8009746:	e656      	b.n	80093f6 <_strtod_l+0x7e>
 8009748:	4b6f      	ldr	r3, [pc, #444]	; (8009908 <_strtod_l+0x590>)
 800974a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800974e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	4606      	mov	r6, r0
 8009758:	4628      	mov	r0, r5
 800975a:	460f      	mov	r7, r1
 800975c:	f7f6 fed2 	bl	8000504 <__aeabi_ui2d>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f7f6 fd90 	bl	800028c <__adddf3>
 800976c:	2c0f      	cmp	r4, #15
 800976e:	4682      	mov	sl, r0
 8009770:	468b      	mov	fp, r1
 8009772:	ddd5      	ble.n	8009720 <_strtod_l+0x3a8>
 8009774:	9b06      	ldr	r3, [sp, #24]
 8009776:	eba4 0808 	sub.w	r8, r4, r8
 800977a:	4498      	add	r8, r3
 800977c:	f1b8 0f00 	cmp.w	r8, #0
 8009780:	f340 8096 	ble.w	80098b0 <_strtod_l+0x538>
 8009784:	f018 030f 	ands.w	r3, r8, #15
 8009788:	d00a      	beq.n	80097a0 <_strtod_l+0x428>
 800978a:	495f      	ldr	r1, [pc, #380]	; (8009908 <_strtod_l+0x590>)
 800978c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009790:	4652      	mov	r2, sl
 8009792:	465b      	mov	r3, fp
 8009794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009798:	f7f6 ff2e 	bl	80005f8 <__aeabi_dmul>
 800979c:	4682      	mov	sl, r0
 800979e:	468b      	mov	fp, r1
 80097a0:	f038 080f 	bics.w	r8, r8, #15
 80097a4:	d073      	beq.n	800988e <_strtod_l+0x516>
 80097a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80097aa:	dd47      	ble.n	800983c <_strtod_l+0x4c4>
 80097ac:	2400      	movs	r4, #0
 80097ae:	46a0      	mov	r8, r4
 80097b0:	9407      	str	r4, [sp, #28]
 80097b2:	9405      	str	r4, [sp, #20]
 80097b4:	2322      	movs	r3, #34	; 0x22
 80097b6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009910 <_strtod_l+0x598>
 80097ba:	f8c9 3000 	str.w	r3, [r9]
 80097be:	f04f 0a00 	mov.w	sl, #0
 80097c2:	9b07      	ldr	r3, [sp, #28]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f43f ae16 	beq.w	80093f6 <_strtod_l+0x7e>
 80097ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097cc:	4648      	mov	r0, r9
 80097ce:	f001 fe3e 	bl	800b44e <_Bfree>
 80097d2:	9905      	ldr	r1, [sp, #20]
 80097d4:	4648      	mov	r0, r9
 80097d6:	f001 fe3a 	bl	800b44e <_Bfree>
 80097da:	4641      	mov	r1, r8
 80097dc:	4648      	mov	r0, r9
 80097de:	f001 fe36 	bl	800b44e <_Bfree>
 80097e2:	9907      	ldr	r1, [sp, #28]
 80097e4:	4648      	mov	r0, r9
 80097e6:	f001 fe32 	bl	800b44e <_Bfree>
 80097ea:	4621      	mov	r1, r4
 80097ec:	4648      	mov	r0, r9
 80097ee:	f001 fe2e 	bl	800b44e <_Bfree>
 80097f2:	e600      	b.n	80093f6 <_strtod_l+0x7e>
 80097f4:	9a06      	ldr	r2, [sp, #24]
 80097f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80097fa:	4293      	cmp	r3, r2
 80097fc:	dbba      	blt.n	8009774 <_strtod_l+0x3fc>
 80097fe:	4d42      	ldr	r5, [pc, #264]	; (8009908 <_strtod_l+0x590>)
 8009800:	f1c4 040f 	rsb	r4, r4, #15
 8009804:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009808:	4652      	mov	r2, sl
 800980a:	465b      	mov	r3, fp
 800980c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009810:	f7f6 fef2 	bl	80005f8 <__aeabi_dmul>
 8009814:	9b06      	ldr	r3, [sp, #24]
 8009816:	1b1c      	subs	r4, r3, r4
 8009818:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800981c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009820:	e78d      	b.n	800973e <_strtod_l+0x3c6>
 8009822:	f113 0f16 	cmn.w	r3, #22
 8009826:	dba5      	blt.n	8009774 <_strtod_l+0x3fc>
 8009828:	4a37      	ldr	r2, [pc, #220]	; (8009908 <_strtod_l+0x590>)
 800982a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800982e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009832:	4650      	mov	r0, sl
 8009834:	4659      	mov	r1, fp
 8009836:	f7f7 f809 	bl	800084c <__aeabi_ddiv>
 800983a:	e782      	b.n	8009742 <_strtod_l+0x3ca>
 800983c:	2300      	movs	r3, #0
 800983e:	4e33      	ldr	r6, [pc, #204]	; (800990c <_strtod_l+0x594>)
 8009840:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009844:	4650      	mov	r0, sl
 8009846:	4659      	mov	r1, fp
 8009848:	461d      	mov	r5, r3
 800984a:	f1b8 0f01 	cmp.w	r8, #1
 800984e:	dc21      	bgt.n	8009894 <_strtod_l+0x51c>
 8009850:	b10b      	cbz	r3, 8009856 <_strtod_l+0x4de>
 8009852:	4682      	mov	sl, r0
 8009854:	468b      	mov	fp, r1
 8009856:	4b2d      	ldr	r3, [pc, #180]	; (800990c <_strtod_l+0x594>)
 8009858:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800985c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009860:	4652      	mov	r2, sl
 8009862:	465b      	mov	r3, fp
 8009864:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009868:	f7f6 fec6 	bl	80005f8 <__aeabi_dmul>
 800986c:	4b28      	ldr	r3, [pc, #160]	; (8009910 <_strtod_l+0x598>)
 800986e:	460a      	mov	r2, r1
 8009870:	400b      	ands	r3, r1
 8009872:	4928      	ldr	r1, [pc, #160]	; (8009914 <_strtod_l+0x59c>)
 8009874:	428b      	cmp	r3, r1
 8009876:	4682      	mov	sl, r0
 8009878:	d898      	bhi.n	80097ac <_strtod_l+0x434>
 800987a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800987e:	428b      	cmp	r3, r1
 8009880:	bf86      	itte	hi
 8009882:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800991c <_strtod_l+0x5a4>
 8009886:	f04f 3aff 	movhi.w	sl, #4294967295
 800988a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800988e:	2300      	movs	r3, #0
 8009890:	9304      	str	r3, [sp, #16]
 8009892:	e077      	b.n	8009984 <_strtod_l+0x60c>
 8009894:	f018 0f01 	tst.w	r8, #1
 8009898:	d006      	beq.n	80098a8 <_strtod_l+0x530>
 800989a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f7f6 fea9 	bl	80005f8 <__aeabi_dmul>
 80098a6:	2301      	movs	r3, #1
 80098a8:	3501      	adds	r5, #1
 80098aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098ae:	e7cc      	b.n	800984a <_strtod_l+0x4d2>
 80098b0:	d0ed      	beq.n	800988e <_strtod_l+0x516>
 80098b2:	f1c8 0800 	rsb	r8, r8, #0
 80098b6:	f018 020f 	ands.w	r2, r8, #15
 80098ba:	d00a      	beq.n	80098d2 <_strtod_l+0x55a>
 80098bc:	4b12      	ldr	r3, [pc, #72]	; (8009908 <_strtod_l+0x590>)
 80098be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098c2:	4650      	mov	r0, sl
 80098c4:	4659      	mov	r1, fp
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 ffbf 	bl	800084c <__aeabi_ddiv>
 80098ce:	4682      	mov	sl, r0
 80098d0:	468b      	mov	fp, r1
 80098d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80098d6:	d0da      	beq.n	800988e <_strtod_l+0x516>
 80098d8:	f1b8 0f1f 	cmp.w	r8, #31
 80098dc:	dd20      	ble.n	8009920 <_strtod_l+0x5a8>
 80098de:	2400      	movs	r4, #0
 80098e0:	46a0      	mov	r8, r4
 80098e2:	9407      	str	r4, [sp, #28]
 80098e4:	9405      	str	r4, [sp, #20]
 80098e6:	2322      	movs	r3, #34	; 0x22
 80098e8:	f04f 0a00 	mov.w	sl, #0
 80098ec:	f04f 0b00 	mov.w	fp, #0
 80098f0:	f8c9 3000 	str.w	r3, [r9]
 80098f4:	e765      	b.n	80097c2 <_strtod_l+0x44a>
 80098f6:	bf00      	nop
 80098f8:	0800c1ad 	.word	0x0800c1ad
 80098fc:	0800c23b 	.word	0x0800c23b
 8009900:	0800c1b5 	.word	0x0800c1b5
 8009904:	0800c1f8 	.word	0x0800c1f8
 8009908:	0800c278 	.word	0x0800c278
 800990c:	0800c250 	.word	0x0800c250
 8009910:	7ff00000 	.word	0x7ff00000
 8009914:	7ca00000 	.word	0x7ca00000
 8009918:	fff80000 	.word	0xfff80000
 800991c:	7fefffff 	.word	0x7fefffff
 8009920:	f018 0310 	ands.w	r3, r8, #16
 8009924:	bf18      	it	ne
 8009926:	236a      	movne	r3, #106	; 0x6a
 8009928:	4da0      	ldr	r5, [pc, #640]	; (8009bac <_strtod_l+0x834>)
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	4650      	mov	r0, sl
 800992e:	4659      	mov	r1, fp
 8009930:	2300      	movs	r3, #0
 8009932:	f1b8 0f00 	cmp.w	r8, #0
 8009936:	f300 810a 	bgt.w	8009b4e <_strtod_l+0x7d6>
 800993a:	b10b      	cbz	r3, 8009940 <_strtod_l+0x5c8>
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	b1bb      	cbz	r3, 8009974 <_strtod_l+0x5fc>
 8009944:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009948:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800994c:	2b00      	cmp	r3, #0
 800994e:	4659      	mov	r1, fp
 8009950:	dd10      	ble.n	8009974 <_strtod_l+0x5fc>
 8009952:	2b1f      	cmp	r3, #31
 8009954:	f340 8107 	ble.w	8009b66 <_strtod_l+0x7ee>
 8009958:	2b34      	cmp	r3, #52	; 0x34
 800995a:	bfde      	ittt	le
 800995c:	3b20      	suble	r3, #32
 800995e:	f04f 32ff 	movle.w	r2, #4294967295
 8009962:	fa02 f303 	lslle.w	r3, r2, r3
 8009966:	f04f 0a00 	mov.w	sl, #0
 800996a:	bfcc      	ite	gt
 800996c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009970:	ea03 0b01 	andle.w	fp, r3, r1
 8009974:	2200      	movs	r2, #0
 8009976:	2300      	movs	r3, #0
 8009978:	4650      	mov	r0, sl
 800997a:	4659      	mov	r1, fp
 800997c:	f7f7 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009980:	2800      	cmp	r0, #0
 8009982:	d1ac      	bne.n	80098de <_strtod_l+0x566>
 8009984:	9b07      	ldr	r3, [sp, #28]
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	9a05      	ldr	r2, [sp, #20]
 800998a:	9908      	ldr	r1, [sp, #32]
 800998c:	4623      	mov	r3, r4
 800998e:	4648      	mov	r0, r9
 8009990:	f001 fdaf 	bl	800b4f2 <__s2b>
 8009994:	9007      	str	r0, [sp, #28]
 8009996:	2800      	cmp	r0, #0
 8009998:	f43f af08 	beq.w	80097ac <_strtod_l+0x434>
 800999c:	9a06      	ldr	r2, [sp, #24]
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	f1c3 0300 	rsb	r3, r3, #0
 80099a6:	bfa8      	it	ge
 80099a8:	2300      	movge	r3, #0
 80099aa:	930e      	str	r3, [sp, #56]	; 0x38
 80099ac:	2400      	movs	r4, #0
 80099ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099b2:	9316      	str	r3, [sp, #88]	; 0x58
 80099b4:	46a0      	mov	r8, r4
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	4648      	mov	r0, r9
 80099ba:	6859      	ldr	r1, [r3, #4]
 80099bc:	f001 fd13 	bl	800b3e6 <_Balloc>
 80099c0:	9005      	str	r0, [sp, #20]
 80099c2:	2800      	cmp	r0, #0
 80099c4:	f43f aef6 	beq.w	80097b4 <_strtod_l+0x43c>
 80099c8:	9b07      	ldr	r3, [sp, #28]
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	3202      	adds	r2, #2
 80099ce:	f103 010c 	add.w	r1, r3, #12
 80099d2:	0092      	lsls	r2, r2, #2
 80099d4:	300c      	adds	r0, #12
 80099d6:	f001 fcfb 	bl	800b3d0 <memcpy>
 80099da:	aa1e      	add	r2, sp, #120	; 0x78
 80099dc:	a91d      	add	r1, sp, #116	; 0x74
 80099de:	ec4b ab10 	vmov	d0, sl, fp
 80099e2:	4648      	mov	r0, r9
 80099e4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80099e8:	f002 f83e 	bl	800ba68 <__d2b>
 80099ec:	901c      	str	r0, [sp, #112]	; 0x70
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f aee0 	beq.w	80097b4 <_strtod_l+0x43c>
 80099f4:	2101      	movs	r1, #1
 80099f6:	4648      	mov	r0, r9
 80099f8:	f001 fe07 	bl	800b60a <__i2b>
 80099fc:	4680      	mov	r8, r0
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f aed8 	beq.w	80097b4 <_strtod_l+0x43c>
 8009a04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009a06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a08:	2e00      	cmp	r6, #0
 8009a0a:	bfab      	itete	ge
 8009a0c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009a0e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009a10:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009a12:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009a14:	bfac      	ite	ge
 8009a16:	18f7      	addge	r7, r6, r3
 8009a18:	1b9d      	sublt	r5, r3, r6
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	1af6      	subs	r6, r6, r3
 8009a1e:	4416      	add	r6, r2
 8009a20:	4b63      	ldr	r3, [pc, #396]	; (8009bb0 <_strtod_l+0x838>)
 8009a22:	3e01      	subs	r6, #1
 8009a24:	429e      	cmp	r6, r3
 8009a26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a2a:	f280 80af 	bge.w	8009b8c <_strtod_l+0x814>
 8009a2e:	1b9b      	subs	r3, r3, r6
 8009a30:	2b1f      	cmp	r3, #31
 8009a32:	eba2 0203 	sub.w	r2, r2, r3
 8009a36:	f04f 0101 	mov.w	r1, #1
 8009a3a:	f300 809b 	bgt.w	8009b74 <_strtod_l+0x7fc>
 8009a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a42:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a44:	2300      	movs	r3, #0
 8009a46:	930a      	str	r3, [sp, #40]	; 0x28
 8009a48:	18be      	adds	r6, r7, r2
 8009a4a:	9b04      	ldr	r3, [sp, #16]
 8009a4c:	42b7      	cmp	r7, r6
 8009a4e:	4415      	add	r5, r2
 8009a50:	441d      	add	r5, r3
 8009a52:	463b      	mov	r3, r7
 8009a54:	bfa8      	it	ge
 8009a56:	4633      	movge	r3, r6
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	bfa8      	it	ge
 8009a5c:	462b      	movge	r3, r5
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bfc2      	ittt	gt
 8009a62:	1af6      	subgt	r6, r6, r3
 8009a64:	1aed      	subgt	r5, r5, r3
 8009a66:	1aff      	subgt	r7, r7, r3
 8009a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a6a:	b1bb      	cbz	r3, 8009a9c <_strtod_l+0x724>
 8009a6c:	4641      	mov	r1, r8
 8009a6e:	461a      	mov	r2, r3
 8009a70:	4648      	mov	r0, r9
 8009a72:	f001 fe69 	bl	800b748 <__pow5mult>
 8009a76:	4680      	mov	r8, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	f43f ae9b 	beq.w	80097b4 <_strtod_l+0x43c>
 8009a7e:	4601      	mov	r1, r0
 8009a80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a82:	4648      	mov	r0, r9
 8009a84:	f001 fdca 	bl	800b61c <__multiply>
 8009a88:	900c      	str	r0, [sp, #48]	; 0x30
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	f43f ae92 	beq.w	80097b4 <_strtod_l+0x43c>
 8009a90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a92:	4648      	mov	r0, r9
 8009a94:	f001 fcdb 	bl	800b44e <_Bfree>
 8009a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a9a:	931c      	str	r3, [sp, #112]	; 0x70
 8009a9c:	2e00      	cmp	r6, #0
 8009a9e:	dc7a      	bgt.n	8009b96 <_strtod_l+0x81e>
 8009aa0:	9b06      	ldr	r3, [sp, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd08      	ble.n	8009ab8 <_strtod_l+0x740>
 8009aa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009aa8:	9905      	ldr	r1, [sp, #20]
 8009aaa:	4648      	mov	r0, r9
 8009aac:	f001 fe4c 	bl	800b748 <__pow5mult>
 8009ab0:	9005      	str	r0, [sp, #20]
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	f43f ae7e 	beq.w	80097b4 <_strtod_l+0x43c>
 8009ab8:	2d00      	cmp	r5, #0
 8009aba:	dd08      	ble.n	8009ace <_strtod_l+0x756>
 8009abc:	462a      	mov	r2, r5
 8009abe:	9905      	ldr	r1, [sp, #20]
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f001 fe8f 	bl	800b7e4 <__lshift>
 8009ac6:	9005      	str	r0, [sp, #20]
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f43f ae73 	beq.w	80097b4 <_strtod_l+0x43c>
 8009ace:	2f00      	cmp	r7, #0
 8009ad0:	dd08      	ble.n	8009ae4 <_strtod_l+0x76c>
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	4648      	mov	r0, r9
 8009ad8:	f001 fe84 	bl	800b7e4 <__lshift>
 8009adc:	4680      	mov	r8, r0
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f43f ae68 	beq.w	80097b4 <_strtod_l+0x43c>
 8009ae4:	9a05      	ldr	r2, [sp, #20]
 8009ae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ae8:	4648      	mov	r0, r9
 8009aea:	f001 fee9 	bl	800b8c0 <__mdiff>
 8009aee:	4604      	mov	r4, r0
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f43f ae5f 	beq.w	80097b4 <_strtod_l+0x43c>
 8009af6:	68c3      	ldr	r3, [r0, #12]
 8009af8:	930c      	str	r3, [sp, #48]	; 0x30
 8009afa:	2300      	movs	r3, #0
 8009afc:	60c3      	str	r3, [r0, #12]
 8009afe:	4641      	mov	r1, r8
 8009b00:	f001 fec4 	bl	800b88c <__mcmp>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	da55      	bge.n	8009bb4 <_strtod_l+0x83c>
 8009b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b0a:	b9e3      	cbnz	r3, 8009b46 <_strtod_l+0x7ce>
 8009b0c:	f1ba 0f00 	cmp.w	sl, #0
 8009b10:	d119      	bne.n	8009b46 <_strtod_l+0x7ce>
 8009b12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b16:	b9b3      	cbnz	r3, 8009b46 <_strtod_l+0x7ce>
 8009b18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b1c:	0d1b      	lsrs	r3, r3, #20
 8009b1e:	051b      	lsls	r3, r3, #20
 8009b20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b24:	d90f      	bls.n	8009b46 <_strtod_l+0x7ce>
 8009b26:	6963      	ldr	r3, [r4, #20]
 8009b28:	b913      	cbnz	r3, 8009b30 <_strtod_l+0x7b8>
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	dd0a      	ble.n	8009b46 <_strtod_l+0x7ce>
 8009b30:	4621      	mov	r1, r4
 8009b32:	2201      	movs	r2, #1
 8009b34:	4648      	mov	r0, r9
 8009b36:	f001 fe55 	bl	800b7e4 <__lshift>
 8009b3a:	4641      	mov	r1, r8
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	f001 fea5 	bl	800b88c <__mcmp>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	dc67      	bgt.n	8009c16 <_strtod_l+0x89e>
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d171      	bne.n	8009c30 <_strtod_l+0x8b8>
 8009b4c:	e63d      	b.n	80097ca <_strtod_l+0x452>
 8009b4e:	f018 0f01 	tst.w	r8, #1
 8009b52:	d004      	beq.n	8009b5e <_strtod_l+0x7e6>
 8009b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b58:	f7f6 fd4e 	bl	80005f8 <__aeabi_dmul>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b62:	3508      	adds	r5, #8
 8009b64:	e6e5      	b.n	8009932 <_strtod_l+0x5ba>
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6e:	ea03 0a0a 	and.w	sl, r3, sl
 8009b72:	e6ff      	b.n	8009974 <_strtod_l+0x5fc>
 8009b74:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009b78:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009b7c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009b80:	36e2      	adds	r6, #226	; 0xe2
 8009b82:	fa01 f306 	lsl.w	r3, r1, r6
 8009b86:	930a      	str	r3, [sp, #40]	; 0x28
 8009b88:	910f      	str	r1, [sp, #60]	; 0x3c
 8009b8a:	e75d      	b.n	8009a48 <_strtod_l+0x6d0>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b90:	2301      	movs	r3, #1
 8009b92:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b94:	e758      	b.n	8009a48 <_strtod_l+0x6d0>
 8009b96:	4632      	mov	r2, r6
 8009b98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b9a:	4648      	mov	r0, r9
 8009b9c:	f001 fe22 	bl	800b7e4 <__lshift>
 8009ba0:	901c      	str	r0, [sp, #112]	; 0x70
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f47f af7c 	bne.w	8009aa0 <_strtod_l+0x728>
 8009ba8:	e604      	b.n	80097b4 <_strtod_l+0x43c>
 8009baa:	bf00      	nop
 8009bac:	0800c210 	.word	0x0800c210
 8009bb0:	fffffc02 	.word	0xfffffc02
 8009bb4:	465d      	mov	r5, fp
 8009bb6:	f040 8086 	bne.w	8009cc6 <_strtod_l+0x94e>
 8009bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bc0:	b32a      	cbz	r2, 8009c0e <_strtod_l+0x896>
 8009bc2:	4aaf      	ldr	r2, [pc, #700]	; (8009e80 <_strtod_l+0xb08>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d153      	bne.n	8009c70 <_strtod_l+0x8f8>
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	4650      	mov	r0, sl
 8009bcc:	b1d3      	cbz	r3, 8009c04 <_strtod_l+0x88c>
 8009bce:	4aad      	ldr	r2, [pc, #692]	; (8009e84 <_strtod_l+0xb0c>)
 8009bd0:	402a      	ands	r2, r5
 8009bd2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8009bda:	d816      	bhi.n	8009c0a <_strtod_l+0x892>
 8009bdc:	0d12      	lsrs	r2, r2, #20
 8009bde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009be2:	fa01 f303 	lsl.w	r3, r1, r3
 8009be6:	4298      	cmp	r0, r3
 8009be8:	d142      	bne.n	8009c70 <_strtod_l+0x8f8>
 8009bea:	4ba7      	ldr	r3, [pc, #668]	; (8009e88 <_strtod_l+0xb10>)
 8009bec:	429d      	cmp	r5, r3
 8009bee:	d102      	bne.n	8009bf6 <_strtod_l+0x87e>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f addf 	beq.w	80097b4 <_strtod_l+0x43c>
 8009bf6:	4ba3      	ldr	r3, [pc, #652]	; (8009e84 <_strtod_l+0xb0c>)
 8009bf8:	402b      	ands	r3, r5
 8009bfa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009bfe:	f04f 0a00 	mov.w	sl, #0
 8009c02:	e7a0      	b.n	8009b46 <_strtod_l+0x7ce>
 8009c04:	f04f 33ff 	mov.w	r3, #4294967295
 8009c08:	e7ed      	b.n	8009be6 <_strtod_l+0x86e>
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	e7eb      	b.n	8009be6 <_strtod_l+0x86e>
 8009c0e:	bb7b      	cbnz	r3, 8009c70 <_strtod_l+0x8f8>
 8009c10:	f1ba 0f00 	cmp.w	sl, #0
 8009c14:	d12c      	bne.n	8009c70 <_strtod_l+0x8f8>
 8009c16:	9904      	ldr	r1, [sp, #16]
 8009c18:	4a9a      	ldr	r2, [pc, #616]	; (8009e84 <_strtod_l+0xb0c>)
 8009c1a:	465b      	mov	r3, fp
 8009c1c:	b1f1      	cbz	r1, 8009c5c <_strtod_l+0x8e4>
 8009c1e:	ea02 010b 	and.w	r1, r2, fp
 8009c22:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c26:	dc19      	bgt.n	8009c5c <_strtod_l+0x8e4>
 8009c28:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c2c:	f77f ae5b 	ble.w	80098e6 <_strtod_l+0x56e>
 8009c30:	4a96      	ldr	r2, [pc, #600]	; (8009e8c <_strtod_l+0xb14>)
 8009c32:	2300      	movs	r3, #0
 8009c34:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009c38:	4650      	mov	r0, sl
 8009c3a:	4659      	mov	r1, fp
 8009c3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009c40:	f7f6 fcda 	bl	80005f8 <__aeabi_dmul>
 8009c44:	4682      	mov	sl, r0
 8009c46:	468b      	mov	fp, r1
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	f47f adbe 	bne.w	80097ca <_strtod_l+0x452>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f47f adbb 	bne.w	80097ca <_strtod_l+0x452>
 8009c54:	2322      	movs	r3, #34	; 0x22
 8009c56:	f8c9 3000 	str.w	r3, [r9]
 8009c5a:	e5b6      	b.n	80097ca <_strtod_l+0x452>
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009c62:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c66:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c6a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c6e:	e76a      	b.n	8009b46 <_strtod_l+0x7ce>
 8009c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c72:	b193      	cbz	r3, 8009c9a <_strtod_l+0x922>
 8009c74:	422b      	tst	r3, r5
 8009c76:	f43f af66 	beq.w	8009b46 <_strtod_l+0x7ce>
 8009c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c7c:	9a04      	ldr	r2, [sp, #16]
 8009c7e:	4650      	mov	r0, sl
 8009c80:	4659      	mov	r1, fp
 8009c82:	b173      	cbz	r3, 8009ca2 <_strtod_l+0x92a>
 8009c84:	f7ff fb5c 	bl	8009340 <sulp>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c90:	f7f6 fafc 	bl	800028c <__adddf3>
 8009c94:	4682      	mov	sl, r0
 8009c96:	468b      	mov	fp, r1
 8009c98:	e755      	b.n	8009b46 <_strtod_l+0x7ce>
 8009c9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c9c:	ea13 0f0a 	tst.w	r3, sl
 8009ca0:	e7e9      	b.n	8009c76 <_strtod_l+0x8fe>
 8009ca2:	f7ff fb4d 	bl	8009340 <sulp>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009cae:	f7f6 faeb 	bl	8000288 <__aeabi_dsub>
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4682      	mov	sl, r0
 8009cb8:	468b      	mov	fp, r1
 8009cba:	f7f6 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f47f ae11 	bne.w	80098e6 <_strtod_l+0x56e>
 8009cc4:	e73f      	b.n	8009b46 <_strtod_l+0x7ce>
 8009cc6:	4641      	mov	r1, r8
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f001 ff1c 	bl	800bb06 <__ratio>
 8009cce:	ec57 6b10 	vmov	r6, r7, d0
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cd8:	ee10 0a10 	vmov	r0, s0
 8009cdc:	4639      	mov	r1, r7
 8009cde:	f7f6 ff07 	bl	8000af0 <__aeabi_dcmple>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d077      	beq.n	8009dd6 <_strtod_l+0xa5e>
 8009ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d04a      	beq.n	8009d82 <_strtod_l+0xa0a>
 8009cec:	4b68      	ldr	r3, [pc, #416]	; (8009e90 <_strtod_l+0xb18>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009cf4:	4f66      	ldr	r7, [pc, #408]	; (8009e90 <_strtod_l+0xb18>)
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	4b62      	ldr	r3, [pc, #392]	; (8009e84 <_strtod_l+0xb0c>)
 8009cfa:	402b      	ands	r3, r5
 8009cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d00:	4b64      	ldr	r3, [pc, #400]	; (8009e94 <_strtod_l+0xb1c>)
 8009d02:	429a      	cmp	r2, r3
 8009d04:	f040 80ce 	bne.w	8009ea4 <_strtod_l+0xb2c>
 8009d08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d10:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009d14:	ec4b ab10 	vmov	d0, sl, fp
 8009d18:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009d1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d20:	f001 fe2c 	bl	800b97c <__ulp>
 8009d24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d28:	ec53 2b10 	vmov	r2, r3, d0
 8009d2c:	f7f6 fc64 	bl	80005f8 <__aeabi_dmul>
 8009d30:	4652      	mov	r2, sl
 8009d32:	465b      	mov	r3, fp
 8009d34:	f7f6 faaa 	bl	800028c <__adddf3>
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4952      	ldr	r1, [pc, #328]	; (8009e84 <_strtod_l+0xb0c>)
 8009d3c:	4a56      	ldr	r2, [pc, #344]	; (8009e98 <_strtod_l+0xb20>)
 8009d3e:	4019      	ands	r1, r3
 8009d40:	4291      	cmp	r1, r2
 8009d42:	4682      	mov	sl, r0
 8009d44:	d95b      	bls.n	8009dfe <_strtod_l+0xa86>
 8009d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d48:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d103      	bne.n	8009d58 <_strtod_l+0x9e0>
 8009d50:	9b08      	ldr	r3, [sp, #32]
 8009d52:	3301      	adds	r3, #1
 8009d54:	f43f ad2e 	beq.w	80097b4 <_strtod_l+0x43c>
 8009d58:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009e88 <_strtod_l+0xb10>
 8009d5c:	f04f 3aff 	mov.w	sl, #4294967295
 8009d60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d62:	4648      	mov	r0, r9
 8009d64:	f001 fb73 	bl	800b44e <_Bfree>
 8009d68:	9905      	ldr	r1, [sp, #20]
 8009d6a:	4648      	mov	r0, r9
 8009d6c:	f001 fb6f 	bl	800b44e <_Bfree>
 8009d70:	4641      	mov	r1, r8
 8009d72:	4648      	mov	r0, r9
 8009d74:	f001 fb6b 	bl	800b44e <_Bfree>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4648      	mov	r0, r9
 8009d7c:	f001 fb67 	bl	800b44e <_Bfree>
 8009d80:	e619      	b.n	80099b6 <_strtod_l+0x63e>
 8009d82:	f1ba 0f00 	cmp.w	sl, #0
 8009d86:	d11a      	bne.n	8009dbe <_strtod_l+0xa46>
 8009d88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d8c:	b9eb      	cbnz	r3, 8009dca <_strtod_l+0xa52>
 8009d8e:	2200      	movs	r2, #0
 8009d90:	4b3f      	ldr	r3, [pc, #252]	; (8009e90 <_strtod_l+0xb18>)
 8009d92:	4630      	mov	r0, r6
 8009d94:	4639      	mov	r1, r7
 8009d96:	f7f6 fea1 	bl	8000adc <__aeabi_dcmplt>
 8009d9a:	b9c8      	cbnz	r0, 8009dd0 <_strtod_l+0xa58>
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	4639      	mov	r1, r7
 8009da0:	2200      	movs	r2, #0
 8009da2:	4b3e      	ldr	r3, [pc, #248]	; (8009e9c <_strtod_l+0xb24>)
 8009da4:	f7f6 fc28 	bl	80005f8 <__aeabi_dmul>
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009db0:	9618      	str	r6, [sp, #96]	; 0x60
 8009db2:	9319      	str	r3, [sp, #100]	; 0x64
 8009db4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009db8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009dbc:	e79c      	b.n	8009cf8 <_strtod_l+0x980>
 8009dbe:	f1ba 0f01 	cmp.w	sl, #1
 8009dc2:	d102      	bne.n	8009dca <_strtod_l+0xa52>
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	f43f ad8e 	beq.w	80098e6 <_strtod_l+0x56e>
 8009dca:	2200      	movs	r2, #0
 8009dcc:	4b34      	ldr	r3, [pc, #208]	; (8009ea0 <_strtod_l+0xb28>)
 8009dce:	e78f      	b.n	8009cf0 <_strtod_l+0x978>
 8009dd0:	2600      	movs	r6, #0
 8009dd2:	4f32      	ldr	r7, [pc, #200]	; (8009e9c <_strtod_l+0xb24>)
 8009dd4:	e7ea      	b.n	8009dac <_strtod_l+0xa34>
 8009dd6:	4b31      	ldr	r3, [pc, #196]	; (8009e9c <_strtod_l+0xb24>)
 8009dd8:	4630      	mov	r0, r6
 8009dda:	4639      	mov	r1, r7
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f7f6 fc0b 	bl	80005f8 <__aeabi_dmul>
 8009de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	b933      	cbnz	r3, 8009df8 <_strtod_l+0xa80>
 8009dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dee:	9010      	str	r0, [sp, #64]	; 0x40
 8009df0:	9311      	str	r3, [sp, #68]	; 0x44
 8009df2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009df6:	e7df      	b.n	8009db8 <_strtod_l+0xa40>
 8009df8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009dfc:	e7f9      	b.n	8009df2 <_strtod_l+0xa7a>
 8009dfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e02:	9b04      	ldr	r3, [sp, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1ab      	bne.n	8009d60 <_strtod_l+0x9e8>
 8009e08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e0c:	0d1b      	lsrs	r3, r3, #20
 8009e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e10:	051b      	lsls	r3, r3, #20
 8009e12:	429a      	cmp	r2, r3
 8009e14:	465d      	mov	r5, fp
 8009e16:	d1a3      	bne.n	8009d60 <_strtod_l+0x9e8>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7f6 fe9c 	bl	8000b58 <__aeabi_d2iz>
 8009e20:	f7f6 fb80 	bl	8000524 <__aeabi_i2d>
 8009e24:	460b      	mov	r3, r1
 8009e26:	4602      	mov	r2, r0
 8009e28:	4639      	mov	r1, r7
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f7f6 fa2c 	bl	8000288 <__aeabi_dsub>
 8009e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e32:	4606      	mov	r6, r0
 8009e34:	460f      	mov	r7, r1
 8009e36:	b933      	cbnz	r3, 8009e46 <_strtod_l+0xace>
 8009e38:	f1ba 0f00 	cmp.w	sl, #0
 8009e3c:	d103      	bne.n	8009e46 <_strtod_l+0xace>
 8009e3e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	d06d      	beq.n	8009f22 <_strtod_l+0xbaa>
 8009e46:	a30a      	add	r3, pc, #40	; (adr r3, 8009e70 <_strtod_l+0xaf8>)
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	4639      	mov	r1, r7
 8009e50:	f7f6 fe44 	bl	8000adc <__aeabi_dcmplt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f47f acb8 	bne.w	80097ca <_strtod_l+0x452>
 8009e5a:	a307      	add	r3, pc, #28	; (adr r3, 8009e78 <_strtod_l+0xb00>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fe58 	bl	8000b18 <__aeabi_dcmpgt>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	f43f af79 	beq.w	8009d60 <_strtod_l+0x9e8>
 8009e6e:	e4ac      	b.n	80097ca <_strtod_l+0x452>
 8009e70:	94a03595 	.word	0x94a03595
 8009e74:	3fdfffff 	.word	0x3fdfffff
 8009e78:	35afe535 	.word	0x35afe535
 8009e7c:	3fe00000 	.word	0x3fe00000
 8009e80:	000fffff 	.word	0x000fffff
 8009e84:	7ff00000 	.word	0x7ff00000
 8009e88:	7fefffff 	.word	0x7fefffff
 8009e8c:	39500000 	.word	0x39500000
 8009e90:	3ff00000 	.word	0x3ff00000
 8009e94:	7fe00000 	.word	0x7fe00000
 8009e98:	7c9fffff 	.word	0x7c9fffff
 8009e9c:	3fe00000 	.word	0x3fe00000
 8009ea0:	bff00000 	.word	0xbff00000
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	b333      	cbz	r3, 8009ef6 <_strtod_l+0xb7e>
 8009ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eaa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009eae:	d822      	bhi.n	8009ef6 <_strtod_l+0xb7e>
 8009eb0:	a327      	add	r3, pc, #156	; (adr r3, 8009f50 <_strtod_l+0xbd8>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fe19 	bl	8000af0 <__aeabi_dcmple>
 8009ebe:	b1a0      	cbz	r0, 8009eea <_strtod_l+0xb72>
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7f6 fe70 	bl	8000ba8 <__aeabi_d2uiz>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	bf08      	it	eq
 8009ecc:	2001      	moveq	r0, #1
 8009ece:	f7f6 fb19 	bl	8000504 <__aeabi_ui2d>
 8009ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	bb03      	cbnz	r3, 8009f1c <_strtod_l+0xba4>
 8009eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ede:	9012      	str	r0, [sp, #72]	; 0x48
 8009ee0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ee2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009ee6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009eee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ef6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009efa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009efe:	f001 fd3d 	bl	800b97c <__ulp>
 8009f02:	4650      	mov	r0, sl
 8009f04:	ec53 2b10 	vmov	r2, r3, d0
 8009f08:	4659      	mov	r1, fp
 8009f0a:	f7f6 fb75 	bl	80005f8 <__aeabi_dmul>
 8009f0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f12:	f7f6 f9bb 	bl	800028c <__adddf3>
 8009f16:	4682      	mov	sl, r0
 8009f18:	468b      	mov	fp, r1
 8009f1a:	e772      	b.n	8009e02 <_strtod_l+0xa8a>
 8009f1c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009f20:	e7df      	b.n	8009ee2 <_strtod_l+0xb6a>
 8009f22:	a30d      	add	r3, pc, #52	; (adr r3, 8009f58 <_strtod_l+0xbe0>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f7f6 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8009f2c:	e79c      	b.n	8009e68 <_strtod_l+0xaf0>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	930d      	str	r3, [sp, #52]	; 0x34
 8009f32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	f7ff ba61 	b.w	80093fe <_strtod_l+0x86>
 8009f3c:	2b65      	cmp	r3, #101	; 0x65
 8009f3e:	f04f 0200 	mov.w	r2, #0
 8009f42:	f43f ab4e 	beq.w	80095e2 <_strtod_l+0x26a>
 8009f46:	2101      	movs	r1, #1
 8009f48:	4614      	mov	r4, r2
 8009f4a:	9104      	str	r1, [sp, #16]
 8009f4c:	f7ff bacb 	b.w	80094e6 <_strtod_l+0x16e>
 8009f50:	ffc00000 	.word	0xffc00000
 8009f54:	41dfffff 	.word	0x41dfffff
 8009f58:	94a03595 	.word	0x94a03595
 8009f5c:	3fcfffff 	.word	0x3fcfffff

08009f60 <_strtod_r>:
 8009f60:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <_strtod_r+0x18>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	b410      	push	{r4}
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	4c04      	ldr	r4, [pc, #16]	; (8009f7c <_strtod_r+0x1c>)
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	bf08      	it	eq
 8009f6e:	4623      	moveq	r3, r4
 8009f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f74:	f7ff ba00 	b.w	8009378 <_strtod_l>
 8009f78:	20000074 	.word	0x20000074
 8009f7c:	200000d8 	.word	0x200000d8

08009f80 <_strtol_l.isra.0>:
 8009f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	4692      	mov	sl, r2
 8009f8a:	461e      	mov	r6, r3
 8009f8c:	460f      	mov	r7, r1
 8009f8e:	463d      	mov	r5, r7
 8009f90:	9808      	ldr	r0, [sp, #32]
 8009f92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f96:	f001 f9ed 	bl	800b374 <__locale_ctype_ptr_l>
 8009f9a:	4420      	add	r0, r4
 8009f9c:	7843      	ldrb	r3, [r0, #1]
 8009f9e:	f013 0308 	ands.w	r3, r3, #8
 8009fa2:	d132      	bne.n	800a00a <_strtol_l.isra.0+0x8a>
 8009fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8009fa6:	d132      	bne.n	800a00e <_strtol_l.isra.0+0x8e>
 8009fa8:	787c      	ldrb	r4, [r7, #1]
 8009faa:	1cbd      	adds	r5, r7, #2
 8009fac:	2201      	movs	r2, #1
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d05d      	beq.n	800a06e <_strtol_l.isra.0+0xee>
 8009fb2:	2e10      	cmp	r6, #16
 8009fb4:	d109      	bne.n	8009fca <_strtol_l.isra.0+0x4a>
 8009fb6:	2c30      	cmp	r4, #48	; 0x30
 8009fb8:	d107      	bne.n	8009fca <_strtol_l.isra.0+0x4a>
 8009fba:	782b      	ldrb	r3, [r5, #0]
 8009fbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fc0:	2b58      	cmp	r3, #88	; 0x58
 8009fc2:	d14f      	bne.n	800a064 <_strtol_l.isra.0+0xe4>
 8009fc4:	786c      	ldrb	r4, [r5, #1]
 8009fc6:	2610      	movs	r6, #16
 8009fc8:	3502      	adds	r5, #2
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	bf14      	ite	ne
 8009fce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009fd2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009fd6:	2700      	movs	r7, #0
 8009fd8:	fbb1 fcf6 	udiv	ip, r1, r6
 8009fdc:	4638      	mov	r0, r7
 8009fde:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009fe2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009fe6:	2b09      	cmp	r3, #9
 8009fe8:	d817      	bhi.n	800a01a <_strtol_l.isra.0+0x9a>
 8009fea:	461c      	mov	r4, r3
 8009fec:	42a6      	cmp	r6, r4
 8009fee:	dd23      	ble.n	800a038 <_strtol_l.isra.0+0xb8>
 8009ff0:	1c7b      	adds	r3, r7, #1
 8009ff2:	d007      	beq.n	800a004 <_strtol_l.isra.0+0x84>
 8009ff4:	4584      	cmp	ip, r0
 8009ff6:	d31c      	bcc.n	800a032 <_strtol_l.isra.0+0xb2>
 8009ff8:	d101      	bne.n	8009ffe <_strtol_l.isra.0+0x7e>
 8009ffa:	45a6      	cmp	lr, r4
 8009ffc:	db19      	blt.n	800a032 <_strtol_l.isra.0+0xb2>
 8009ffe:	fb00 4006 	mla	r0, r0, r6, r4
 800a002:	2701      	movs	r7, #1
 800a004:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a008:	e7eb      	b.n	8009fe2 <_strtol_l.isra.0+0x62>
 800a00a:	462f      	mov	r7, r5
 800a00c:	e7bf      	b.n	8009f8e <_strtol_l.isra.0+0xe>
 800a00e:	2c2b      	cmp	r4, #43	; 0x2b
 800a010:	bf04      	itt	eq
 800a012:	1cbd      	addeq	r5, r7, #2
 800a014:	787c      	ldrbeq	r4, [r7, #1]
 800a016:	461a      	mov	r2, r3
 800a018:	e7c9      	b.n	8009fae <_strtol_l.isra.0+0x2e>
 800a01a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a01e:	2b19      	cmp	r3, #25
 800a020:	d801      	bhi.n	800a026 <_strtol_l.isra.0+0xa6>
 800a022:	3c37      	subs	r4, #55	; 0x37
 800a024:	e7e2      	b.n	8009fec <_strtol_l.isra.0+0x6c>
 800a026:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a02a:	2b19      	cmp	r3, #25
 800a02c:	d804      	bhi.n	800a038 <_strtol_l.isra.0+0xb8>
 800a02e:	3c57      	subs	r4, #87	; 0x57
 800a030:	e7dc      	b.n	8009fec <_strtol_l.isra.0+0x6c>
 800a032:	f04f 37ff 	mov.w	r7, #4294967295
 800a036:	e7e5      	b.n	800a004 <_strtol_l.isra.0+0x84>
 800a038:	1c7b      	adds	r3, r7, #1
 800a03a:	d108      	bne.n	800a04e <_strtol_l.isra.0+0xce>
 800a03c:	2322      	movs	r3, #34	; 0x22
 800a03e:	f8c8 3000 	str.w	r3, [r8]
 800a042:	4608      	mov	r0, r1
 800a044:	f1ba 0f00 	cmp.w	sl, #0
 800a048:	d107      	bne.n	800a05a <_strtol_l.isra.0+0xda>
 800a04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04e:	b102      	cbz	r2, 800a052 <_strtol_l.isra.0+0xd2>
 800a050:	4240      	negs	r0, r0
 800a052:	f1ba 0f00 	cmp.w	sl, #0
 800a056:	d0f8      	beq.n	800a04a <_strtol_l.isra.0+0xca>
 800a058:	b10f      	cbz	r7, 800a05e <_strtol_l.isra.0+0xde>
 800a05a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a05e:	f8ca 9000 	str.w	r9, [sl]
 800a062:	e7f2      	b.n	800a04a <_strtol_l.isra.0+0xca>
 800a064:	2430      	movs	r4, #48	; 0x30
 800a066:	2e00      	cmp	r6, #0
 800a068:	d1af      	bne.n	8009fca <_strtol_l.isra.0+0x4a>
 800a06a:	2608      	movs	r6, #8
 800a06c:	e7ad      	b.n	8009fca <_strtol_l.isra.0+0x4a>
 800a06e:	2c30      	cmp	r4, #48	; 0x30
 800a070:	d0a3      	beq.n	8009fba <_strtol_l.isra.0+0x3a>
 800a072:	260a      	movs	r6, #10
 800a074:	e7a9      	b.n	8009fca <_strtol_l.isra.0+0x4a>
	...

0800a078 <_strtol_r>:
 800a078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a07a:	4c06      	ldr	r4, [pc, #24]	; (800a094 <_strtol_r+0x1c>)
 800a07c:	4d06      	ldr	r5, [pc, #24]	; (800a098 <_strtol_r+0x20>)
 800a07e:	6824      	ldr	r4, [r4, #0]
 800a080:	6a24      	ldr	r4, [r4, #32]
 800a082:	2c00      	cmp	r4, #0
 800a084:	bf08      	it	eq
 800a086:	462c      	moveq	r4, r5
 800a088:	9400      	str	r4, [sp, #0]
 800a08a:	f7ff ff79 	bl	8009f80 <_strtol_l.isra.0>
 800a08e:	b003      	add	sp, #12
 800a090:	bd30      	pop	{r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	20000074 	.word	0x20000074
 800a098:	200000d8 	.word	0x200000d8

0800a09c <quorem>:
 800a09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a0:	6903      	ldr	r3, [r0, #16]
 800a0a2:	690c      	ldr	r4, [r1, #16]
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	f2c0 8082 	blt.w	800a1b0 <quorem+0x114>
 800a0ac:	3c01      	subs	r4, #1
 800a0ae:	f101 0714 	add.w	r7, r1, #20
 800a0b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a0b6:	f100 0614 	add.w	r6, r0, #20
 800a0ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a0be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a0c2:	eb06 030c 	add.w	r3, r6, ip
 800a0c6:	3501      	adds	r5, #1
 800a0c8:	eb07 090c 	add.w	r9, r7, ip
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	fbb0 f5f5 	udiv	r5, r0, r5
 800a0d2:	b395      	cbz	r5, 800a13a <quorem+0x9e>
 800a0d4:	f04f 0a00 	mov.w	sl, #0
 800a0d8:	4638      	mov	r0, r7
 800a0da:	46b6      	mov	lr, r6
 800a0dc:	46d3      	mov	fp, sl
 800a0de:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0e2:	b293      	uxth	r3, r2
 800a0e4:	fb05 a303 	mla	r3, r5, r3, sl
 800a0e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	ebab 0303 	sub.w	r3, fp, r3
 800a0f2:	0c12      	lsrs	r2, r2, #16
 800a0f4:	f8de b000 	ldr.w	fp, [lr]
 800a0f8:	fb05 a202 	mla	r2, r5, r2, sl
 800a0fc:	fa13 f38b 	uxtah	r3, r3, fp
 800a100:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a104:	fa1f fb82 	uxth.w	fp, r2
 800a108:	f8de 2000 	ldr.w	r2, [lr]
 800a10c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a114:	b29b      	uxth	r3, r3
 800a116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a11a:	4581      	cmp	r9, r0
 800a11c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a120:	f84e 3b04 	str.w	r3, [lr], #4
 800a124:	d2db      	bcs.n	800a0de <quorem+0x42>
 800a126:	f856 300c 	ldr.w	r3, [r6, ip]
 800a12a:	b933      	cbnz	r3, 800a13a <quorem+0x9e>
 800a12c:	9b01      	ldr	r3, [sp, #4]
 800a12e:	3b04      	subs	r3, #4
 800a130:	429e      	cmp	r6, r3
 800a132:	461a      	mov	r2, r3
 800a134:	d330      	bcc.n	800a198 <quorem+0xfc>
 800a136:	f8c8 4010 	str.w	r4, [r8, #16]
 800a13a:	4640      	mov	r0, r8
 800a13c:	f001 fba6 	bl	800b88c <__mcmp>
 800a140:	2800      	cmp	r0, #0
 800a142:	db25      	blt.n	800a190 <quorem+0xf4>
 800a144:	3501      	adds	r5, #1
 800a146:	4630      	mov	r0, r6
 800a148:	f04f 0c00 	mov.w	ip, #0
 800a14c:	f857 2b04 	ldr.w	r2, [r7], #4
 800a150:	f8d0 e000 	ldr.w	lr, [r0]
 800a154:	b293      	uxth	r3, r2
 800a156:	ebac 0303 	sub.w	r3, ip, r3
 800a15a:	0c12      	lsrs	r2, r2, #16
 800a15c:	fa13 f38e 	uxtah	r3, r3, lr
 800a160:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a168:	b29b      	uxth	r3, r3
 800a16a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a16e:	45b9      	cmp	r9, r7
 800a170:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a174:	f840 3b04 	str.w	r3, [r0], #4
 800a178:	d2e8      	bcs.n	800a14c <quorem+0xb0>
 800a17a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a17e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a182:	b92a      	cbnz	r2, 800a190 <quorem+0xf4>
 800a184:	3b04      	subs	r3, #4
 800a186:	429e      	cmp	r6, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	d30b      	bcc.n	800a1a4 <quorem+0x108>
 800a18c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a190:	4628      	mov	r0, r5
 800a192:	b003      	add	sp, #12
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	3b04      	subs	r3, #4
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d1ca      	bne.n	800a136 <quorem+0x9a>
 800a1a0:	3c01      	subs	r4, #1
 800a1a2:	e7c5      	b.n	800a130 <quorem+0x94>
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	3b04      	subs	r3, #4
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	d1ef      	bne.n	800a18c <quorem+0xf0>
 800a1ac:	3c01      	subs	r4, #1
 800a1ae:	e7ea      	b.n	800a186 <quorem+0xea>
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7ee      	b.n	800a192 <quorem+0xf6>
 800a1b4:	0000      	movs	r0, r0
	...

0800a1b8 <_dtoa_r>:
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	ec57 6b10 	vmov	r6, r7, d0
 800a1c0:	b097      	sub	sp, #92	; 0x5c
 800a1c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1c4:	9106      	str	r1, [sp, #24]
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a1cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1d0:	e9cd 6700 	strd	r6, r7, [sp]
 800a1d4:	b93d      	cbnz	r5, 800a1e6 <_dtoa_r+0x2e>
 800a1d6:	2010      	movs	r0, #16
 800a1d8:	f001 f8e0 	bl	800b39c <malloc>
 800a1dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a1de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1e2:	6005      	str	r5, [r0, #0]
 800a1e4:	60c5      	str	r5, [r0, #12]
 800a1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e8:	6819      	ldr	r1, [r3, #0]
 800a1ea:	b151      	cbz	r1, 800a202 <_dtoa_r+0x4a>
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	604a      	str	r2, [r1, #4]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4093      	lsls	r3, r2
 800a1f4:	608b      	str	r3, [r1, #8]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f001 f929 	bl	800b44e <_Bfree>
 800a1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	1e3b      	subs	r3, r7, #0
 800a204:	bfbb      	ittet	lt
 800a206:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a20a:	9301      	strlt	r3, [sp, #4]
 800a20c:	2300      	movge	r3, #0
 800a20e:	2201      	movlt	r2, #1
 800a210:	bfac      	ite	ge
 800a212:	f8c8 3000 	strge.w	r3, [r8]
 800a216:	f8c8 2000 	strlt.w	r2, [r8]
 800a21a:	4baf      	ldr	r3, [pc, #700]	; (800a4d8 <_dtoa_r+0x320>)
 800a21c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a220:	ea33 0308 	bics.w	r3, r3, r8
 800a224:	d114      	bne.n	800a250 <_dtoa_r+0x98>
 800a226:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a228:	f242 730f 	movw	r3, #9999	; 0x270f
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	b923      	cbnz	r3, 800a23c <_dtoa_r+0x84>
 800a232:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a236:	2800      	cmp	r0, #0
 800a238:	f000 8542 	beq.w	800acc0 <_dtoa_r+0xb08>
 800a23c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a23e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a4ec <_dtoa_r+0x334>
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 8544 	beq.w	800acd0 <_dtoa_r+0xb18>
 800a248:	f10b 0303 	add.w	r3, fp, #3
 800a24c:	f000 bd3e 	b.w	800accc <_dtoa_r+0xb14>
 800a250:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a254:	2200      	movs	r2, #0
 800a256:	2300      	movs	r3, #0
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 800a260:	4681      	mov	r9, r0
 800a262:	b168      	cbz	r0, 800a280 <_dtoa_r+0xc8>
 800a264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a266:	2301      	movs	r3, #1
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8524 	beq.w	800acba <_dtoa_r+0xb02>
 800a272:	4b9a      	ldr	r3, [pc, #616]	; (800a4dc <_dtoa_r+0x324>)
 800a274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a276:	f103 3bff 	add.w	fp, r3, #4294967295
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	f000 bd28 	b.w	800acd0 <_dtoa_r+0xb18>
 800a280:	aa14      	add	r2, sp, #80	; 0x50
 800a282:	a915      	add	r1, sp, #84	; 0x54
 800a284:	ec47 6b10 	vmov	d0, r6, r7
 800a288:	4620      	mov	r0, r4
 800a28a:	f001 fbed 	bl	800ba68 <__d2b>
 800a28e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a292:	9004      	str	r0, [sp, #16]
 800a294:	2d00      	cmp	r5, #0
 800a296:	d07c      	beq.n	800a392 <_dtoa_r+0x1da>
 800a298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a29c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a2a0:	46b2      	mov	sl, r6
 800a2a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a2a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	4b8b      	ldr	r3, [pc, #556]	; (800a4e0 <_dtoa_r+0x328>)
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	4659      	mov	r1, fp
 800a2b6:	f7f5 ffe7 	bl	8000288 <__aeabi_dsub>
 800a2ba:	a381      	add	r3, pc, #516	; (adr r3, 800a4c0 <_dtoa_r+0x308>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f6 f99a 	bl	80005f8 <__aeabi_dmul>
 800a2c4:	a380      	add	r3, pc, #512	; (adr r3, 800a4c8 <_dtoa_r+0x310>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f7f5 ffdf 	bl	800028c <__adddf3>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	460f      	mov	r7, r1
 800a2d4:	f7f6 f926 	bl	8000524 <__aeabi_i2d>
 800a2d8:	a37d      	add	r3, pc, #500	; (adr r3, 800a4d0 <_dtoa_r+0x318>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f6 f98b 	bl	80005f8 <__aeabi_dmul>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	f7f5 ffcf 	bl	800028c <__adddf3>
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	f7f6 fc31 	bl	8000b58 <__aeabi_d2iz>
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f6 fbec 	bl	8000adc <__aeabi_dcmplt>
 800a304:	b148      	cbz	r0, 800a31a <_dtoa_r+0x162>
 800a306:	4650      	mov	r0, sl
 800a308:	f7f6 f90c 	bl	8000524 <__aeabi_i2d>
 800a30c:	4632      	mov	r2, r6
 800a30e:	463b      	mov	r3, r7
 800a310:	f7f6 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800a314:	b908      	cbnz	r0, 800a31a <_dtoa_r+0x162>
 800a316:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a31a:	f1ba 0f16 	cmp.w	sl, #22
 800a31e:	d859      	bhi.n	800a3d4 <_dtoa_r+0x21c>
 800a320:	4970      	ldr	r1, [pc, #448]	; (800a4e4 <_dtoa_r+0x32c>)
 800a322:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a32e:	f7f6 fbf3 	bl	8000b18 <__aeabi_dcmpgt>
 800a332:	2800      	cmp	r0, #0
 800a334:	d050      	beq.n	800a3d8 <_dtoa_r+0x220>
 800a336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a33a:	2300      	movs	r3, #0
 800a33c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a33e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a340:	1b5d      	subs	r5, r3, r5
 800a342:	f1b5 0801 	subs.w	r8, r5, #1
 800a346:	bf49      	itett	mi
 800a348:	f1c5 0301 	rsbmi	r3, r5, #1
 800a34c:	2300      	movpl	r3, #0
 800a34e:	9305      	strmi	r3, [sp, #20]
 800a350:	f04f 0800 	movmi.w	r8, #0
 800a354:	bf58      	it	pl
 800a356:	9305      	strpl	r3, [sp, #20]
 800a358:	f1ba 0f00 	cmp.w	sl, #0
 800a35c:	db3e      	blt.n	800a3dc <_dtoa_r+0x224>
 800a35e:	2300      	movs	r3, #0
 800a360:	44d0      	add	r8, sl
 800a362:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a366:	9307      	str	r3, [sp, #28]
 800a368:	9b06      	ldr	r3, [sp, #24]
 800a36a:	2b09      	cmp	r3, #9
 800a36c:	f200 8090 	bhi.w	800a490 <_dtoa_r+0x2d8>
 800a370:	2b05      	cmp	r3, #5
 800a372:	bfc4      	itt	gt
 800a374:	3b04      	subgt	r3, #4
 800a376:	9306      	strgt	r3, [sp, #24]
 800a378:	9b06      	ldr	r3, [sp, #24]
 800a37a:	f1a3 0302 	sub.w	r3, r3, #2
 800a37e:	bfcc      	ite	gt
 800a380:	2500      	movgt	r5, #0
 800a382:	2501      	movle	r5, #1
 800a384:	2b03      	cmp	r3, #3
 800a386:	f200 808f 	bhi.w	800a4a8 <_dtoa_r+0x2f0>
 800a38a:	e8df f003 	tbb	[pc, r3]
 800a38e:	7f7d      	.short	0x7f7d
 800a390:	7131      	.short	0x7131
 800a392:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a396:	441d      	add	r5, r3
 800a398:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a39c:	2820      	cmp	r0, #32
 800a39e:	dd13      	ble.n	800a3c8 <_dtoa_r+0x210>
 800a3a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	fa08 f800 	lsl.w	r8, r8, r0
 800a3aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a3ae:	fa23 f000 	lsr.w	r0, r3, r0
 800a3b2:	ea48 0000 	orr.w	r0, r8, r0
 800a3b6:	f7f6 f8a5 	bl	8000504 <__aeabi_ui2d>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4682      	mov	sl, r0
 800a3be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a3c2:	3d01      	subs	r5, #1
 800a3c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3c6:	e772      	b.n	800a2ae <_dtoa_r+0xf6>
 800a3c8:	9b00      	ldr	r3, [sp, #0]
 800a3ca:	f1c0 0020 	rsb	r0, r0, #32
 800a3ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a3d2:	e7f0      	b.n	800a3b6 <_dtoa_r+0x1fe>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e7b1      	b.n	800a33c <_dtoa_r+0x184>
 800a3d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3da:	e7b0      	b.n	800a33e <_dtoa_r+0x186>
 800a3dc:	9b05      	ldr	r3, [sp, #20]
 800a3de:	eba3 030a 	sub.w	r3, r3, sl
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	f1ca 0300 	rsb	r3, sl, #0
 800a3e8:	9307      	str	r3, [sp, #28]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ee:	e7bb      	b.n	800a368 <_dtoa_r+0x1b0>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dd59      	ble.n	800a4ae <_dtoa_r+0x2f6>
 800a3fa:	9302      	str	r3, [sp, #8]
 800a3fc:	4699      	mov	r9, r3
 800a3fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a400:	2200      	movs	r2, #0
 800a402:	6072      	str	r2, [r6, #4]
 800a404:	2204      	movs	r2, #4
 800a406:	f102 0014 	add.w	r0, r2, #20
 800a40a:	4298      	cmp	r0, r3
 800a40c:	6871      	ldr	r1, [r6, #4]
 800a40e:	d953      	bls.n	800a4b8 <_dtoa_r+0x300>
 800a410:	4620      	mov	r0, r4
 800a412:	f000 ffe8 	bl	800b3e6 <_Balloc>
 800a416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a418:	6030      	str	r0, [r6, #0]
 800a41a:	f1b9 0f0e 	cmp.w	r9, #14
 800a41e:	f8d3 b000 	ldr.w	fp, [r3]
 800a422:	f200 80e6 	bhi.w	800a5f2 <_dtoa_r+0x43a>
 800a426:	2d00      	cmp	r5, #0
 800a428:	f000 80e3 	beq.w	800a5f2 <_dtoa_r+0x43a>
 800a42c:	ed9d 7b00 	vldr	d7, [sp]
 800a430:	f1ba 0f00 	cmp.w	sl, #0
 800a434:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a438:	dd74      	ble.n	800a524 <_dtoa_r+0x36c>
 800a43a:	4a2a      	ldr	r2, [pc, #168]	; (800a4e4 <_dtoa_r+0x32c>)
 800a43c:	f00a 030f 	and.w	r3, sl, #15
 800a440:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a444:	ed93 7b00 	vldr	d7, [r3]
 800a448:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a44c:	06f0      	lsls	r0, r6, #27
 800a44e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a452:	d565      	bpl.n	800a520 <_dtoa_r+0x368>
 800a454:	4b24      	ldr	r3, [pc, #144]	; (800a4e8 <_dtoa_r+0x330>)
 800a456:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a45a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a45e:	f7f6 f9f5 	bl	800084c <__aeabi_ddiv>
 800a462:	e9cd 0100 	strd	r0, r1, [sp]
 800a466:	f006 060f 	and.w	r6, r6, #15
 800a46a:	2503      	movs	r5, #3
 800a46c:	4f1e      	ldr	r7, [pc, #120]	; (800a4e8 <_dtoa_r+0x330>)
 800a46e:	e04c      	b.n	800a50a <_dtoa_r+0x352>
 800a470:	2301      	movs	r3, #1
 800a472:	930a      	str	r3, [sp, #40]	; 0x28
 800a474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a476:	4453      	add	r3, sl
 800a478:	f103 0901 	add.w	r9, r3, #1
 800a47c:	9302      	str	r3, [sp, #8]
 800a47e:	464b      	mov	r3, r9
 800a480:	2b01      	cmp	r3, #1
 800a482:	bfb8      	it	lt
 800a484:	2301      	movlt	r3, #1
 800a486:	e7ba      	b.n	800a3fe <_dtoa_r+0x246>
 800a488:	2300      	movs	r3, #0
 800a48a:	e7b2      	b.n	800a3f2 <_dtoa_r+0x23a>
 800a48c:	2300      	movs	r3, #0
 800a48e:	e7f0      	b.n	800a472 <_dtoa_r+0x2ba>
 800a490:	2501      	movs	r5, #1
 800a492:	2300      	movs	r3, #0
 800a494:	9306      	str	r3, [sp, #24]
 800a496:	950a      	str	r5, [sp, #40]	; 0x28
 800a498:	f04f 33ff 	mov.w	r3, #4294967295
 800a49c:	9302      	str	r3, [sp, #8]
 800a49e:	4699      	mov	r9, r3
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2312      	movs	r3, #18
 800a4a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a4a6:	e7aa      	b.n	800a3fe <_dtoa_r+0x246>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ac:	e7f4      	b.n	800a498 <_dtoa_r+0x2e0>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	4699      	mov	r9, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	e7f5      	b.n	800a4a4 <_dtoa_r+0x2ec>
 800a4b8:	3101      	adds	r1, #1
 800a4ba:	6071      	str	r1, [r6, #4]
 800a4bc:	0052      	lsls	r2, r2, #1
 800a4be:	e7a2      	b.n	800a406 <_dtoa_r+0x24e>
 800a4c0:	636f4361 	.word	0x636f4361
 800a4c4:	3fd287a7 	.word	0x3fd287a7
 800a4c8:	8b60c8b3 	.word	0x8b60c8b3
 800a4cc:	3fc68a28 	.word	0x3fc68a28
 800a4d0:	509f79fb 	.word	0x509f79fb
 800a4d4:	3fd34413 	.word	0x3fd34413
 800a4d8:	7ff00000 	.word	0x7ff00000
 800a4dc:	0800c1b9 	.word	0x0800c1b9
 800a4e0:	3ff80000 	.word	0x3ff80000
 800a4e4:	0800c278 	.word	0x0800c278
 800a4e8:	0800c250 	.word	0x0800c250
 800a4ec:	0800c241 	.word	0x0800c241
 800a4f0:	07f1      	lsls	r1, r6, #31
 800a4f2:	d508      	bpl.n	800a506 <_dtoa_r+0x34e>
 800a4f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4fc:	f7f6 f87c 	bl	80005f8 <__aeabi_dmul>
 800a500:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a504:	3501      	adds	r5, #1
 800a506:	1076      	asrs	r6, r6, #1
 800a508:	3708      	adds	r7, #8
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d1f0      	bne.n	800a4f0 <_dtoa_r+0x338>
 800a50e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a512:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a516:	f7f6 f999 	bl	800084c <__aeabi_ddiv>
 800a51a:	e9cd 0100 	strd	r0, r1, [sp]
 800a51e:	e01a      	b.n	800a556 <_dtoa_r+0x39e>
 800a520:	2502      	movs	r5, #2
 800a522:	e7a3      	b.n	800a46c <_dtoa_r+0x2b4>
 800a524:	f000 80a0 	beq.w	800a668 <_dtoa_r+0x4b0>
 800a528:	f1ca 0600 	rsb	r6, sl, #0
 800a52c:	4b9f      	ldr	r3, [pc, #636]	; (800a7ac <_dtoa_r+0x5f4>)
 800a52e:	4fa0      	ldr	r7, [pc, #640]	; (800a7b0 <_dtoa_r+0x5f8>)
 800a530:	f006 020f 	and.w	r2, r6, #15
 800a534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a540:	f7f6 f85a 	bl	80005f8 <__aeabi_dmul>
 800a544:	e9cd 0100 	strd	r0, r1, [sp]
 800a548:	1136      	asrs	r6, r6, #4
 800a54a:	2300      	movs	r3, #0
 800a54c:	2502      	movs	r5, #2
 800a54e:	2e00      	cmp	r6, #0
 800a550:	d17f      	bne.n	800a652 <_dtoa_r+0x49a>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e1      	bne.n	800a51a <_dtoa_r+0x362>
 800a556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 8087 	beq.w	800a66c <_dtoa_r+0x4b4>
 800a55e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a562:	2200      	movs	r2, #0
 800a564:	4b93      	ldr	r3, [pc, #588]	; (800a7b4 <_dtoa_r+0x5fc>)
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 fab7 	bl	8000adc <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d07c      	beq.n	800a66c <_dtoa_r+0x4b4>
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	d079      	beq.n	800a66c <_dtoa_r+0x4b4>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dd35      	ble.n	800a5ea <_dtoa_r+0x432>
 800a57e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a582:	9308      	str	r3, [sp, #32]
 800a584:	4639      	mov	r1, r7
 800a586:	2200      	movs	r2, #0
 800a588:	4b8b      	ldr	r3, [pc, #556]	; (800a7b8 <_dtoa_r+0x600>)
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7f6 f834 	bl	80005f8 <__aeabi_dmul>
 800a590:	e9cd 0100 	strd	r0, r1, [sp]
 800a594:	9f02      	ldr	r7, [sp, #8]
 800a596:	3501      	adds	r5, #1
 800a598:	4628      	mov	r0, r5
 800a59a:	f7f5 ffc3 	bl	8000524 <__aeabi_i2d>
 800a59e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5a2:	f7f6 f829 	bl	80005f8 <__aeabi_dmul>
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	4b84      	ldr	r3, [pc, #528]	; (800a7bc <_dtoa_r+0x604>)
 800a5aa:	f7f5 fe6f 	bl	800028c <__adddf3>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a5b4:	2f00      	cmp	r7, #0
 800a5b6:	d15d      	bne.n	800a674 <_dtoa_r+0x4bc>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	4b81      	ldr	r3, [pc, #516]	; (800a7c0 <_dtoa_r+0x608>)
 800a5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5c0:	f7f5 fe62 	bl	8000288 <__aeabi_dsub>
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4633      	mov	r3, r6
 800a5c8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5cc:	f7f6 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f040 8288 	bne.w	800aae6 <_dtoa_r+0x92e>
 800a5d6:	462a      	mov	r2, r5
 800a5d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a5dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5e0:	f7f6 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f040 827c 	bne.w	800aae2 <_dtoa_r+0x92a>
 800a5ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5ee:	e9cd 2300 	strd	r2, r3, [sp]
 800a5f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f2c0 8150 	blt.w	800a89a <_dtoa_r+0x6e2>
 800a5fa:	f1ba 0f0e 	cmp.w	sl, #14
 800a5fe:	f300 814c 	bgt.w	800a89a <_dtoa_r+0x6e2>
 800a602:	4b6a      	ldr	r3, [pc, #424]	; (800a7ac <_dtoa_r+0x5f4>)
 800a604:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a608:	ed93 7b00 	vldr	d7, [r3]
 800a60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a614:	f280 80d8 	bge.w	800a7c8 <_dtoa_r+0x610>
 800a618:	f1b9 0f00 	cmp.w	r9, #0
 800a61c:	f300 80d4 	bgt.w	800a7c8 <_dtoa_r+0x610>
 800a620:	f040 825e 	bne.w	800aae0 <_dtoa_r+0x928>
 800a624:	2200      	movs	r2, #0
 800a626:	4b66      	ldr	r3, [pc, #408]	; (800a7c0 <_dtoa_r+0x608>)
 800a628:	ec51 0b17 	vmov	r0, r1, d7
 800a62c:	f7f5 ffe4 	bl	80005f8 <__aeabi_dmul>
 800a630:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a634:	f7f6 fa66 	bl	8000b04 <__aeabi_dcmpge>
 800a638:	464f      	mov	r7, r9
 800a63a:	464e      	mov	r6, r9
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f040 8234 	bne.w	800aaaa <_dtoa_r+0x8f2>
 800a642:	2331      	movs	r3, #49	; 0x31
 800a644:	f10b 0501 	add.w	r5, fp, #1
 800a648:	f88b 3000 	strb.w	r3, [fp]
 800a64c:	f10a 0a01 	add.w	sl, sl, #1
 800a650:	e22f      	b.n	800aab2 <_dtoa_r+0x8fa>
 800a652:	07f2      	lsls	r2, r6, #31
 800a654:	d505      	bpl.n	800a662 <_dtoa_r+0x4aa>
 800a656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a65a:	f7f5 ffcd 	bl	80005f8 <__aeabi_dmul>
 800a65e:	3501      	adds	r5, #1
 800a660:	2301      	movs	r3, #1
 800a662:	1076      	asrs	r6, r6, #1
 800a664:	3708      	adds	r7, #8
 800a666:	e772      	b.n	800a54e <_dtoa_r+0x396>
 800a668:	2502      	movs	r5, #2
 800a66a:	e774      	b.n	800a556 <_dtoa_r+0x39e>
 800a66c:	f8cd a020 	str.w	sl, [sp, #32]
 800a670:	464f      	mov	r7, r9
 800a672:	e791      	b.n	800a598 <_dtoa_r+0x3e0>
 800a674:	4b4d      	ldr	r3, [pc, #308]	; (800a7ac <_dtoa_r+0x5f4>)
 800a676:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a67a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a680:	2b00      	cmp	r3, #0
 800a682:	d047      	beq.n	800a714 <_dtoa_r+0x55c>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	2000      	movs	r0, #0
 800a68a:	494e      	ldr	r1, [pc, #312]	; (800a7c4 <_dtoa_r+0x60c>)
 800a68c:	f7f6 f8de 	bl	800084c <__aeabi_ddiv>
 800a690:	462a      	mov	r2, r5
 800a692:	4633      	mov	r3, r6
 800a694:	f7f5 fdf8 	bl	8000288 <__aeabi_dsub>
 800a698:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a69c:	465d      	mov	r5, fp
 800a69e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6a2:	f7f6 fa59 	bl	8000b58 <__aeabi_d2iz>
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	f7f5 ff3c 	bl	8000524 <__aeabi_i2d>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6b4:	f7f5 fde8 	bl	8000288 <__aeabi_dsub>
 800a6b8:	3630      	adds	r6, #48	; 0x30
 800a6ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a6be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c6:	f7f6 fa09 	bl	8000adc <__aeabi_dcmplt>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d163      	bne.n	800a796 <_dtoa_r+0x5de>
 800a6ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	4937      	ldr	r1, [pc, #220]	; (800a7b4 <_dtoa_r+0x5fc>)
 800a6d6:	f7f5 fdd7 	bl	8000288 <__aeabi_dsub>
 800a6da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6de:	f7f6 f9fd 	bl	8000adc <__aeabi_dcmplt>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f040 80b7 	bne.w	800a856 <_dtoa_r+0x69e>
 800a6e8:	eba5 030b 	sub.w	r3, r5, fp
 800a6ec:	429f      	cmp	r7, r3
 800a6ee:	f77f af7c 	ble.w	800a5ea <_dtoa_r+0x432>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4b30      	ldr	r3, [pc, #192]	; (800a7b8 <_dtoa_r+0x600>)
 800a6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6fa:	f7f5 ff7d 	bl	80005f8 <__aeabi_dmul>
 800a6fe:	2200      	movs	r2, #0
 800a700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a704:	4b2c      	ldr	r3, [pc, #176]	; (800a7b8 <_dtoa_r+0x600>)
 800a706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	e9cd 0100 	strd	r0, r1, [sp]
 800a712:	e7c4      	b.n	800a69e <_dtoa_r+0x4e6>
 800a714:	462a      	mov	r2, r5
 800a716:	4633      	mov	r3, r6
 800a718:	f7f5 ff6e 	bl	80005f8 <__aeabi_dmul>
 800a71c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a720:	eb0b 0507 	add.w	r5, fp, r7
 800a724:	465e      	mov	r6, fp
 800a726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a72a:	f7f6 fa15 	bl	8000b58 <__aeabi_d2iz>
 800a72e:	4607      	mov	r7, r0
 800a730:	f7f5 fef8 	bl	8000524 <__aeabi_i2d>
 800a734:	3730      	adds	r7, #48	; 0x30
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a73e:	f7f5 fda3 	bl	8000288 <__aeabi_dsub>
 800a742:	f806 7b01 	strb.w	r7, [r6], #1
 800a746:	42ae      	cmp	r6, r5
 800a748:	e9cd 0100 	strd	r0, r1, [sp]
 800a74c:	f04f 0200 	mov.w	r2, #0
 800a750:	d126      	bne.n	800a7a0 <_dtoa_r+0x5e8>
 800a752:	4b1c      	ldr	r3, [pc, #112]	; (800a7c4 <_dtoa_r+0x60c>)
 800a754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a758:	f7f5 fd98 	bl	800028c <__adddf3>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a764:	f7f6 f9d8 	bl	8000b18 <__aeabi_dcmpgt>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d174      	bne.n	800a856 <_dtoa_r+0x69e>
 800a76c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a770:	2000      	movs	r0, #0
 800a772:	4914      	ldr	r1, [pc, #80]	; (800a7c4 <_dtoa_r+0x60c>)
 800a774:	f7f5 fd88 	bl	8000288 <__aeabi_dsub>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a780:	f7f6 f9ac 	bl	8000adc <__aeabi_dcmplt>
 800a784:	2800      	cmp	r0, #0
 800a786:	f43f af30 	beq.w	800a5ea <_dtoa_r+0x432>
 800a78a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a78e:	2b30      	cmp	r3, #48	; 0x30
 800a790:	f105 32ff 	add.w	r2, r5, #4294967295
 800a794:	d002      	beq.n	800a79c <_dtoa_r+0x5e4>
 800a796:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a79a:	e04a      	b.n	800a832 <_dtoa_r+0x67a>
 800a79c:	4615      	mov	r5, r2
 800a79e:	e7f4      	b.n	800a78a <_dtoa_r+0x5d2>
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <_dtoa_r+0x600>)
 800a7a2:	f7f5 ff29 	bl	80005f8 <__aeabi_dmul>
 800a7a6:	e9cd 0100 	strd	r0, r1, [sp]
 800a7aa:	e7bc      	b.n	800a726 <_dtoa_r+0x56e>
 800a7ac:	0800c278 	.word	0x0800c278
 800a7b0:	0800c250 	.word	0x0800c250
 800a7b4:	3ff00000 	.word	0x3ff00000
 800a7b8:	40240000 	.word	0x40240000
 800a7bc:	401c0000 	.word	0x401c0000
 800a7c0:	40140000 	.word	0x40140000
 800a7c4:	3fe00000 	.word	0x3fe00000
 800a7c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7cc:	465d      	mov	r5, fp
 800a7ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f6 f839 	bl	800084c <__aeabi_ddiv>
 800a7da:	f7f6 f9bd 	bl	8000b58 <__aeabi_d2iz>
 800a7de:	4680      	mov	r8, r0
 800a7e0:	f7f5 fea0 	bl	8000524 <__aeabi_i2d>
 800a7e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7e8:	f7f5 ff06 	bl	80005f8 <__aeabi_dmul>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a7f8:	f7f5 fd46 	bl	8000288 <__aeabi_dsub>
 800a7fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a800:	eba5 060b 	sub.w	r6, r5, fp
 800a804:	45b1      	cmp	r9, r6
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	d139      	bne.n	800a880 <_dtoa_r+0x6c8>
 800a80c:	f7f5 fd3e 	bl	800028c <__adddf3>
 800a810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	f7f6 f97e 	bl	8000b18 <__aeabi_dcmpgt>
 800a81c:	b9c8      	cbnz	r0, 800a852 <_dtoa_r+0x69a>
 800a81e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a822:	4630      	mov	r0, r6
 800a824:	4639      	mov	r1, r7
 800a826:	f7f6 f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a82a:	b110      	cbz	r0, 800a832 <_dtoa_r+0x67a>
 800a82c:	f018 0f01 	tst.w	r8, #1
 800a830:	d10f      	bne.n	800a852 <_dtoa_r+0x69a>
 800a832:	9904      	ldr	r1, [sp, #16]
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fe0a 	bl	800b44e <_Bfree>
 800a83a:	2300      	movs	r3, #0
 800a83c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a83e:	702b      	strb	r3, [r5, #0]
 800a840:	f10a 0301 	add.w	r3, sl, #1
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 8241 	beq.w	800acd0 <_dtoa_r+0xb18>
 800a84e:	601d      	str	r5, [r3, #0]
 800a850:	e23e      	b.n	800acd0 <_dtoa_r+0xb18>
 800a852:	f8cd a020 	str.w	sl, [sp, #32]
 800a856:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a85a:	2a39      	cmp	r2, #57	; 0x39
 800a85c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a860:	d108      	bne.n	800a874 <_dtoa_r+0x6bc>
 800a862:	459b      	cmp	fp, r3
 800a864:	d10a      	bne.n	800a87c <_dtoa_r+0x6c4>
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	3301      	adds	r3, #1
 800a86a:	9308      	str	r3, [sp, #32]
 800a86c:	2330      	movs	r3, #48	; 0x30
 800a86e:	f88b 3000 	strb.w	r3, [fp]
 800a872:	465b      	mov	r3, fp
 800a874:	781a      	ldrb	r2, [r3, #0]
 800a876:	3201      	adds	r2, #1
 800a878:	701a      	strb	r2, [r3, #0]
 800a87a:	e78c      	b.n	800a796 <_dtoa_r+0x5de>
 800a87c:	461d      	mov	r5, r3
 800a87e:	e7ea      	b.n	800a856 <_dtoa_r+0x69e>
 800a880:	2200      	movs	r2, #0
 800a882:	4b9b      	ldr	r3, [pc, #620]	; (800aaf0 <_dtoa_r+0x938>)
 800a884:	f7f5 feb8 	bl	80005f8 <__aeabi_dmul>
 800a888:	2200      	movs	r2, #0
 800a88a:	2300      	movs	r3, #0
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	f7f6 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a894:	2800      	cmp	r0, #0
 800a896:	d09a      	beq.n	800a7ce <_dtoa_r+0x616>
 800a898:	e7cb      	b.n	800a832 <_dtoa_r+0x67a>
 800a89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	f000 808b 	beq.w	800a9b8 <_dtoa_r+0x800>
 800a8a2:	9a06      	ldr	r2, [sp, #24]
 800a8a4:	2a01      	cmp	r2, #1
 800a8a6:	dc6e      	bgt.n	800a986 <_dtoa_r+0x7ce>
 800a8a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d067      	beq.n	800a97e <_dtoa_r+0x7c6>
 800a8ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8b2:	9f07      	ldr	r7, [sp, #28]
 800a8b4:	9d05      	ldr	r5, [sp, #20]
 800a8b6:	9a05      	ldr	r2, [sp, #20]
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	441a      	add	r2, r3
 800a8bc:	4620      	mov	r0, r4
 800a8be:	9205      	str	r2, [sp, #20]
 800a8c0:	4498      	add	r8, r3
 800a8c2:	f000 fea2 	bl	800b60a <__i2b>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	dd0c      	ble.n	800a8e6 <_dtoa_r+0x72e>
 800a8cc:	f1b8 0f00 	cmp.w	r8, #0
 800a8d0:	dd09      	ble.n	800a8e6 <_dtoa_r+0x72e>
 800a8d2:	4545      	cmp	r5, r8
 800a8d4:	9a05      	ldr	r2, [sp, #20]
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	bfa8      	it	ge
 800a8da:	4643      	movge	r3, r8
 800a8dc:	1ad2      	subs	r2, r2, r3
 800a8de:	9205      	str	r2, [sp, #20]
 800a8e0:	1aed      	subs	r5, r5, r3
 800a8e2:	eba8 0803 	sub.w	r8, r8, r3
 800a8e6:	9b07      	ldr	r3, [sp, #28]
 800a8e8:	b1eb      	cbz	r3, 800a926 <_dtoa_r+0x76e>
 800a8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d067      	beq.n	800a9c0 <_dtoa_r+0x808>
 800a8f0:	b18f      	cbz	r7, 800a916 <_dtoa_r+0x75e>
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	463a      	mov	r2, r7
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 ff26 	bl	800b748 <__pow5mult>
 800a8fc:	9a04      	ldr	r2, [sp, #16]
 800a8fe:	4601      	mov	r1, r0
 800a900:	4606      	mov	r6, r0
 800a902:	4620      	mov	r0, r4
 800a904:	f000 fe8a 	bl	800b61c <__multiply>
 800a908:	9904      	ldr	r1, [sp, #16]
 800a90a:	9008      	str	r0, [sp, #32]
 800a90c:	4620      	mov	r0, r4
 800a90e:	f000 fd9e 	bl	800b44e <_Bfree>
 800a912:	9b08      	ldr	r3, [sp, #32]
 800a914:	9304      	str	r3, [sp, #16]
 800a916:	9b07      	ldr	r3, [sp, #28]
 800a918:	1bda      	subs	r2, r3, r7
 800a91a:	d004      	beq.n	800a926 <_dtoa_r+0x76e>
 800a91c:	9904      	ldr	r1, [sp, #16]
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 ff12 	bl	800b748 <__pow5mult>
 800a924:	9004      	str	r0, [sp, #16]
 800a926:	2101      	movs	r1, #1
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 fe6e 	bl	800b60a <__i2b>
 800a92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a930:	4607      	mov	r7, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 81d0 	beq.w	800acd8 <_dtoa_r+0xb20>
 800a938:	461a      	mov	r2, r3
 800a93a:	4601      	mov	r1, r0
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 ff03 	bl	800b748 <__pow5mult>
 800a942:	9b06      	ldr	r3, [sp, #24]
 800a944:	2b01      	cmp	r3, #1
 800a946:	4607      	mov	r7, r0
 800a948:	dc40      	bgt.n	800a9cc <_dtoa_r+0x814>
 800a94a:	9b00      	ldr	r3, [sp, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d139      	bne.n	800a9c4 <_dtoa_r+0x80c>
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a956:	2b00      	cmp	r3, #0
 800a958:	d136      	bne.n	800a9c8 <_dtoa_r+0x810>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a960:	0d1b      	lsrs	r3, r3, #20
 800a962:	051b      	lsls	r3, r3, #20
 800a964:	b12b      	cbz	r3, 800a972 <_dtoa_r+0x7ba>
 800a966:	9b05      	ldr	r3, [sp, #20]
 800a968:	3301      	adds	r3, #1
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	f108 0801 	add.w	r8, r8, #1
 800a970:	2301      	movs	r3, #1
 800a972:	9307      	str	r3, [sp, #28]
 800a974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a976:	2b00      	cmp	r3, #0
 800a978:	d12a      	bne.n	800a9d0 <_dtoa_r+0x818>
 800a97a:	2001      	movs	r0, #1
 800a97c:	e030      	b.n	800a9e0 <_dtoa_r+0x828>
 800a97e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a980:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a984:	e795      	b.n	800a8b2 <_dtoa_r+0x6fa>
 800a986:	9b07      	ldr	r3, [sp, #28]
 800a988:	f109 37ff 	add.w	r7, r9, #4294967295
 800a98c:	42bb      	cmp	r3, r7
 800a98e:	bfbf      	itttt	lt
 800a990:	9b07      	ldrlt	r3, [sp, #28]
 800a992:	9707      	strlt	r7, [sp, #28]
 800a994:	1afa      	sublt	r2, r7, r3
 800a996:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a998:	bfbb      	ittet	lt
 800a99a:	189b      	addlt	r3, r3, r2
 800a99c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a99e:	1bdf      	subge	r7, r3, r7
 800a9a0:	2700      	movlt	r7, #0
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	bfb5      	itete	lt
 800a9a8:	9b05      	ldrlt	r3, [sp, #20]
 800a9aa:	9d05      	ldrge	r5, [sp, #20]
 800a9ac:	eba3 0509 	sublt.w	r5, r3, r9
 800a9b0:	464b      	movge	r3, r9
 800a9b2:	bfb8      	it	lt
 800a9b4:	2300      	movlt	r3, #0
 800a9b6:	e77e      	b.n	800a8b6 <_dtoa_r+0x6fe>
 800a9b8:	9f07      	ldr	r7, [sp, #28]
 800a9ba:	9d05      	ldr	r5, [sp, #20]
 800a9bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a9be:	e783      	b.n	800a8c8 <_dtoa_r+0x710>
 800a9c0:	9a07      	ldr	r2, [sp, #28]
 800a9c2:	e7ab      	b.n	800a91c <_dtoa_r+0x764>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e7d4      	b.n	800a972 <_dtoa_r+0x7ba>
 800a9c8:	9b00      	ldr	r3, [sp, #0]
 800a9ca:	e7d2      	b.n	800a972 <_dtoa_r+0x7ba>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9307      	str	r3, [sp, #28]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a9d6:	6918      	ldr	r0, [r3, #16]
 800a9d8:	f000 fdc9 	bl	800b56e <__hi0bits>
 800a9dc:	f1c0 0020 	rsb	r0, r0, #32
 800a9e0:	4440      	add	r0, r8
 800a9e2:	f010 001f 	ands.w	r0, r0, #31
 800a9e6:	d047      	beq.n	800aa78 <_dtoa_r+0x8c0>
 800a9e8:	f1c0 0320 	rsb	r3, r0, #32
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	dd3b      	ble.n	800aa68 <_dtoa_r+0x8b0>
 800a9f0:	9b05      	ldr	r3, [sp, #20]
 800a9f2:	f1c0 001c 	rsb	r0, r0, #28
 800a9f6:	4403      	add	r3, r0
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	4405      	add	r5, r0
 800a9fc:	4480      	add	r8, r0
 800a9fe:	9b05      	ldr	r3, [sp, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dd05      	ble.n	800aa10 <_dtoa_r+0x858>
 800aa04:	461a      	mov	r2, r3
 800aa06:	9904      	ldr	r1, [sp, #16]
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 feeb 	bl	800b7e4 <__lshift>
 800aa0e:	9004      	str	r0, [sp, #16]
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	dd05      	ble.n	800aa22 <_dtoa_r+0x86a>
 800aa16:	4639      	mov	r1, r7
 800aa18:	4642      	mov	r2, r8
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fee2 	bl	800b7e4 <__lshift>
 800aa20:	4607      	mov	r7, r0
 800aa22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa24:	b353      	cbz	r3, 800aa7c <_dtoa_r+0x8c4>
 800aa26:	4639      	mov	r1, r7
 800aa28:	9804      	ldr	r0, [sp, #16]
 800aa2a:	f000 ff2f 	bl	800b88c <__mcmp>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	da24      	bge.n	800aa7c <_dtoa_r+0x8c4>
 800aa32:	2300      	movs	r3, #0
 800aa34:	220a      	movs	r2, #10
 800aa36:	9904      	ldr	r1, [sp, #16]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fd1f 	bl	800b47c <__multadd>
 800aa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa40:	9004      	str	r0, [sp, #16]
 800aa42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 814d 	beq.w	800ace6 <_dtoa_r+0xb2e>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4631      	mov	r1, r6
 800aa50:	220a      	movs	r2, #10
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fd12 	bl	800b47c <__multadd>
 800aa58:	9b02      	ldr	r3, [sp, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	dc4f      	bgt.n	800ab00 <_dtoa_r+0x948>
 800aa60:	9b06      	ldr	r3, [sp, #24]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	dd4c      	ble.n	800ab00 <_dtoa_r+0x948>
 800aa66:	e011      	b.n	800aa8c <_dtoa_r+0x8d4>
 800aa68:	d0c9      	beq.n	800a9fe <_dtoa_r+0x846>
 800aa6a:	9a05      	ldr	r2, [sp, #20]
 800aa6c:	331c      	adds	r3, #28
 800aa6e:	441a      	add	r2, r3
 800aa70:	9205      	str	r2, [sp, #20]
 800aa72:	441d      	add	r5, r3
 800aa74:	4498      	add	r8, r3
 800aa76:	e7c2      	b.n	800a9fe <_dtoa_r+0x846>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	e7f6      	b.n	800aa6a <_dtoa_r+0x8b2>
 800aa7c:	f1b9 0f00 	cmp.w	r9, #0
 800aa80:	dc38      	bgt.n	800aaf4 <_dtoa_r+0x93c>
 800aa82:	9b06      	ldr	r3, [sp, #24]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	dd35      	ble.n	800aaf4 <_dtoa_r+0x93c>
 800aa88:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa8c:	9b02      	ldr	r3, [sp, #8]
 800aa8e:	b963      	cbnz	r3, 800aaaa <_dtoa_r+0x8f2>
 800aa90:	4639      	mov	r1, r7
 800aa92:	2205      	movs	r2, #5
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fcf1 	bl	800b47c <__multadd>
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	9804      	ldr	r0, [sp, #16]
 800aaa0:	f000 fef4 	bl	800b88c <__mcmp>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f73f adcc 	bgt.w	800a642 <_dtoa_r+0x48a>
 800aaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaac:	465d      	mov	r5, fp
 800aaae:	ea6f 0a03 	mvn.w	sl, r3
 800aab2:	f04f 0900 	mov.w	r9, #0
 800aab6:	4639      	mov	r1, r7
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fcc8 	bl	800b44e <_Bfree>
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	f43f aeb7 	beq.w	800a832 <_dtoa_r+0x67a>
 800aac4:	f1b9 0f00 	cmp.w	r9, #0
 800aac8:	d005      	beq.n	800aad6 <_dtoa_r+0x91e>
 800aaca:	45b1      	cmp	r9, r6
 800aacc:	d003      	beq.n	800aad6 <_dtoa_r+0x91e>
 800aace:	4649      	mov	r1, r9
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fcbc 	bl	800b44e <_Bfree>
 800aad6:	4631      	mov	r1, r6
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fcb8 	bl	800b44e <_Bfree>
 800aade:	e6a8      	b.n	800a832 <_dtoa_r+0x67a>
 800aae0:	2700      	movs	r7, #0
 800aae2:	463e      	mov	r6, r7
 800aae4:	e7e1      	b.n	800aaaa <_dtoa_r+0x8f2>
 800aae6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aaea:	463e      	mov	r6, r7
 800aaec:	e5a9      	b.n	800a642 <_dtoa_r+0x48a>
 800aaee:	bf00      	nop
 800aaf0:	40240000 	.word	0x40240000
 800aaf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 80fa 	beq.w	800acf4 <_dtoa_r+0xb3c>
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	dd05      	ble.n	800ab10 <_dtoa_r+0x958>
 800ab04:	4631      	mov	r1, r6
 800ab06:	462a      	mov	r2, r5
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fe6b 	bl	800b7e4 <__lshift>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	9b07      	ldr	r3, [sp, #28]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d04c      	beq.n	800abb0 <_dtoa_r+0x9f8>
 800ab16:	6871      	ldr	r1, [r6, #4]
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fc64 	bl	800b3e6 <_Balloc>
 800ab1e:	6932      	ldr	r2, [r6, #16]
 800ab20:	3202      	adds	r2, #2
 800ab22:	4605      	mov	r5, r0
 800ab24:	0092      	lsls	r2, r2, #2
 800ab26:	f106 010c 	add.w	r1, r6, #12
 800ab2a:	300c      	adds	r0, #12
 800ab2c:	f000 fc50 	bl	800b3d0 <memcpy>
 800ab30:	2201      	movs	r2, #1
 800ab32:	4629      	mov	r1, r5
 800ab34:	4620      	mov	r0, r4
 800ab36:	f000 fe55 	bl	800b7e4 <__lshift>
 800ab3a:	9b00      	ldr	r3, [sp, #0]
 800ab3c:	f8cd b014 	str.w	fp, [sp, #20]
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	46b1      	mov	r9, r6
 800ab46:	9307      	str	r3, [sp, #28]
 800ab48:	4606      	mov	r6, r0
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	9804      	ldr	r0, [sp, #16]
 800ab4e:	f7ff faa5 	bl	800a09c <quorem>
 800ab52:	4649      	mov	r1, r9
 800ab54:	4605      	mov	r5, r0
 800ab56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab5a:	9804      	ldr	r0, [sp, #16]
 800ab5c:	f000 fe96 	bl	800b88c <__mcmp>
 800ab60:	4632      	mov	r2, r6
 800ab62:	9000      	str	r0, [sp, #0]
 800ab64:	4639      	mov	r1, r7
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 feaa 	bl	800b8c0 <__mdiff>
 800ab6c:	68c3      	ldr	r3, [r0, #12]
 800ab6e:	4602      	mov	r2, r0
 800ab70:	bb03      	cbnz	r3, 800abb4 <_dtoa_r+0x9fc>
 800ab72:	4601      	mov	r1, r0
 800ab74:	9008      	str	r0, [sp, #32]
 800ab76:	9804      	ldr	r0, [sp, #16]
 800ab78:	f000 fe88 	bl	800b88c <__mcmp>
 800ab7c:	9a08      	ldr	r2, [sp, #32]
 800ab7e:	4603      	mov	r3, r0
 800ab80:	4611      	mov	r1, r2
 800ab82:	4620      	mov	r0, r4
 800ab84:	9308      	str	r3, [sp, #32]
 800ab86:	f000 fc62 	bl	800b44e <_Bfree>
 800ab8a:	9b08      	ldr	r3, [sp, #32]
 800ab8c:	b9a3      	cbnz	r3, 800abb8 <_dtoa_r+0xa00>
 800ab8e:	9a06      	ldr	r2, [sp, #24]
 800ab90:	b992      	cbnz	r2, 800abb8 <_dtoa_r+0xa00>
 800ab92:	9a07      	ldr	r2, [sp, #28]
 800ab94:	b982      	cbnz	r2, 800abb8 <_dtoa_r+0xa00>
 800ab96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab9a:	d029      	beq.n	800abf0 <_dtoa_r+0xa38>
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd01      	ble.n	800aba6 <_dtoa_r+0x9ee>
 800aba2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aba6:	9b05      	ldr	r3, [sp, #20]
 800aba8:	1c5d      	adds	r5, r3, #1
 800abaa:	f883 8000 	strb.w	r8, [r3]
 800abae:	e782      	b.n	800aab6 <_dtoa_r+0x8fe>
 800abb0:	4630      	mov	r0, r6
 800abb2:	e7c2      	b.n	800ab3a <_dtoa_r+0x982>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e7e3      	b.n	800ab80 <_dtoa_r+0x9c8>
 800abb8:	9a00      	ldr	r2, [sp, #0]
 800abba:	2a00      	cmp	r2, #0
 800abbc:	db04      	blt.n	800abc8 <_dtoa_r+0xa10>
 800abbe:	d125      	bne.n	800ac0c <_dtoa_r+0xa54>
 800abc0:	9a06      	ldr	r2, [sp, #24]
 800abc2:	bb1a      	cbnz	r2, 800ac0c <_dtoa_r+0xa54>
 800abc4:	9a07      	ldr	r2, [sp, #28]
 800abc6:	bb0a      	cbnz	r2, 800ac0c <_dtoa_r+0xa54>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	ddec      	ble.n	800aba6 <_dtoa_r+0x9ee>
 800abcc:	2201      	movs	r2, #1
 800abce:	9904      	ldr	r1, [sp, #16]
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fe07 	bl	800b7e4 <__lshift>
 800abd6:	4639      	mov	r1, r7
 800abd8:	9004      	str	r0, [sp, #16]
 800abda:	f000 fe57 	bl	800b88c <__mcmp>
 800abde:	2800      	cmp	r0, #0
 800abe0:	dc03      	bgt.n	800abea <_dtoa_r+0xa32>
 800abe2:	d1e0      	bne.n	800aba6 <_dtoa_r+0x9ee>
 800abe4:	f018 0f01 	tst.w	r8, #1
 800abe8:	d0dd      	beq.n	800aba6 <_dtoa_r+0x9ee>
 800abea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abee:	d1d8      	bne.n	800aba2 <_dtoa_r+0x9ea>
 800abf0:	9b05      	ldr	r3, [sp, #20]
 800abf2:	9a05      	ldr	r2, [sp, #20]
 800abf4:	1c5d      	adds	r5, r3, #1
 800abf6:	2339      	movs	r3, #57	; 0x39
 800abf8:	7013      	strb	r3, [r2, #0]
 800abfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abfe:	2b39      	cmp	r3, #57	; 0x39
 800ac00:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac04:	d04f      	beq.n	800aca6 <_dtoa_r+0xaee>
 800ac06:	3301      	adds	r3, #1
 800ac08:	7013      	strb	r3, [r2, #0]
 800ac0a:	e754      	b.n	800aab6 <_dtoa_r+0x8fe>
 800ac0c:	9a05      	ldr	r2, [sp, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f102 0501 	add.w	r5, r2, #1
 800ac14:	dd06      	ble.n	800ac24 <_dtoa_r+0xa6c>
 800ac16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac1a:	d0e9      	beq.n	800abf0 <_dtoa_r+0xa38>
 800ac1c:	f108 0801 	add.w	r8, r8, #1
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	e7c2      	b.n	800abaa <_dtoa_r+0x9f2>
 800ac24:	9a02      	ldr	r2, [sp, #8]
 800ac26:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ac2a:	eba5 030b 	sub.w	r3, r5, fp
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d021      	beq.n	800ac76 <_dtoa_r+0xabe>
 800ac32:	2300      	movs	r3, #0
 800ac34:	220a      	movs	r2, #10
 800ac36:	9904      	ldr	r1, [sp, #16]
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fc1f 	bl	800b47c <__multadd>
 800ac3e:	45b1      	cmp	r9, r6
 800ac40:	9004      	str	r0, [sp, #16]
 800ac42:	f04f 0300 	mov.w	r3, #0
 800ac46:	f04f 020a 	mov.w	r2, #10
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	d105      	bne.n	800ac5c <_dtoa_r+0xaa4>
 800ac50:	f000 fc14 	bl	800b47c <__multadd>
 800ac54:	4681      	mov	r9, r0
 800ac56:	4606      	mov	r6, r0
 800ac58:	9505      	str	r5, [sp, #20]
 800ac5a:	e776      	b.n	800ab4a <_dtoa_r+0x992>
 800ac5c:	f000 fc0e 	bl	800b47c <__multadd>
 800ac60:	4631      	mov	r1, r6
 800ac62:	4681      	mov	r9, r0
 800ac64:	2300      	movs	r3, #0
 800ac66:	220a      	movs	r2, #10
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fc07 	bl	800b47c <__multadd>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	e7f2      	b.n	800ac58 <_dtoa_r+0xaa0>
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	2201      	movs	r2, #1
 800ac78:	9904      	ldr	r1, [sp, #16]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fdb2 	bl	800b7e4 <__lshift>
 800ac80:	4639      	mov	r1, r7
 800ac82:	9004      	str	r0, [sp, #16]
 800ac84:	f000 fe02 	bl	800b88c <__mcmp>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dcb6      	bgt.n	800abfa <_dtoa_r+0xa42>
 800ac8c:	d102      	bne.n	800ac94 <_dtoa_r+0xadc>
 800ac8e:	f018 0f01 	tst.w	r8, #1
 800ac92:	d1b2      	bne.n	800abfa <_dtoa_r+0xa42>
 800ac94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac98:	2b30      	cmp	r3, #48	; 0x30
 800ac9a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac9e:	f47f af0a 	bne.w	800aab6 <_dtoa_r+0x8fe>
 800aca2:	4615      	mov	r5, r2
 800aca4:	e7f6      	b.n	800ac94 <_dtoa_r+0xadc>
 800aca6:	4593      	cmp	fp, r2
 800aca8:	d105      	bne.n	800acb6 <_dtoa_r+0xafe>
 800acaa:	2331      	movs	r3, #49	; 0x31
 800acac:	f10a 0a01 	add.w	sl, sl, #1
 800acb0:	f88b 3000 	strb.w	r3, [fp]
 800acb4:	e6ff      	b.n	800aab6 <_dtoa_r+0x8fe>
 800acb6:	4615      	mov	r5, r2
 800acb8:	e79f      	b.n	800abfa <_dtoa_r+0xa42>
 800acba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ad20 <_dtoa_r+0xb68>
 800acbe:	e007      	b.n	800acd0 <_dtoa_r+0xb18>
 800acc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acc2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ad24 <_dtoa_r+0xb6c>
 800acc6:	b11b      	cbz	r3, 800acd0 <_dtoa_r+0xb18>
 800acc8:	f10b 0308 	add.w	r3, fp, #8
 800accc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	4658      	mov	r0, fp
 800acd2:	b017      	add	sp, #92	; 0x5c
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd8:	9b06      	ldr	r3, [sp, #24]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	f77f ae35 	ble.w	800a94a <_dtoa_r+0x792>
 800ace0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ace2:	9307      	str	r3, [sp, #28]
 800ace4:	e649      	b.n	800a97a <_dtoa_r+0x7c2>
 800ace6:	9b02      	ldr	r3, [sp, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dc03      	bgt.n	800acf4 <_dtoa_r+0xb3c>
 800acec:	9b06      	ldr	r3, [sp, #24]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	f73f aecc 	bgt.w	800aa8c <_dtoa_r+0x8d4>
 800acf4:	465d      	mov	r5, fp
 800acf6:	4639      	mov	r1, r7
 800acf8:	9804      	ldr	r0, [sp, #16]
 800acfa:	f7ff f9cf 	bl	800a09c <quorem>
 800acfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad02:	f805 8b01 	strb.w	r8, [r5], #1
 800ad06:	9a02      	ldr	r2, [sp, #8]
 800ad08:	eba5 030b 	sub.w	r3, r5, fp
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	ddb0      	ble.n	800ac72 <_dtoa_r+0xaba>
 800ad10:	2300      	movs	r3, #0
 800ad12:	220a      	movs	r2, #10
 800ad14:	9904      	ldr	r1, [sp, #16]
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 fbb0 	bl	800b47c <__multadd>
 800ad1c:	9004      	str	r0, [sp, #16]
 800ad1e:	e7ea      	b.n	800acf6 <_dtoa_r+0xb3e>
 800ad20:	0800c1b8 	.word	0x0800c1b8
 800ad24:	0800c238 	.word	0x0800c238

0800ad28 <rshift>:
 800ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad2a:	6906      	ldr	r6, [r0, #16]
 800ad2c:	114b      	asrs	r3, r1, #5
 800ad2e:	429e      	cmp	r6, r3
 800ad30:	f100 0414 	add.w	r4, r0, #20
 800ad34:	dd30      	ble.n	800ad98 <rshift+0x70>
 800ad36:	f011 011f 	ands.w	r1, r1, #31
 800ad3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ad3e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ad42:	d108      	bne.n	800ad56 <rshift+0x2e>
 800ad44:	4621      	mov	r1, r4
 800ad46:	42b2      	cmp	r2, r6
 800ad48:	460b      	mov	r3, r1
 800ad4a:	d211      	bcs.n	800ad70 <rshift+0x48>
 800ad4c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ad50:	f841 3b04 	str.w	r3, [r1], #4
 800ad54:	e7f7      	b.n	800ad46 <rshift+0x1e>
 800ad56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ad5a:	f1c1 0c20 	rsb	ip, r1, #32
 800ad5e:	40cd      	lsrs	r5, r1
 800ad60:	3204      	adds	r2, #4
 800ad62:	4623      	mov	r3, r4
 800ad64:	42b2      	cmp	r2, r6
 800ad66:	4617      	mov	r7, r2
 800ad68:	d30c      	bcc.n	800ad84 <rshift+0x5c>
 800ad6a:	601d      	str	r5, [r3, #0]
 800ad6c:	b105      	cbz	r5, 800ad70 <rshift+0x48>
 800ad6e:	3304      	adds	r3, #4
 800ad70:	1b1a      	subs	r2, r3, r4
 800ad72:	42a3      	cmp	r3, r4
 800ad74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad78:	bf08      	it	eq
 800ad7a:	2300      	moveq	r3, #0
 800ad7c:	6102      	str	r2, [r0, #16]
 800ad7e:	bf08      	it	eq
 800ad80:	6143      	streq	r3, [r0, #20]
 800ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad84:	683f      	ldr	r7, [r7, #0]
 800ad86:	fa07 f70c 	lsl.w	r7, r7, ip
 800ad8a:	433d      	orrs	r5, r7
 800ad8c:	f843 5b04 	str.w	r5, [r3], #4
 800ad90:	f852 5b04 	ldr.w	r5, [r2], #4
 800ad94:	40cd      	lsrs	r5, r1
 800ad96:	e7e5      	b.n	800ad64 <rshift+0x3c>
 800ad98:	4623      	mov	r3, r4
 800ad9a:	e7e9      	b.n	800ad70 <rshift+0x48>

0800ad9c <__hexdig_fun>:
 800ad9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ada0:	2b09      	cmp	r3, #9
 800ada2:	d802      	bhi.n	800adaa <__hexdig_fun+0xe>
 800ada4:	3820      	subs	r0, #32
 800ada6:	b2c0      	uxtb	r0, r0
 800ada8:	4770      	bx	lr
 800adaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d801      	bhi.n	800adb6 <__hexdig_fun+0x1a>
 800adb2:	3847      	subs	r0, #71	; 0x47
 800adb4:	e7f7      	b.n	800ada6 <__hexdig_fun+0xa>
 800adb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800adba:	2b05      	cmp	r3, #5
 800adbc:	d801      	bhi.n	800adc2 <__hexdig_fun+0x26>
 800adbe:	3827      	subs	r0, #39	; 0x27
 800adc0:	e7f1      	b.n	800ada6 <__hexdig_fun+0xa>
 800adc2:	2000      	movs	r0, #0
 800adc4:	4770      	bx	lr

0800adc6 <__gethex>:
 800adc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adca:	b08b      	sub	sp, #44	; 0x2c
 800adcc:	468a      	mov	sl, r1
 800adce:	9002      	str	r0, [sp, #8]
 800add0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	4690      	mov	r8, r2
 800add6:	f000 fad0 	bl	800b37a <__localeconv_l>
 800adda:	6803      	ldr	r3, [r0, #0]
 800addc:	9303      	str	r3, [sp, #12]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f5 f9f6 	bl	80001d0 <strlen>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	9001      	str	r0, [sp, #4]
 800ade8:	4403      	add	r3, r0
 800adea:	f04f 0b00 	mov.w	fp, #0
 800adee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800adf2:	9307      	str	r3, [sp, #28]
 800adf4:	f8da 3000 	ldr.w	r3, [sl]
 800adf8:	3302      	adds	r3, #2
 800adfa:	461f      	mov	r7, r3
 800adfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae00:	2830      	cmp	r0, #48	; 0x30
 800ae02:	d06c      	beq.n	800aede <__gethex+0x118>
 800ae04:	f7ff ffca 	bl	800ad9c <__hexdig_fun>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d16a      	bne.n	800aee4 <__gethex+0x11e>
 800ae0e:	9a01      	ldr	r2, [sp, #4]
 800ae10:	9903      	ldr	r1, [sp, #12]
 800ae12:	4638      	mov	r0, r7
 800ae14:	f001 f8fe 	bl	800c014 <strncmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d166      	bne.n	800aeea <__gethex+0x124>
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	5cf8      	ldrb	r0, [r7, r3]
 800ae20:	18fe      	adds	r6, r7, r3
 800ae22:	f7ff ffbb 	bl	800ad9c <__hexdig_fun>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d062      	beq.n	800aef0 <__gethex+0x12a>
 800ae2a:	4633      	mov	r3, r6
 800ae2c:	7818      	ldrb	r0, [r3, #0]
 800ae2e:	2830      	cmp	r0, #48	; 0x30
 800ae30:	461f      	mov	r7, r3
 800ae32:	f103 0301 	add.w	r3, r3, #1
 800ae36:	d0f9      	beq.n	800ae2c <__gethex+0x66>
 800ae38:	f7ff ffb0 	bl	800ad9c <__hexdig_fun>
 800ae3c:	fab0 f580 	clz	r5, r0
 800ae40:	096d      	lsrs	r5, r5, #5
 800ae42:	4634      	mov	r4, r6
 800ae44:	f04f 0b01 	mov.w	fp, #1
 800ae48:	463a      	mov	r2, r7
 800ae4a:	4616      	mov	r6, r2
 800ae4c:	3201      	adds	r2, #1
 800ae4e:	7830      	ldrb	r0, [r6, #0]
 800ae50:	f7ff ffa4 	bl	800ad9c <__hexdig_fun>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d1f8      	bne.n	800ae4a <__gethex+0x84>
 800ae58:	9a01      	ldr	r2, [sp, #4]
 800ae5a:	9903      	ldr	r1, [sp, #12]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f001 f8d9 	bl	800c014 <strncmp>
 800ae62:	b950      	cbnz	r0, 800ae7a <__gethex+0xb4>
 800ae64:	b954      	cbnz	r4, 800ae7c <__gethex+0xb6>
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	18f4      	adds	r4, r6, r3
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	4616      	mov	r6, r2
 800ae6e:	3201      	adds	r2, #1
 800ae70:	7830      	ldrb	r0, [r6, #0]
 800ae72:	f7ff ff93 	bl	800ad9c <__hexdig_fun>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d1f8      	bne.n	800ae6c <__gethex+0xa6>
 800ae7a:	b10c      	cbz	r4, 800ae80 <__gethex+0xba>
 800ae7c:	1ba4      	subs	r4, r4, r6
 800ae7e:	00a4      	lsls	r4, r4, #2
 800ae80:	7833      	ldrb	r3, [r6, #0]
 800ae82:	2b50      	cmp	r3, #80	; 0x50
 800ae84:	d001      	beq.n	800ae8a <__gethex+0xc4>
 800ae86:	2b70      	cmp	r3, #112	; 0x70
 800ae88:	d140      	bne.n	800af0c <__gethex+0x146>
 800ae8a:	7873      	ldrb	r3, [r6, #1]
 800ae8c:	2b2b      	cmp	r3, #43	; 0x2b
 800ae8e:	d031      	beq.n	800aef4 <__gethex+0x12e>
 800ae90:	2b2d      	cmp	r3, #45	; 0x2d
 800ae92:	d033      	beq.n	800aefc <__gethex+0x136>
 800ae94:	1c71      	adds	r1, r6, #1
 800ae96:	f04f 0900 	mov.w	r9, #0
 800ae9a:	7808      	ldrb	r0, [r1, #0]
 800ae9c:	f7ff ff7e 	bl	800ad9c <__hexdig_fun>
 800aea0:	1e43      	subs	r3, r0, #1
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b18      	cmp	r3, #24
 800aea6:	d831      	bhi.n	800af0c <__gethex+0x146>
 800aea8:	f1a0 0210 	sub.w	r2, r0, #16
 800aeac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aeb0:	f7ff ff74 	bl	800ad9c <__hexdig_fun>
 800aeb4:	1e43      	subs	r3, r0, #1
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b18      	cmp	r3, #24
 800aeba:	d922      	bls.n	800af02 <__gethex+0x13c>
 800aebc:	f1b9 0f00 	cmp.w	r9, #0
 800aec0:	d000      	beq.n	800aec4 <__gethex+0xfe>
 800aec2:	4252      	negs	r2, r2
 800aec4:	4414      	add	r4, r2
 800aec6:	f8ca 1000 	str.w	r1, [sl]
 800aeca:	b30d      	cbz	r5, 800af10 <__gethex+0x14a>
 800aecc:	f1bb 0f00 	cmp.w	fp, #0
 800aed0:	bf0c      	ite	eq
 800aed2:	2706      	moveq	r7, #6
 800aed4:	2700      	movne	r7, #0
 800aed6:	4638      	mov	r0, r7
 800aed8:	b00b      	add	sp, #44	; 0x2c
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	f10b 0b01 	add.w	fp, fp, #1
 800aee2:	e78a      	b.n	800adfa <__gethex+0x34>
 800aee4:	2500      	movs	r5, #0
 800aee6:	462c      	mov	r4, r5
 800aee8:	e7ae      	b.n	800ae48 <__gethex+0x82>
 800aeea:	463e      	mov	r6, r7
 800aeec:	2501      	movs	r5, #1
 800aeee:	e7c7      	b.n	800ae80 <__gethex+0xba>
 800aef0:	4604      	mov	r4, r0
 800aef2:	e7fb      	b.n	800aeec <__gethex+0x126>
 800aef4:	f04f 0900 	mov.w	r9, #0
 800aef8:	1cb1      	adds	r1, r6, #2
 800aefa:	e7ce      	b.n	800ae9a <__gethex+0xd4>
 800aefc:	f04f 0901 	mov.w	r9, #1
 800af00:	e7fa      	b.n	800aef8 <__gethex+0x132>
 800af02:	230a      	movs	r3, #10
 800af04:	fb03 0202 	mla	r2, r3, r2, r0
 800af08:	3a10      	subs	r2, #16
 800af0a:	e7cf      	b.n	800aeac <__gethex+0xe6>
 800af0c:	4631      	mov	r1, r6
 800af0e:	e7da      	b.n	800aec6 <__gethex+0x100>
 800af10:	1bf3      	subs	r3, r6, r7
 800af12:	3b01      	subs	r3, #1
 800af14:	4629      	mov	r1, r5
 800af16:	2b07      	cmp	r3, #7
 800af18:	dc49      	bgt.n	800afae <__gethex+0x1e8>
 800af1a:	9802      	ldr	r0, [sp, #8]
 800af1c:	f000 fa63 	bl	800b3e6 <_Balloc>
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	f100 0914 	add.w	r9, r0, #20
 800af26:	f04f 0b00 	mov.w	fp, #0
 800af2a:	f1c3 0301 	rsb	r3, r3, #1
 800af2e:	4605      	mov	r5, r0
 800af30:	f8cd 9010 	str.w	r9, [sp, #16]
 800af34:	46da      	mov	sl, fp
 800af36:	9308      	str	r3, [sp, #32]
 800af38:	42b7      	cmp	r7, r6
 800af3a:	d33b      	bcc.n	800afb4 <__gethex+0x1ee>
 800af3c:	9804      	ldr	r0, [sp, #16]
 800af3e:	f840 ab04 	str.w	sl, [r0], #4
 800af42:	eba0 0009 	sub.w	r0, r0, r9
 800af46:	1080      	asrs	r0, r0, #2
 800af48:	6128      	str	r0, [r5, #16]
 800af4a:	0147      	lsls	r7, r0, #5
 800af4c:	4650      	mov	r0, sl
 800af4e:	f000 fb0e 	bl	800b56e <__hi0bits>
 800af52:	f8d8 6000 	ldr.w	r6, [r8]
 800af56:	1a3f      	subs	r7, r7, r0
 800af58:	42b7      	cmp	r7, r6
 800af5a:	dd64      	ble.n	800b026 <__gethex+0x260>
 800af5c:	1bbf      	subs	r7, r7, r6
 800af5e:	4639      	mov	r1, r7
 800af60:	4628      	mov	r0, r5
 800af62:	f000 fe1d 	bl	800bba0 <__any_on>
 800af66:	4682      	mov	sl, r0
 800af68:	b178      	cbz	r0, 800af8a <__gethex+0x1c4>
 800af6a:	1e7b      	subs	r3, r7, #1
 800af6c:	1159      	asrs	r1, r3, #5
 800af6e:	f003 021f 	and.w	r2, r3, #31
 800af72:	f04f 0a01 	mov.w	sl, #1
 800af76:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af7a:	fa0a f202 	lsl.w	r2, sl, r2
 800af7e:	420a      	tst	r2, r1
 800af80:	d003      	beq.n	800af8a <__gethex+0x1c4>
 800af82:	4553      	cmp	r3, sl
 800af84:	dc46      	bgt.n	800b014 <__gethex+0x24e>
 800af86:	f04f 0a02 	mov.w	sl, #2
 800af8a:	4639      	mov	r1, r7
 800af8c:	4628      	mov	r0, r5
 800af8e:	f7ff fecb 	bl	800ad28 <rshift>
 800af92:	443c      	add	r4, r7
 800af94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af98:	42a3      	cmp	r3, r4
 800af9a:	da52      	bge.n	800b042 <__gethex+0x27c>
 800af9c:	4629      	mov	r1, r5
 800af9e:	9802      	ldr	r0, [sp, #8]
 800afa0:	f000 fa55 	bl	800b44e <_Bfree>
 800afa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afa6:	2300      	movs	r3, #0
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	27a3      	movs	r7, #163	; 0xa3
 800afac:	e793      	b.n	800aed6 <__gethex+0x110>
 800afae:	3101      	adds	r1, #1
 800afb0:	105b      	asrs	r3, r3, #1
 800afb2:	e7b0      	b.n	800af16 <__gethex+0x150>
 800afb4:	1e73      	subs	r3, r6, #1
 800afb6:	9305      	str	r3, [sp, #20]
 800afb8:	9a07      	ldr	r2, [sp, #28]
 800afba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d018      	beq.n	800aff4 <__gethex+0x22e>
 800afc2:	f1bb 0f20 	cmp.w	fp, #32
 800afc6:	d107      	bne.n	800afd8 <__gethex+0x212>
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	f8c3 a000 	str.w	sl, [r3]
 800afce:	3304      	adds	r3, #4
 800afd0:	f04f 0a00 	mov.w	sl, #0
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	46d3      	mov	fp, sl
 800afd8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800afdc:	f7ff fede 	bl	800ad9c <__hexdig_fun>
 800afe0:	f000 000f 	and.w	r0, r0, #15
 800afe4:	fa00 f00b 	lsl.w	r0, r0, fp
 800afe8:	ea4a 0a00 	orr.w	sl, sl, r0
 800afec:	f10b 0b04 	add.w	fp, fp, #4
 800aff0:	9b05      	ldr	r3, [sp, #20]
 800aff2:	e00d      	b.n	800b010 <__gethex+0x24a>
 800aff4:	9b05      	ldr	r3, [sp, #20]
 800aff6:	9a08      	ldr	r2, [sp, #32]
 800aff8:	4413      	add	r3, r2
 800affa:	42bb      	cmp	r3, r7
 800affc:	d3e1      	bcc.n	800afc2 <__gethex+0x1fc>
 800affe:	4618      	mov	r0, r3
 800b000:	9a01      	ldr	r2, [sp, #4]
 800b002:	9903      	ldr	r1, [sp, #12]
 800b004:	9309      	str	r3, [sp, #36]	; 0x24
 800b006:	f001 f805 	bl	800c014 <strncmp>
 800b00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d1d8      	bne.n	800afc2 <__gethex+0x1fc>
 800b010:	461e      	mov	r6, r3
 800b012:	e791      	b.n	800af38 <__gethex+0x172>
 800b014:	1eb9      	subs	r1, r7, #2
 800b016:	4628      	mov	r0, r5
 800b018:	f000 fdc2 	bl	800bba0 <__any_on>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d0b2      	beq.n	800af86 <__gethex+0x1c0>
 800b020:	f04f 0a03 	mov.w	sl, #3
 800b024:	e7b1      	b.n	800af8a <__gethex+0x1c4>
 800b026:	da09      	bge.n	800b03c <__gethex+0x276>
 800b028:	1bf7      	subs	r7, r6, r7
 800b02a:	4629      	mov	r1, r5
 800b02c:	463a      	mov	r2, r7
 800b02e:	9802      	ldr	r0, [sp, #8]
 800b030:	f000 fbd8 	bl	800b7e4 <__lshift>
 800b034:	1be4      	subs	r4, r4, r7
 800b036:	4605      	mov	r5, r0
 800b038:	f100 0914 	add.w	r9, r0, #20
 800b03c:	f04f 0a00 	mov.w	sl, #0
 800b040:	e7a8      	b.n	800af94 <__gethex+0x1ce>
 800b042:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b046:	42a0      	cmp	r0, r4
 800b048:	dd6a      	ble.n	800b120 <__gethex+0x35a>
 800b04a:	1b04      	subs	r4, r0, r4
 800b04c:	42a6      	cmp	r6, r4
 800b04e:	dc2e      	bgt.n	800b0ae <__gethex+0x2e8>
 800b050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d022      	beq.n	800b09e <__gethex+0x2d8>
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d024      	beq.n	800b0a6 <__gethex+0x2e0>
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d115      	bne.n	800b08c <__gethex+0x2c6>
 800b060:	42a6      	cmp	r6, r4
 800b062:	d113      	bne.n	800b08c <__gethex+0x2c6>
 800b064:	2e01      	cmp	r6, #1
 800b066:	dc0b      	bgt.n	800b080 <__gethex+0x2ba>
 800b068:	9a06      	ldr	r2, [sp, #24]
 800b06a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	2301      	movs	r3, #1
 800b072:	612b      	str	r3, [r5, #16]
 800b074:	f8c9 3000 	str.w	r3, [r9]
 800b078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b07a:	2762      	movs	r7, #98	; 0x62
 800b07c:	601d      	str	r5, [r3, #0]
 800b07e:	e72a      	b.n	800aed6 <__gethex+0x110>
 800b080:	1e71      	subs	r1, r6, #1
 800b082:	4628      	mov	r0, r5
 800b084:	f000 fd8c 	bl	800bba0 <__any_on>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1ed      	bne.n	800b068 <__gethex+0x2a2>
 800b08c:	4629      	mov	r1, r5
 800b08e:	9802      	ldr	r0, [sp, #8]
 800b090:	f000 f9dd 	bl	800b44e <_Bfree>
 800b094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b096:	2300      	movs	r3, #0
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	2750      	movs	r7, #80	; 0x50
 800b09c:	e71b      	b.n	800aed6 <__gethex+0x110>
 800b09e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0e1      	beq.n	800b068 <__gethex+0x2a2>
 800b0a4:	e7f2      	b.n	800b08c <__gethex+0x2c6>
 800b0a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1dd      	bne.n	800b068 <__gethex+0x2a2>
 800b0ac:	e7ee      	b.n	800b08c <__gethex+0x2c6>
 800b0ae:	1e67      	subs	r7, r4, #1
 800b0b0:	f1ba 0f00 	cmp.w	sl, #0
 800b0b4:	d131      	bne.n	800b11a <__gethex+0x354>
 800b0b6:	b127      	cbz	r7, 800b0c2 <__gethex+0x2fc>
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f000 fd70 	bl	800bba0 <__any_on>
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	117a      	asrs	r2, r7, #5
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f007 071f 	and.w	r7, r7, #31
 800b0ca:	fa03 f707 	lsl.w	r7, r3, r7
 800b0ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	421f      	tst	r7, r3
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	bf18      	it	ne
 800b0da:	f04a 0a02 	orrne.w	sl, sl, #2
 800b0de:	1b36      	subs	r6, r6, r4
 800b0e0:	f7ff fe22 	bl	800ad28 <rshift>
 800b0e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b0e8:	2702      	movs	r7, #2
 800b0ea:	f1ba 0f00 	cmp.w	sl, #0
 800b0ee:	d048      	beq.n	800b182 <__gethex+0x3bc>
 800b0f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d015      	beq.n	800b124 <__gethex+0x35e>
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d017      	beq.n	800b12c <__gethex+0x366>
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d109      	bne.n	800b114 <__gethex+0x34e>
 800b100:	f01a 0f02 	tst.w	sl, #2
 800b104:	d006      	beq.n	800b114 <__gethex+0x34e>
 800b106:	f8d9 3000 	ldr.w	r3, [r9]
 800b10a:	ea4a 0a03 	orr.w	sl, sl, r3
 800b10e:	f01a 0f01 	tst.w	sl, #1
 800b112:	d10e      	bne.n	800b132 <__gethex+0x36c>
 800b114:	f047 0710 	orr.w	r7, r7, #16
 800b118:	e033      	b.n	800b182 <__gethex+0x3bc>
 800b11a:	f04f 0a01 	mov.w	sl, #1
 800b11e:	e7d0      	b.n	800b0c2 <__gethex+0x2fc>
 800b120:	2701      	movs	r7, #1
 800b122:	e7e2      	b.n	800b0ea <__gethex+0x324>
 800b124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b126:	f1c3 0301 	rsb	r3, r3, #1
 800b12a:	9315      	str	r3, [sp, #84]	; 0x54
 800b12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0f0      	beq.n	800b114 <__gethex+0x34e>
 800b132:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b136:	f105 0314 	add.w	r3, r5, #20
 800b13a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b13e:	eb03 010a 	add.w	r1, r3, sl
 800b142:	f04f 0c00 	mov.w	ip, #0
 800b146:	4618      	mov	r0, r3
 800b148:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b150:	d01c      	beq.n	800b18c <__gethex+0x3c6>
 800b152:	3201      	adds	r2, #1
 800b154:	6002      	str	r2, [r0, #0]
 800b156:	2f02      	cmp	r7, #2
 800b158:	f105 0314 	add.w	r3, r5, #20
 800b15c:	d138      	bne.n	800b1d0 <__gethex+0x40a>
 800b15e:	f8d8 2000 	ldr.w	r2, [r8]
 800b162:	3a01      	subs	r2, #1
 800b164:	42b2      	cmp	r2, r6
 800b166:	d10a      	bne.n	800b17e <__gethex+0x3b8>
 800b168:	1171      	asrs	r1, r6, #5
 800b16a:	2201      	movs	r2, #1
 800b16c:	f006 061f 	and.w	r6, r6, #31
 800b170:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b174:	fa02 f606 	lsl.w	r6, r2, r6
 800b178:	421e      	tst	r6, r3
 800b17a:	bf18      	it	ne
 800b17c:	4617      	movne	r7, r2
 800b17e:	f047 0720 	orr.w	r7, r7, #32
 800b182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b184:	601d      	str	r5, [r3, #0]
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	601c      	str	r4, [r3, #0]
 800b18a:	e6a4      	b.n	800aed6 <__gethex+0x110>
 800b18c:	4299      	cmp	r1, r3
 800b18e:	f843 cc04 	str.w	ip, [r3, #-4]
 800b192:	d8d8      	bhi.n	800b146 <__gethex+0x380>
 800b194:	68ab      	ldr	r3, [r5, #8]
 800b196:	4599      	cmp	r9, r3
 800b198:	db12      	blt.n	800b1c0 <__gethex+0x3fa>
 800b19a:	6869      	ldr	r1, [r5, #4]
 800b19c:	9802      	ldr	r0, [sp, #8]
 800b19e:	3101      	adds	r1, #1
 800b1a0:	f000 f921 	bl	800b3e6 <_Balloc>
 800b1a4:	692a      	ldr	r2, [r5, #16]
 800b1a6:	3202      	adds	r2, #2
 800b1a8:	f105 010c 	add.w	r1, r5, #12
 800b1ac:	4683      	mov	fp, r0
 800b1ae:	0092      	lsls	r2, r2, #2
 800b1b0:	300c      	adds	r0, #12
 800b1b2:	f000 f90d 	bl	800b3d0 <memcpy>
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	9802      	ldr	r0, [sp, #8]
 800b1ba:	f000 f948 	bl	800b44e <_Bfree>
 800b1be:	465d      	mov	r5, fp
 800b1c0:	692b      	ldr	r3, [r5, #16]
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b1c8:	612a      	str	r2, [r5, #16]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	615a      	str	r2, [r3, #20]
 800b1ce:	e7c2      	b.n	800b156 <__gethex+0x390>
 800b1d0:	692a      	ldr	r2, [r5, #16]
 800b1d2:	454a      	cmp	r2, r9
 800b1d4:	dd0b      	ble.n	800b1ee <__gethex+0x428>
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f7ff fda5 	bl	800ad28 <rshift>
 800b1de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	f6ff aed9 	blt.w	800af9c <__gethex+0x1d6>
 800b1ea:	2701      	movs	r7, #1
 800b1ec:	e7c7      	b.n	800b17e <__gethex+0x3b8>
 800b1ee:	f016 061f 	ands.w	r6, r6, #31
 800b1f2:	d0fa      	beq.n	800b1ea <__gethex+0x424>
 800b1f4:	449a      	add	sl, r3
 800b1f6:	f1c6 0620 	rsb	r6, r6, #32
 800b1fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b1fe:	f000 f9b6 	bl	800b56e <__hi0bits>
 800b202:	42b0      	cmp	r0, r6
 800b204:	dbe7      	blt.n	800b1d6 <__gethex+0x410>
 800b206:	e7f0      	b.n	800b1ea <__gethex+0x424>

0800b208 <L_shift>:
 800b208:	f1c2 0208 	rsb	r2, r2, #8
 800b20c:	0092      	lsls	r2, r2, #2
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	f1c2 0620 	rsb	r6, r2, #32
 800b214:	6843      	ldr	r3, [r0, #4]
 800b216:	6804      	ldr	r4, [r0, #0]
 800b218:	fa03 f506 	lsl.w	r5, r3, r6
 800b21c:	432c      	orrs	r4, r5
 800b21e:	40d3      	lsrs	r3, r2
 800b220:	6004      	str	r4, [r0, #0]
 800b222:	f840 3f04 	str.w	r3, [r0, #4]!
 800b226:	4288      	cmp	r0, r1
 800b228:	d3f4      	bcc.n	800b214 <L_shift+0xc>
 800b22a:	bd70      	pop	{r4, r5, r6, pc}

0800b22c <__match>:
 800b22c:	b530      	push	{r4, r5, lr}
 800b22e:	6803      	ldr	r3, [r0, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b236:	b914      	cbnz	r4, 800b23e <__match+0x12>
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	2001      	movs	r0, #1
 800b23c:	bd30      	pop	{r4, r5, pc}
 800b23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b242:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b246:	2d19      	cmp	r5, #25
 800b248:	bf98      	it	ls
 800b24a:	3220      	addls	r2, #32
 800b24c:	42a2      	cmp	r2, r4
 800b24e:	d0f0      	beq.n	800b232 <__match+0x6>
 800b250:	2000      	movs	r0, #0
 800b252:	e7f3      	b.n	800b23c <__match+0x10>

0800b254 <__hexnan>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	680b      	ldr	r3, [r1, #0]
 800b25a:	6801      	ldr	r1, [r0, #0]
 800b25c:	115f      	asrs	r7, r3, #5
 800b25e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b262:	f013 031f 	ands.w	r3, r3, #31
 800b266:	b087      	sub	sp, #28
 800b268:	bf18      	it	ne
 800b26a:	3704      	addne	r7, #4
 800b26c:	2500      	movs	r5, #0
 800b26e:	1f3e      	subs	r6, r7, #4
 800b270:	4682      	mov	sl, r0
 800b272:	4690      	mov	r8, r2
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	f847 5c04 	str.w	r5, [r7, #-4]
 800b27a:	46b1      	mov	r9, r6
 800b27c:	4634      	mov	r4, r6
 800b27e:	9502      	str	r5, [sp, #8]
 800b280:	46ab      	mov	fp, r5
 800b282:	784a      	ldrb	r2, [r1, #1]
 800b284:	1c4b      	adds	r3, r1, #1
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	b342      	cbz	r2, 800b2dc <__hexnan+0x88>
 800b28a:	4610      	mov	r0, r2
 800b28c:	9105      	str	r1, [sp, #20]
 800b28e:	9204      	str	r2, [sp, #16]
 800b290:	f7ff fd84 	bl	800ad9c <__hexdig_fun>
 800b294:	2800      	cmp	r0, #0
 800b296:	d143      	bne.n	800b320 <__hexnan+0xcc>
 800b298:	9a04      	ldr	r2, [sp, #16]
 800b29a:	9905      	ldr	r1, [sp, #20]
 800b29c:	2a20      	cmp	r2, #32
 800b29e:	d818      	bhi.n	800b2d2 <__hexnan+0x7e>
 800b2a0:	9b02      	ldr	r3, [sp, #8]
 800b2a2:	459b      	cmp	fp, r3
 800b2a4:	dd13      	ble.n	800b2ce <__hexnan+0x7a>
 800b2a6:	454c      	cmp	r4, r9
 800b2a8:	d206      	bcs.n	800b2b8 <__hexnan+0x64>
 800b2aa:	2d07      	cmp	r5, #7
 800b2ac:	dc04      	bgt.n	800b2b8 <__hexnan+0x64>
 800b2ae:	462a      	mov	r2, r5
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f7ff ffa8 	bl	800b208 <L_shift>
 800b2b8:	4544      	cmp	r4, r8
 800b2ba:	d944      	bls.n	800b346 <__hexnan+0xf2>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f1a4 0904 	sub.w	r9, r4, #4
 800b2c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b2ca:	464c      	mov	r4, r9
 800b2cc:	461d      	mov	r5, r3
 800b2ce:	9903      	ldr	r1, [sp, #12]
 800b2d0:	e7d7      	b.n	800b282 <__hexnan+0x2e>
 800b2d2:	2a29      	cmp	r2, #41	; 0x29
 800b2d4:	d14a      	bne.n	800b36c <__hexnan+0x118>
 800b2d6:	3102      	adds	r1, #2
 800b2d8:	f8ca 1000 	str.w	r1, [sl]
 800b2dc:	f1bb 0f00 	cmp.w	fp, #0
 800b2e0:	d044      	beq.n	800b36c <__hexnan+0x118>
 800b2e2:	454c      	cmp	r4, r9
 800b2e4:	d206      	bcs.n	800b2f4 <__hexnan+0xa0>
 800b2e6:	2d07      	cmp	r5, #7
 800b2e8:	dc04      	bgt.n	800b2f4 <__hexnan+0xa0>
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff ff8a 	bl	800b208 <L_shift>
 800b2f4:	4544      	cmp	r4, r8
 800b2f6:	d928      	bls.n	800b34a <__hexnan+0xf6>
 800b2f8:	4643      	mov	r3, r8
 800b2fa:	f854 2b04 	ldr.w	r2, [r4], #4
 800b2fe:	f843 2b04 	str.w	r2, [r3], #4
 800b302:	42a6      	cmp	r6, r4
 800b304:	d2f9      	bcs.n	800b2fa <__hexnan+0xa6>
 800b306:	2200      	movs	r2, #0
 800b308:	f843 2b04 	str.w	r2, [r3], #4
 800b30c:	429e      	cmp	r6, r3
 800b30e:	d2fb      	bcs.n	800b308 <__hexnan+0xb4>
 800b310:	6833      	ldr	r3, [r6, #0]
 800b312:	b91b      	cbnz	r3, 800b31c <__hexnan+0xc8>
 800b314:	4546      	cmp	r6, r8
 800b316:	d127      	bne.n	800b368 <__hexnan+0x114>
 800b318:	2301      	movs	r3, #1
 800b31a:	6033      	str	r3, [r6, #0]
 800b31c:	2005      	movs	r0, #5
 800b31e:	e026      	b.n	800b36e <__hexnan+0x11a>
 800b320:	3501      	adds	r5, #1
 800b322:	2d08      	cmp	r5, #8
 800b324:	f10b 0b01 	add.w	fp, fp, #1
 800b328:	dd06      	ble.n	800b338 <__hexnan+0xe4>
 800b32a:	4544      	cmp	r4, r8
 800b32c:	d9cf      	bls.n	800b2ce <__hexnan+0x7a>
 800b32e:	2300      	movs	r3, #0
 800b330:	f844 3c04 	str.w	r3, [r4, #-4]
 800b334:	2501      	movs	r5, #1
 800b336:	3c04      	subs	r4, #4
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	f000 000f 	and.w	r0, r0, #15
 800b33e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b342:	6020      	str	r0, [r4, #0]
 800b344:	e7c3      	b.n	800b2ce <__hexnan+0x7a>
 800b346:	2508      	movs	r5, #8
 800b348:	e7c1      	b.n	800b2ce <__hexnan+0x7a>
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0df      	beq.n	800b310 <__hexnan+0xbc>
 800b350:	f04f 32ff 	mov.w	r2, #4294967295
 800b354:	f1c3 0320 	rsb	r3, r3, #32
 800b358:	fa22 f303 	lsr.w	r3, r2, r3
 800b35c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b360:	401a      	ands	r2, r3
 800b362:	f847 2c04 	str.w	r2, [r7, #-4]
 800b366:	e7d3      	b.n	800b310 <__hexnan+0xbc>
 800b368:	3e04      	subs	r6, #4
 800b36a:	e7d1      	b.n	800b310 <__hexnan+0xbc>
 800b36c:	2004      	movs	r0, #4
 800b36e:	b007      	add	sp, #28
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b374 <__locale_ctype_ptr_l>:
 800b374:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b378:	4770      	bx	lr

0800b37a <__localeconv_l>:
 800b37a:	30f0      	adds	r0, #240	; 0xf0
 800b37c:	4770      	bx	lr
	...

0800b380 <_localeconv_r>:
 800b380:	4b04      	ldr	r3, [pc, #16]	; (800b394 <_localeconv_r+0x14>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6a18      	ldr	r0, [r3, #32]
 800b386:	4b04      	ldr	r3, [pc, #16]	; (800b398 <_localeconv_r+0x18>)
 800b388:	2800      	cmp	r0, #0
 800b38a:	bf08      	it	eq
 800b38c:	4618      	moveq	r0, r3
 800b38e:	30f0      	adds	r0, #240	; 0xf0
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	20000074 	.word	0x20000074
 800b398:	200000d8 	.word	0x200000d8

0800b39c <malloc>:
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <malloc+0xc>)
 800b39e:	4601      	mov	r1, r0
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	f000 bc7b 	b.w	800bc9c <_malloc_r>
 800b3a6:	bf00      	nop
 800b3a8:	20000074 	.word	0x20000074

0800b3ac <__ascii_mbtowc>:
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	b901      	cbnz	r1, 800b3b2 <__ascii_mbtowc+0x6>
 800b3b0:	a901      	add	r1, sp, #4
 800b3b2:	b142      	cbz	r2, 800b3c6 <__ascii_mbtowc+0x1a>
 800b3b4:	b14b      	cbz	r3, 800b3ca <__ascii_mbtowc+0x1e>
 800b3b6:	7813      	ldrb	r3, [r2, #0]
 800b3b8:	600b      	str	r3, [r1, #0]
 800b3ba:	7812      	ldrb	r2, [r2, #0]
 800b3bc:	1c10      	adds	r0, r2, #0
 800b3be:	bf18      	it	ne
 800b3c0:	2001      	movne	r0, #1
 800b3c2:	b002      	add	sp, #8
 800b3c4:	4770      	bx	lr
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	e7fb      	b.n	800b3c2 <__ascii_mbtowc+0x16>
 800b3ca:	f06f 0001 	mvn.w	r0, #1
 800b3ce:	e7f8      	b.n	800b3c2 <__ascii_mbtowc+0x16>

0800b3d0 <memcpy>:
 800b3d0:	b510      	push	{r4, lr}
 800b3d2:	1e43      	subs	r3, r0, #1
 800b3d4:	440a      	add	r2, r1
 800b3d6:	4291      	cmp	r1, r2
 800b3d8:	d100      	bne.n	800b3dc <memcpy+0xc>
 800b3da:	bd10      	pop	{r4, pc}
 800b3dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3e4:	e7f7      	b.n	800b3d6 <memcpy+0x6>

0800b3e6 <_Balloc>:
 800b3e6:	b570      	push	{r4, r5, r6, lr}
 800b3e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	460e      	mov	r6, r1
 800b3ee:	b93d      	cbnz	r5, 800b400 <_Balloc+0x1a>
 800b3f0:	2010      	movs	r0, #16
 800b3f2:	f7ff ffd3 	bl	800b39c <malloc>
 800b3f6:	6260      	str	r0, [r4, #36]	; 0x24
 800b3f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3fc:	6005      	str	r5, [r0, #0]
 800b3fe:	60c5      	str	r5, [r0, #12]
 800b400:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b402:	68eb      	ldr	r3, [r5, #12]
 800b404:	b183      	cbz	r3, 800b428 <_Balloc+0x42>
 800b406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b40e:	b9b8      	cbnz	r0, 800b440 <_Balloc+0x5a>
 800b410:	2101      	movs	r1, #1
 800b412:	fa01 f506 	lsl.w	r5, r1, r6
 800b416:	1d6a      	adds	r2, r5, #5
 800b418:	0092      	lsls	r2, r2, #2
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fbe1 	bl	800bbe2 <_calloc_r>
 800b420:	b160      	cbz	r0, 800b43c <_Balloc+0x56>
 800b422:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b426:	e00e      	b.n	800b446 <_Balloc+0x60>
 800b428:	2221      	movs	r2, #33	; 0x21
 800b42a:	2104      	movs	r1, #4
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 fbd8 	bl	800bbe2 <_calloc_r>
 800b432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b434:	60e8      	str	r0, [r5, #12]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e4      	bne.n	800b406 <_Balloc+0x20>
 800b43c:	2000      	movs	r0, #0
 800b43e:	bd70      	pop	{r4, r5, r6, pc}
 800b440:	6802      	ldr	r2, [r0, #0]
 800b442:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b446:	2300      	movs	r3, #0
 800b448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b44c:	e7f7      	b.n	800b43e <_Balloc+0x58>

0800b44e <_Bfree>:
 800b44e:	b570      	push	{r4, r5, r6, lr}
 800b450:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b452:	4606      	mov	r6, r0
 800b454:	460d      	mov	r5, r1
 800b456:	b93c      	cbnz	r4, 800b468 <_Bfree+0x1a>
 800b458:	2010      	movs	r0, #16
 800b45a:	f7ff ff9f 	bl	800b39c <malloc>
 800b45e:	6270      	str	r0, [r6, #36]	; 0x24
 800b460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b464:	6004      	str	r4, [r0, #0]
 800b466:	60c4      	str	r4, [r0, #12]
 800b468:	b13d      	cbz	r5, 800b47a <_Bfree+0x2c>
 800b46a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b46c:	686a      	ldr	r2, [r5, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b474:	6029      	str	r1, [r5, #0]
 800b476:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b47a:	bd70      	pop	{r4, r5, r6, pc}

0800b47c <__multadd>:
 800b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b480:	690d      	ldr	r5, [r1, #16]
 800b482:	461f      	mov	r7, r3
 800b484:	4606      	mov	r6, r0
 800b486:	460c      	mov	r4, r1
 800b488:	f101 0c14 	add.w	ip, r1, #20
 800b48c:	2300      	movs	r3, #0
 800b48e:	f8dc 0000 	ldr.w	r0, [ip]
 800b492:	b281      	uxth	r1, r0
 800b494:	fb02 7101 	mla	r1, r2, r1, r7
 800b498:	0c0f      	lsrs	r7, r1, #16
 800b49a:	0c00      	lsrs	r0, r0, #16
 800b49c:	fb02 7000 	mla	r0, r2, r0, r7
 800b4a0:	b289      	uxth	r1, r1
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b4a8:	429d      	cmp	r5, r3
 800b4aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b4ae:	f84c 1b04 	str.w	r1, [ip], #4
 800b4b2:	dcec      	bgt.n	800b48e <__multadd+0x12>
 800b4b4:	b1d7      	cbz	r7, 800b4ec <__multadd+0x70>
 800b4b6:	68a3      	ldr	r3, [r4, #8]
 800b4b8:	42ab      	cmp	r3, r5
 800b4ba:	dc12      	bgt.n	800b4e2 <__multadd+0x66>
 800b4bc:	6861      	ldr	r1, [r4, #4]
 800b4be:	4630      	mov	r0, r6
 800b4c0:	3101      	adds	r1, #1
 800b4c2:	f7ff ff90 	bl	800b3e6 <_Balloc>
 800b4c6:	6922      	ldr	r2, [r4, #16]
 800b4c8:	3202      	adds	r2, #2
 800b4ca:	f104 010c 	add.w	r1, r4, #12
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	0092      	lsls	r2, r2, #2
 800b4d2:	300c      	adds	r0, #12
 800b4d4:	f7ff ff7c 	bl	800b3d0 <memcpy>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f7ff ffb7 	bl	800b44e <_Bfree>
 800b4e0:	4644      	mov	r4, r8
 800b4e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4e6:	3501      	adds	r5, #1
 800b4e8:	615f      	str	r7, [r3, #20]
 800b4ea:	6125      	str	r5, [r4, #16]
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4f2 <__s2b>:
 800b4f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	4615      	mov	r5, r2
 800b4fa:	461f      	mov	r7, r3
 800b4fc:	2209      	movs	r2, #9
 800b4fe:	3308      	adds	r3, #8
 800b500:	4606      	mov	r6, r0
 800b502:	fb93 f3f2 	sdiv	r3, r3, r2
 800b506:	2100      	movs	r1, #0
 800b508:	2201      	movs	r2, #1
 800b50a:	429a      	cmp	r2, r3
 800b50c:	db20      	blt.n	800b550 <__s2b+0x5e>
 800b50e:	4630      	mov	r0, r6
 800b510:	f7ff ff69 	bl	800b3e6 <_Balloc>
 800b514:	9b08      	ldr	r3, [sp, #32]
 800b516:	6143      	str	r3, [r0, #20]
 800b518:	2d09      	cmp	r5, #9
 800b51a:	f04f 0301 	mov.w	r3, #1
 800b51e:	6103      	str	r3, [r0, #16]
 800b520:	dd19      	ble.n	800b556 <__s2b+0x64>
 800b522:	f104 0809 	add.w	r8, r4, #9
 800b526:	46c1      	mov	r9, r8
 800b528:	442c      	add	r4, r5
 800b52a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b52e:	4601      	mov	r1, r0
 800b530:	3b30      	subs	r3, #48	; 0x30
 800b532:	220a      	movs	r2, #10
 800b534:	4630      	mov	r0, r6
 800b536:	f7ff ffa1 	bl	800b47c <__multadd>
 800b53a:	45a1      	cmp	r9, r4
 800b53c:	d1f5      	bne.n	800b52a <__s2b+0x38>
 800b53e:	eb08 0405 	add.w	r4, r8, r5
 800b542:	3c08      	subs	r4, #8
 800b544:	1b2d      	subs	r5, r5, r4
 800b546:	1963      	adds	r3, r4, r5
 800b548:	42bb      	cmp	r3, r7
 800b54a:	db07      	blt.n	800b55c <__s2b+0x6a>
 800b54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b550:	0052      	lsls	r2, r2, #1
 800b552:	3101      	adds	r1, #1
 800b554:	e7d9      	b.n	800b50a <__s2b+0x18>
 800b556:	340a      	adds	r4, #10
 800b558:	2509      	movs	r5, #9
 800b55a:	e7f3      	b.n	800b544 <__s2b+0x52>
 800b55c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b560:	4601      	mov	r1, r0
 800b562:	3b30      	subs	r3, #48	; 0x30
 800b564:	220a      	movs	r2, #10
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ff88 	bl	800b47c <__multadd>
 800b56c:	e7eb      	b.n	800b546 <__s2b+0x54>

0800b56e <__hi0bits>:
 800b56e:	0c02      	lsrs	r2, r0, #16
 800b570:	0412      	lsls	r2, r2, #16
 800b572:	4603      	mov	r3, r0
 800b574:	b9b2      	cbnz	r2, 800b5a4 <__hi0bits+0x36>
 800b576:	0403      	lsls	r3, r0, #16
 800b578:	2010      	movs	r0, #16
 800b57a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b57e:	bf04      	itt	eq
 800b580:	021b      	lsleq	r3, r3, #8
 800b582:	3008      	addeq	r0, #8
 800b584:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b588:	bf04      	itt	eq
 800b58a:	011b      	lsleq	r3, r3, #4
 800b58c:	3004      	addeq	r0, #4
 800b58e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b592:	bf04      	itt	eq
 800b594:	009b      	lsleq	r3, r3, #2
 800b596:	3002      	addeq	r0, #2
 800b598:	2b00      	cmp	r3, #0
 800b59a:	db06      	blt.n	800b5aa <__hi0bits+0x3c>
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	d503      	bpl.n	800b5a8 <__hi0bits+0x3a>
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	4770      	bx	lr
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e7e8      	b.n	800b57a <__hi0bits+0xc>
 800b5a8:	2020      	movs	r0, #32
 800b5aa:	4770      	bx	lr

0800b5ac <__lo0bits>:
 800b5ac:	6803      	ldr	r3, [r0, #0]
 800b5ae:	f013 0207 	ands.w	r2, r3, #7
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	d00b      	beq.n	800b5ce <__lo0bits+0x22>
 800b5b6:	07da      	lsls	r2, r3, #31
 800b5b8:	d423      	bmi.n	800b602 <__lo0bits+0x56>
 800b5ba:	0798      	lsls	r0, r3, #30
 800b5bc:	bf49      	itett	mi
 800b5be:	085b      	lsrmi	r3, r3, #1
 800b5c0:	089b      	lsrpl	r3, r3, #2
 800b5c2:	2001      	movmi	r0, #1
 800b5c4:	600b      	strmi	r3, [r1, #0]
 800b5c6:	bf5c      	itt	pl
 800b5c8:	600b      	strpl	r3, [r1, #0]
 800b5ca:	2002      	movpl	r0, #2
 800b5cc:	4770      	bx	lr
 800b5ce:	b298      	uxth	r0, r3
 800b5d0:	b9a8      	cbnz	r0, 800b5fe <__lo0bits+0x52>
 800b5d2:	0c1b      	lsrs	r3, r3, #16
 800b5d4:	2010      	movs	r0, #16
 800b5d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b5da:	bf04      	itt	eq
 800b5dc:	0a1b      	lsreq	r3, r3, #8
 800b5de:	3008      	addeq	r0, #8
 800b5e0:	071a      	lsls	r2, r3, #28
 800b5e2:	bf04      	itt	eq
 800b5e4:	091b      	lsreq	r3, r3, #4
 800b5e6:	3004      	addeq	r0, #4
 800b5e8:	079a      	lsls	r2, r3, #30
 800b5ea:	bf04      	itt	eq
 800b5ec:	089b      	lsreq	r3, r3, #2
 800b5ee:	3002      	addeq	r0, #2
 800b5f0:	07da      	lsls	r2, r3, #31
 800b5f2:	d402      	bmi.n	800b5fa <__lo0bits+0x4e>
 800b5f4:	085b      	lsrs	r3, r3, #1
 800b5f6:	d006      	beq.n	800b606 <__lo0bits+0x5a>
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	600b      	str	r3, [r1, #0]
 800b5fc:	4770      	bx	lr
 800b5fe:	4610      	mov	r0, r2
 800b600:	e7e9      	b.n	800b5d6 <__lo0bits+0x2a>
 800b602:	2000      	movs	r0, #0
 800b604:	4770      	bx	lr
 800b606:	2020      	movs	r0, #32
 800b608:	4770      	bx	lr

0800b60a <__i2b>:
 800b60a:	b510      	push	{r4, lr}
 800b60c:	460c      	mov	r4, r1
 800b60e:	2101      	movs	r1, #1
 800b610:	f7ff fee9 	bl	800b3e6 <_Balloc>
 800b614:	2201      	movs	r2, #1
 800b616:	6144      	str	r4, [r0, #20]
 800b618:	6102      	str	r2, [r0, #16]
 800b61a:	bd10      	pop	{r4, pc}

0800b61c <__multiply>:
 800b61c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	4614      	mov	r4, r2
 800b622:	690a      	ldr	r2, [r1, #16]
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	429a      	cmp	r2, r3
 800b628:	bfb8      	it	lt
 800b62a:	460b      	movlt	r3, r1
 800b62c:	4688      	mov	r8, r1
 800b62e:	bfbc      	itt	lt
 800b630:	46a0      	movlt	r8, r4
 800b632:	461c      	movlt	r4, r3
 800b634:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b638:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b63c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b640:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b644:	eb07 0609 	add.w	r6, r7, r9
 800b648:	42b3      	cmp	r3, r6
 800b64a:	bfb8      	it	lt
 800b64c:	3101      	addlt	r1, #1
 800b64e:	f7ff feca 	bl	800b3e6 <_Balloc>
 800b652:	f100 0514 	add.w	r5, r0, #20
 800b656:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b65a:	462b      	mov	r3, r5
 800b65c:	2200      	movs	r2, #0
 800b65e:	4573      	cmp	r3, lr
 800b660:	d316      	bcc.n	800b690 <__multiply+0x74>
 800b662:	f104 0214 	add.w	r2, r4, #20
 800b666:	f108 0114 	add.w	r1, r8, #20
 800b66a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b66e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	9201      	str	r2, [sp, #4]
 800b678:	4293      	cmp	r3, r2
 800b67a:	d80c      	bhi.n	800b696 <__multiply+0x7a>
 800b67c:	2e00      	cmp	r6, #0
 800b67e:	dd03      	ble.n	800b688 <__multiply+0x6c>
 800b680:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b684:	2b00      	cmp	r3, #0
 800b686:	d05d      	beq.n	800b744 <__multiply+0x128>
 800b688:	6106      	str	r6, [r0, #16]
 800b68a:	b003      	add	sp, #12
 800b68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b690:	f843 2b04 	str.w	r2, [r3], #4
 800b694:	e7e3      	b.n	800b65e <__multiply+0x42>
 800b696:	f8b2 b000 	ldrh.w	fp, [r2]
 800b69a:	f1bb 0f00 	cmp.w	fp, #0
 800b69e:	d023      	beq.n	800b6e8 <__multiply+0xcc>
 800b6a0:	4689      	mov	r9, r1
 800b6a2:	46ac      	mov	ip, r5
 800b6a4:	f04f 0800 	mov.w	r8, #0
 800b6a8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b6ac:	f8dc a000 	ldr.w	sl, [ip]
 800b6b0:	b2a3      	uxth	r3, r4
 800b6b2:	fa1f fa8a 	uxth.w	sl, sl
 800b6b6:	fb0b a303 	mla	r3, fp, r3, sl
 800b6ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b6be:	f8dc 4000 	ldr.w	r4, [ip]
 800b6c2:	4443      	add	r3, r8
 800b6c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b6c8:	fb0b 840a 	mla	r4, fp, sl, r8
 800b6cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b6d0:	46e2      	mov	sl, ip
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6d8:	454f      	cmp	r7, r9
 800b6da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b6de:	f84a 3b04 	str.w	r3, [sl], #4
 800b6e2:	d82b      	bhi.n	800b73c <__multiply+0x120>
 800b6e4:	f8cc 8004 	str.w	r8, [ip, #4]
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b6ee:	3204      	adds	r2, #4
 800b6f0:	f1ba 0f00 	cmp.w	sl, #0
 800b6f4:	d020      	beq.n	800b738 <__multiply+0x11c>
 800b6f6:	682b      	ldr	r3, [r5, #0]
 800b6f8:	4689      	mov	r9, r1
 800b6fa:	46a8      	mov	r8, r5
 800b6fc:	f04f 0b00 	mov.w	fp, #0
 800b700:	f8b9 c000 	ldrh.w	ip, [r9]
 800b704:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b708:	fb0a 440c 	mla	r4, sl, ip, r4
 800b70c:	445c      	add	r4, fp
 800b70e:	46c4      	mov	ip, r8
 800b710:	b29b      	uxth	r3, r3
 800b712:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b716:	f84c 3b04 	str.w	r3, [ip], #4
 800b71a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b71e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b722:	0c1b      	lsrs	r3, r3, #16
 800b724:	fb0a b303 	mla	r3, sl, r3, fp
 800b728:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b72c:	454f      	cmp	r7, r9
 800b72e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b732:	d805      	bhi.n	800b740 <__multiply+0x124>
 800b734:	f8c8 3004 	str.w	r3, [r8, #4]
 800b738:	3504      	adds	r5, #4
 800b73a:	e79b      	b.n	800b674 <__multiply+0x58>
 800b73c:	46d4      	mov	ip, sl
 800b73e:	e7b3      	b.n	800b6a8 <__multiply+0x8c>
 800b740:	46e0      	mov	r8, ip
 800b742:	e7dd      	b.n	800b700 <__multiply+0xe4>
 800b744:	3e01      	subs	r6, #1
 800b746:	e799      	b.n	800b67c <__multiply+0x60>

0800b748 <__pow5mult>:
 800b748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b74c:	4615      	mov	r5, r2
 800b74e:	f012 0203 	ands.w	r2, r2, #3
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	d007      	beq.n	800b768 <__pow5mult+0x20>
 800b758:	3a01      	subs	r2, #1
 800b75a:	4c21      	ldr	r4, [pc, #132]	; (800b7e0 <__pow5mult+0x98>)
 800b75c:	2300      	movs	r3, #0
 800b75e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b762:	f7ff fe8b 	bl	800b47c <__multadd>
 800b766:	4607      	mov	r7, r0
 800b768:	10ad      	asrs	r5, r5, #2
 800b76a:	d035      	beq.n	800b7d8 <__pow5mult+0x90>
 800b76c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b76e:	b93c      	cbnz	r4, 800b780 <__pow5mult+0x38>
 800b770:	2010      	movs	r0, #16
 800b772:	f7ff fe13 	bl	800b39c <malloc>
 800b776:	6270      	str	r0, [r6, #36]	; 0x24
 800b778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b77c:	6004      	str	r4, [r0, #0]
 800b77e:	60c4      	str	r4, [r0, #12]
 800b780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b788:	b94c      	cbnz	r4, 800b79e <__pow5mult+0x56>
 800b78a:	f240 2171 	movw	r1, #625	; 0x271
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff ff3b 	bl	800b60a <__i2b>
 800b794:	2300      	movs	r3, #0
 800b796:	f8c8 0008 	str.w	r0, [r8, #8]
 800b79a:	4604      	mov	r4, r0
 800b79c:	6003      	str	r3, [r0, #0]
 800b79e:	f04f 0800 	mov.w	r8, #0
 800b7a2:	07eb      	lsls	r3, r5, #31
 800b7a4:	d50a      	bpl.n	800b7bc <__pow5mult+0x74>
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff ff36 	bl	800b61c <__multiply>
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	4681      	mov	r9, r0
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff fe4a 	bl	800b44e <_Bfree>
 800b7ba:	464f      	mov	r7, r9
 800b7bc:	106d      	asrs	r5, r5, #1
 800b7be:	d00b      	beq.n	800b7d8 <__pow5mult+0x90>
 800b7c0:	6820      	ldr	r0, [r4, #0]
 800b7c2:	b938      	cbnz	r0, 800b7d4 <__pow5mult+0x8c>
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7ff ff27 	bl	800b61c <__multiply>
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	f8c0 8000 	str.w	r8, [r0]
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	e7e4      	b.n	800b7a2 <__pow5mult+0x5a>
 800b7d8:	4638      	mov	r0, r7
 800b7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7de:	bf00      	nop
 800b7e0:	0800c340 	.word	0x0800c340

0800b7e4 <__lshift>:
 800b7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	6849      	ldr	r1, [r1, #4]
 800b7f2:	eb0a 0903 	add.w	r9, sl, r3
 800b7f6:	68a3      	ldr	r3, [r4, #8]
 800b7f8:	4607      	mov	r7, r0
 800b7fa:	4616      	mov	r6, r2
 800b7fc:	f109 0501 	add.w	r5, r9, #1
 800b800:	42ab      	cmp	r3, r5
 800b802:	db32      	blt.n	800b86a <__lshift+0x86>
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff fdee 	bl	800b3e6 <_Balloc>
 800b80a:	2300      	movs	r3, #0
 800b80c:	4680      	mov	r8, r0
 800b80e:	f100 0114 	add.w	r1, r0, #20
 800b812:	461a      	mov	r2, r3
 800b814:	4553      	cmp	r3, sl
 800b816:	db2b      	blt.n	800b870 <__lshift+0x8c>
 800b818:	6920      	ldr	r0, [r4, #16]
 800b81a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b81e:	f104 0314 	add.w	r3, r4, #20
 800b822:	f016 021f 	ands.w	r2, r6, #31
 800b826:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b82a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b82e:	d025      	beq.n	800b87c <__lshift+0x98>
 800b830:	f1c2 0e20 	rsb	lr, r2, #32
 800b834:	2000      	movs	r0, #0
 800b836:	681e      	ldr	r6, [r3, #0]
 800b838:	468a      	mov	sl, r1
 800b83a:	4096      	lsls	r6, r2
 800b83c:	4330      	orrs	r0, r6
 800b83e:	f84a 0b04 	str.w	r0, [sl], #4
 800b842:	f853 0b04 	ldr.w	r0, [r3], #4
 800b846:	459c      	cmp	ip, r3
 800b848:	fa20 f00e 	lsr.w	r0, r0, lr
 800b84c:	d814      	bhi.n	800b878 <__lshift+0x94>
 800b84e:	6048      	str	r0, [r1, #4]
 800b850:	b108      	cbz	r0, 800b856 <__lshift+0x72>
 800b852:	f109 0502 	add.w	r5, r9, #2
 800b856:	3d01      	subs	r5, #1
 800b858:	4638      	mov	r0, r7
 800b85a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b85e:	4621      	mov	r1, r4
 800b860:	f7ff fdf5 	bl	800b44e <_Bfree>
 800b864:	4640      	mov	r0, r8
 800b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86a:	3101      	adds	r1, #1
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	e7c7      	b.n	800b800 <__lshift+0x1c>
 800b870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b874:	3301      	adds	r3, #1
 800b876:	e7cd      	b.n	800b814 <__lshift+0x30>
 800b878:	4651      	mov	r1, sl
 800b87a:	e7dc      	b.n	800b836 <__lshift+0x52>
 800b87c:	3904      	subs	r1, #4
 800b87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b882:	f841 2f04 	str.w	r2, [r1, #4]!
 800b886:	459c      	cmp	ip, r3
 800b888:	d8f9      	bhi.n	800b87e <__lshift+0x9a>
 800b88a:	e7e4      	b.n	800b856 <__lshift+0x72>

0800b88c <__mcmp>:
 800b88c:	6903      	ldr	r3, [r0, #16]
 800b88e:	690a      	ldr	r2, [r1, #16]
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	b530      	push	{r4, r5, lr}
 800b894:	d10c      	bne.n	800b8b0 <__mcmp+0x24>
 800b896:	0092      	lsls	r2, r2, #2
 800b898:	3014      	adds	r0, #20
 800b89a:	3114      	adds	r1, #20
 800b89c:	1884      	adds	r4, r0, r2
 800b89e:	4411      	add	r1, r2
 800b8a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8a8:	4295      	cmp	r5, r2
 800b8aa:	d003      	beq.n	800b8b4 <__mcmp+0x28>
 800b8ac:	d305      	bcc.n	800b8ba <__mcmp+0x2e>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	bd30      	pop	{r4, r5, pc}
 800b8b4:	42a0      	cmp	r0, r4
 800b8b6:	d3f3      	bcc.n	800b8a0 <__mcmp+0x14>
 800b8b8:	e7fa      	b.n	800b8b0 <__mcmp+0x24>
 800b8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b8be:	e7f7      	b.n	800b8b0 <__mcmp+0x24>

0800b8c0 <__mdiff>:
 800b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c4:	460d      	mov	r5, r1
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	f7ff ffdd 	bl	800b88c <__mcmp>
 800b8d2:	1e06      	subs	r6, r0, #0
 800b8d4:	d108      	bne.n	800b8e8 <__mdiff+0x28>
 800b8d6:	4631      	mov	r1, r6
 800b8d8:	4638      	mov	r0, r7
 800b8da:	f7ff fd84 	bl	800b3e6 <_Balloc>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e8:	bfa4      	itt	ge
 800b8ea:	4623      	movge	r3, r4
 800b8ec:	462c      	movge	r4, r5
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	6861      	ldr	r1, [r4, #4]
 800b8f2:	bfa6      	itte	ge
 800b8f4:	461d      	movge	r5, r3
 800b8f6:	2600      	movge	r6, #0
 800b8f8:	2601      	movlt	r6, #1
 800b8fa:	f7ff fd74 	bl	800b3e6 <_Balloc>
 800b8fe:	692b      	ldr	r3, [r5, #16]
 800b900:	60c6      	str	r6, [r0, #12]
 800b902:	6926      	ldr	r6, [r4, #16]
 800b904:	f105 0914 	add.w	r9, r5, #20
 800b908:	f104 0214 	add.w	r2, r4, #20
 800b90c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b910:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b914:	f100 0514 	add.w	r5, r0, #20
 800b918:	f04f 0e00 	mov.w	lr, #0
 800b91c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b920:	f859 4b04 	ldr.w	r4, [r9], #4
 800b924:	fa1e f18a 	uxtah	r1, lr, sl
 800b928:	b2a3      	uxth	r3, r4
 800b92a:	1ac9      	subs	r1, r1, r3
 800b92c:	0c23      	lsrs	r3, r4, #16
 800b92e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b932:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b936:	b289      	uxth	r1, r1
 800b938:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b93c:	45c8      	cmp	r8, r9
 800b93e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b942:	4694      	mov	ip, r2
 800b944:	f845 3b04 	str.w	r3, [r5], #4
 800b948:	d8e8      	bhi.n	800b91c <__mdiff+0x5c>
 800b94a:	45bc      	cmp	ip, r7
 800b94c:	d304      	bcc.n	800b958 <__mdiff+0x98>
 800b94e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b952:	b183      	cbz	r3, 800b976 <__mdiff+0xb6>
 800b954:	6106      	str	r6, [r0, #16]
 800b956:	e7c5      	b.n	800b8e4 <__mdiff+0x24>
 800b958:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b95c:	fa1e f381 	uxtah	r3, lr, r1
 800b960:	141a      	asrs	r2, r3, #16
 800b962:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b966:	b29b      	uxth	r3, r3
 800b968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b96c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b970:	f845 3b04 	str.w	r3, [r5], #4
 800b974:	e7e9      	b.n	800b94a <__mdiff+0x8a>
 800b976:	3e01      	subs	r6, #1
 800b978:	e7e9      	b.n	800b94e <__mdiff+0x8e>
	...

0800b97c <__ulp>:
 800b97c:	4b12      	ldr	r3, [pc, #72]	; (800b9c8 <__ulp+0x4c>)
 800b97e:	ee10 2a90 	vmov	r2, s1
 800b982:	401a      	ands	r2, r3
 800b984:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	dd04      	ble.n	800b996 <__ulp+0x1a>
 800b98c:	2000      	movs	r0, #0
 800b98e:	4619      	mov	r1, r3
 800b990:	ec41 0b10 	vmov	d0, r0, r1
 800b994:	4770      	bx	lr
 800b996:	425b      	negs	r3, r3
 800b998:	151b      	asrs	r3, r3, #20
 800b99a:	2b13      	cmp	r3, #19
 800b99c:	f04f 0000 	mov.w	r0, #0
 800b9a0:	f04f 0100 	mov.w	r1, #0
 800b9a4:	dc04      	bgt.n	800b9b0 <__ulp+0x34>
 800b9a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b9aa:	fa42 f103 	asr.w	r1, r2, r3
 800b9ae:	e7ef      	b.n	800b990 <__ulp+0x14>
 800b9b0:	3b14      	subs	r3, #20
 800b9b2:	2b1e      	cmp	r3, #30
 800b9b4:	f04f 0201 	mov.w	r2, #1
 800b9b8:	bfda      	itte	le
 800b9ba:	f1c3 031f 	rsble	r3, r3, #31
 800b9be:	fa02 f303 	lslle.w	r3, r2, r3
 800b9c2:	4613      	movgt	r3, r2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	e7e3      	b.n	800b990 <__ulp+0x14>
 800b9c8:	7ff00000 	.word	0x7ff00000

0800b9cc <__b2d>:
 800b9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ce:	6905      	ldr	r5, [r0, #16]
 800b9d0:	f100 0714 	add.w	r7, r0, #20
 800b9d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b9d8:	1f2e      	subs	r6, r5, #4
 800b9da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f7ff fdc5 	bl	800b56e <__hi0bits>
 800b9e4:	f1c0 0320 	rsb	r3, r0, #32
 800b9e8:	280a      	cmp	r0, #10
 800b9ea:	600b      	str	r3, [r1, #0]
 800b9ec:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ba64 <__b2d+0x98>
 800b9f0:	dc14      	bgt.n	800ba1c <__b2d+0x50>
 800b9f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b9f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b9fa:	42b7      	cmp	r7, r6
 800b9fc:	ea41 030c 	orr.w	r3, r1, ip
 800ba00:	bf34      	ite	cc
 800ba02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba06:	2100      	movcs	r1, #0
 800ba08:	3015      	adds	r0, #21
 800ba0a:	fa04 f000 	lsl.w	r0, r4, r0
 800ba0e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ba12:	ea40 0201 	orr.w	r2, r0, r1
 800ba16:	ec43 2b10 	vmov	d0, r2, r3
 800ba1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba1c:	42b7      	cmp	r7, r6
 800ba1e:	bf3a      	itte	cc
 800ba20:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba28:	2100      	movcs	r1, #0
 800ba2a:	380b      	subs	r0, #11
 800ba2c:	d015      	beq.n	800ba5a <__b2d+0x8e>
 800ba2e:	4084      	lsls	r4, r0
 800ba30:	f1c0 0520 	rsb	r5, r0, #32
 800ba34:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ba38:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ba3c:	42be      	cmp	r6, r7
 800ba3e:	fa21 fc05 	lsr.w	ip, r1, r5
 800ba42:	ea44 030c 	orr.w	r3, r4, ip
 800ba46:	bf8c      	ite	hi
 800ba48:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ba4c:	2400      	movls	r4, #0
 800ba4e:	fa01 f000 	lsl.w	r0, r1, r0
 800ba52:	40ec      	lsrs	r4, r5
 800ba54:	ea40 0204 	orr.w	r2, r0, r4
 800ba58:	e7dd      	b.n	800ba16 <__b2d+0x4a>
 800ba5a:	ea44 030c 	orr.w	r3, r4, ip
 800ba5e:	460a      	mov	r2, r1
 800ba60:	e7d9      	b.n	800ba16 <__b2d+0x4a>
 800ba62:	bf00      	nop
 800ba64:	3ff00000 	.word	0x3ff00000

0800ba68 <__d2b>:
 800ba68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba6c:	460e      	mov	r6, r1
 800ba6e:	2101      	movs	r1, #1
 800ba70:	ec59 8b10 	vmov	r8, r9, d0
 800ba74:	4615      	mov	r5, r2
 800ba76:	f7ff fcb6 	bl	800b3e6 <_Balloc>
 800ba7a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ba7e:	4607      	mov	r7, r0
 800ba80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba84:	bb34      	cbnz	r4, 800bad4 <__d2b+0x6c>
 800ba86:	9301      	str	r3, [sp, #4]
 800ba88:	f1b8 0300 	subs.w	r3, r8, #0
 800ba8c:	d027      	beq.n	800bade <__d2b+0x76>
 800ba8e:	a802      	add	r0, sp, #8
 800ba90:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ba94:	f7ff fd8a 	bl	800b5ac <__lo0bits>
 800ba98:	9900      	ldr	r1, [sp, #0]
 800ba9a:	b1f0      	cbz	r0, 800bada <__d2b+0x72>
 800ba9c:	9a01      	ldr	r2, [sp, #4]
 800ba9e:	f1c0 0320 	rsb	r3, r0, #32
 800baa2:	fa02 f303 	lsl.w	r3, r2, r3
 800baa6:	430b      	orrs	r3, r1
 800baa8:	40c2      	lsrs	r2, r0
 800baaa:	617b      	str	r3, [r7, #20]
 800baac:	9201      	str	r2, [sp, #4]
 800baae:	9b01      	ldr	r3, [sp, #4]
 800bab0:	61bb      	str	r3, [r7, #24]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	bf14      	ite	ne
 800bab6:	2102      	movne	r1, #2
 800bab8:	2101      	moveq	r1, #1
 800baba:	6139      	str	r1, [r7, #16]
 800babc:	b1c4      	cbz	r4, 800baf0 <__d2b+0x88>
 800babe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bac2:	4404      	add	r4, r0
 800bac4:	6034      	str	r4, [r6, #0]
 800bac6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800baca:	6028      	str	r0, [r5, #0]
 800bacc:	4638      	mov	r0, r7
 800bace:	b003      	add	sp, #12
 800bad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bad8:	e7d5      	b.n	800ba86 <__d2b+0x1e>
 800bada:	6179      	str	r1, [r7, #20]
 800badc:	e7e7      	b.n	800baae <__d2b+0x46>
 800bade:	a801      	add	r0, sp, #4
 800bae0:	f7ff fd64 	bl	800b5ac <__lo0bits>
 800bae4:	9b01      	ldr	r3, [sp, #4]
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	2101      	movs	r1, #1
 800baea:	6139      	str	r1, [r7, #16]
 800baec:	3020      	adds	r0, #32
 800baee:	e7e5      	b.n	800babc <__d2b+0x54>
 800baf0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800baf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800baf8:	6030      	str	r0, [r6, #0]
 800bafa:	6918      	ldr	r0, [r3, #16]
 800bafc:	f7ff fd37 	bl	800b56e <__hi0bits>
 800bb00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb04:	e7e1      	b.n	800baca <__d2b+0x62>

0800bb06 <__ratio>:
 800bb06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0a:	4688      	mov	r8, r1
 800bb0c:	4669      	mov	r1, sp
 800bb0e:	4681      	mov	r9, r0
 800bb10:	f7ff ff5c 	bl	800b9cc <__b2d>
 800bb14:	a901      	add	r1, sp, #4
 800bb16:	4640      	mov	r0, r8
 800bb18:	ec57 6b10 	vmov	r6, r7, d0
 800bb1c:	f7ff ff56 	bl	800b9cc <__b2d>
 800bb20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb28:	eba3 0c02 	sub.w	ip, r3, r2
 800bb2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb30:	1a9b      	subs	r3, r3, r2
 800bb32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb36:	ec5b ab10 	vmov	sl, fp, d0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	bfce      	itee	gt
 800bb3e:	463a      	movgt	r2, r7
 800bb40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb44:	465a      	movle	r2, fp
 800bb46:	4659      	mov	r1, fp
 800bb48:	463d      	mov	r5, r7
 800bb4a:	bfd4      	ite	le
 800bb4c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bb50:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bb54:	4630      	mov	r0, r6
 800bb56:	ee10 2a10 	vmov	r2, s0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	f7f4 fe75 	bl	800084c <__aeabi_ddiv>
 800bb62:	ec41 0b10 	vmov	d0, r0, r1
 800bb66:	b003      	add	sp, #12
 800bb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb6c <__copybits>:
 800bb6c:	3901      	subs	r1, #1
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	1149      	asrs	r1, r1, #5
 800bb72:	6914      	ldr	r4, [r2, #16]
 800bb74:	3101      	adds	r1, #1
 800bb76:	f102 0314 	add.w	r3, r2, #20
 800bb7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb82:	42a3      	cmp	r3, r4
 800bb84:	4602      	mov	r2, r0
 800bb86:	d303      	bcc.n	800bb90 <__copybits+0x24>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	428a      	cmp	r2, r1
 800bb8c:	d305      	bcc.n	800bb9a <__copybits+0x2e>
 800bb8e:	bd10      	pop	{r4, pc}
 800bb90:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb94:	f840 2b04 	str.w	r2, [r0], #4
 800bb98:	e7f3      	b.n	800bb82 <__copybits+0x16>
 800bb9a:	f842 3b04 	str.w	r3, [r2], #4
 800bb9e:	e7f4      	b.n	800bb8a <__copybits+0x1e>

0800bba0 <__any_on>:
 800bba0:	f100 0214 	add.w	r2, r0, #20
 800bba4:	6900      	ldr	r0, [r0, #16]
 800bba6:	114b      	asrs	r3, r1, #5
 800bba8:	4298      	cmp	r0, r3
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	db11      	blt.n	800bbd2 <__any_on+0x32>
 800bbae:	dd0a      	ble.n	800bbc6 <__any_on+0x26>
 800bbb0:	f011 011f 	ands.w	r1, r1, #31
 800bbb4:	d007      	beq.n	800bbc6 <__any_on+0x26>
 800bbb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbba:	fa24 f001 	lsr.w	r0, r4, r1
 800bbbe:	fa00 f101 	lsl.w	r1, r0, r1
 800bbc2:	428c      	cmp	r4, r1
 800bbc4:	d10b      	bne.n	800bbde <__any_on+0x3e>
 800bbc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d803      	bhi.n	800bbd6 <__any_on+0x36>
 800bbce:	2000      	movs	r0, #0
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	e7f7      	b.n	800bbc6 <__any_on+0x26>
 800bbd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbda:	2900      	cmp	r1, #0
 800bbdc:	d0f5      	beq.n	800bbca <__any_on+0x2a>
 800bbde:	2001      	movs	r0, #1
 800bbe0:	e7f6      	b.n	800bbd0 <__any_on+0x30>

0800bbe2 <_calloc_r>:
 800bbe2:	b538      	push	{r3, r4, r5, lr}
 800bbe4:	fb02 f401 	mul.w	r4, r2, r1
 800bbe8:	4621      	mov	r1, r4
 800bbea:	f000 f857 	bl	800bc9c <_malloc_r>
 800bbee:	4605      	mov	r5, r0
 800bbf0:	b118      	cbz	r0, 800bbfa <_calloc_r+0x18>
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	f7fc fcdf 	bl	80085b8 <memset>
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bc00 <_free_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4605      	mov	r5, r0
 800bc04:	2900      	cmp	r1, #0
 800bc06:	d045      	beq.n	800bc94 <_free_r+0x94>
 800bc08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0c:	1f0c      	subs	r4, r1, #4
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	bfb8      	it	lt
 800bc12:	18e4      	addlt	r4, r4, r3
 800bc14:	f000 fa36 	bl	800c084 <__malloc_lock>
 800bc18:	4a1f      	ldr	r2, [pc, #124]	; (800bc98 <_free_r+0x98>)
 800bc1a:	6813      	ldr	r3, [r2, #0]
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	b933      	cbnz	r3, 800bc2e <_free_r+0x2e>
 800bc20:	6063      	str	r3, [r4, #4]
 800bc22:	6014      	str	r4, [r2, #0]
 800bc24:	4628      	mov	r0, r5
 800bc26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc2a:	f000 ba2c 	b.w	800c086 <__malloc_unlock>
 800bc2e:	42a3      	cmp	r3, r4
 800bc30:	d90c      	bls.n	800bc4c <_free_r+0x4c>
 800bc32:	6821      	ldr	r1, [r4, #0]
 800bc34:	1862      	adds	r2, r4, r1
 800bc36:	4293      	cmp	r3, r2
 800bc38:	bf04      	itt	eq
 800bc3a:	681a      	ldreq	r2, [r3, #0]
 800bc3c:	685b      	ldreq	r3, [r3, #4]
 800bc3e:	6063      	str	r3, [r4, #4]
 800bc40:	bf04      	itt	eq
 800bc42:	1852      	addeq	r2, r2, r1
 800bc44:	6022      	streq	r2, [r4, #0]
 800bc46:	6004      	str	r4, [r0, #0]
 800bc48:	e7ec      	b.n	800bc24 <_free_r+0x24>
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	b10a      	cbz	r2, 800bc54 <_free_r+0x54>
 800bc50:	42a2      	cmp	r2, r4
 800bc52:	d9fa      	bls.n	800bc4a <_free_r+0x4a>
 800bc54:	6819      	ldr	r1, [r3, #0]
 800bc56:	1858      	adds	r0, r3, r1
 800bc58:	42a0      	cmp	r0, r4
 800bc5a:	d10b      	bne.n	800bc74 <_free_r+0x74>
 800bc5c:	6820      	ldr	r0, [r4, #0]
 800bc5e:	4401      	add	r1, r0
 800bc60:	1858      	adds	r0, r3, r1
 800bc62:	4282      	cmp	r2, r0
 800bc64:	6019      	str	r1, [r3, #0]
 800bc66:	d1dd      	bne.n	800bc24 <_free_r+0x24>
 800bc68:	6810      	ldr	r0, [r2, #0]
 800bc6a:	6852      	ldr	r2, [r2, #4]
 800bc6c:	605a      	str	r2, [r3, #4]
 800bc6e:	4401      	add	r1, r0
 800bc70:	6019      	str	r1, [r3, #0]
 800bc72:	e7d7      	b.n	800bc24 <_free_r+0x24>
 800bc74:	d902      	bls.n	800bc7c <_free_r+0x7c>
 800bc76:	230c      	movs	r3, #12
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	e7d3      	b.n	800bc24 <_free_r+0x24>
 800bc7c:	6820      	ldr	r0, [r4, #0]
 800bc7e:	1821      	adds	r1, r4, r0
 800bc80:	428a      	cmp	r2, r1
 800bc82:	bf04      	itt	eq
 800bc84:	6811      	ldreq	r1, [r2, #0]
 800bc86:	6852      	ldreq	r2, [r2, #4]
 800bc88:	6062      	str	r2, [r4, #4]
 800bc8a:	bf04      	itt	eq
 800bc8c:	1809      	addeq	r1, r1, r0
 800bc8e:	6021      	streq	r1, [r4, #0]
 800bc90:	605c      	str	r4, [r3, #4]
 800bc92:	e7c7      	b.n	800bc24 <_free_r+0x24>
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	2000028c 	.word	0x2000028c

0800bc9c <_malloc_r>:
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	1ccd      	adds	r5, r1, #3
 800bca0:	f025 0503 	bic.w	r5, r5, #3
 800bca4:	3508      	adds	r5, #8
 800bca6:	2d0c      	cmp	r5, #12
 800bca8:	bf38      	it	cc
 800bcaa:	250c      	movcc	r5, #12
 800bcac:	2d00      	cmp	r5, #0
 800bcae:	4606      	mov	r6, r0
 800bcb0:	db01      	blt.n	800bcb6 <_malloc_r+0x1a>
 800bcb2:	42a9      	cmp	r1, r5
 800bcb4:	d903      	bls.n	800bcbe <_malloc_r+0x22>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	6033      	str	r3, [r6, #0]
 800bcba:	2000      	movs	r0, #0
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	f000 f9e1 	bl	800c084 <__malloc_lock>
 800bcc2:	4a21      	ldr	r2, [pc, #132]	; (800bd48 <_malloc_r+0xac>)
 800bcc4:	6814      	ldr	r4, [r2, #0]
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	b991      	cbnz	r1, 800bcf0 <_malloc_r+0x54>
 800bcca:	4c20      	ldr	r4, [pc, #128]	; (800bd4c <_malloc_r+0xb0>)
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	b91b      	cbnz	r3, 800bcd8 <_malloc_r+0x3c>
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f000 f98f 	bl	800bff4 <_sbrk_r>
 800bcd6:	6020      	str	r0, [r4, #0]
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 f98a 	bl	800bff4 <_sbrk_r>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d124      	bne.n	800bd2e <_malloc_r+0x92>
 800bce4:	230c      	movs	r3, #12
 800bce6:	6033      	str	r3, [r6, #0]
 800bce8:	4630      	mov	r0, r6
 800bcea:	f000 f9cc 	bl	800c086 <__malloc_unlock>
 800bcee:	e7e4      	b.n	800bcba <_malloc_r+0x1e>
 800bcf0:	680b      	ldr	r3, [r1, #0]
 800bcf2:	1b5b      	subs	r3, r3, r5
 800bcf4:	d418      	bmi.n	800bd28 <_malloc_r+0x8c>
 800bcf6:	2b0b      	cmp	r3, #11
 800bcf8:	d90f      	bls.n	800bd1a <_malloc_r+0x7e>
 800bcfa:	600b      	str	r3, [r1, #0]
 800bcfc:	50cd      	str	r5, [r1, r3]
 800bcfe:	18cc      	adds	r4, r1, r3
 800bd00:	4630      	mov	r0, r6
 800bd02:	f000 f9c0 	bl	800c086 <__malloc_unlock>
 800bd06:	f104 000b 	add.w	r0, r4, #11
 800bd0a:	1d23      	adds	r3, r4, #4
 800bd0c:	f020 0007 	bic.w	r0, r0, #7
 800bd10:	1ac3      	subs	r3, r0, r3
 800bd12:	d0d3      	beq.n	800bcbc <_malloc_r+0x20>
 800bd14:	425a      	negs	r2, r3
 800bd16:	50e2      	str	r2, [r4, r3]
 800bd18:	e7d0      	b.n	800bcbc <_malloc_r+0x20>
 800bd1a:	428c      	cmp	r4, r1
 800bd1c:	684b      	ldr	r3, [r1, #4]
 800bd1e:	bf16      	itet	ne
 800bd20:	6063      	strne	r3, [r4, #4]
 800bd22:	6013      	streq	r3, [r2, #0]
 800bd24:	460c      	movne	r4, r1
 800bd26:	e7eb      	b.n	800bd00 <_malloc_r+0x64>
 800bd28:	460c      	mov	r4, r1
 800bd2a:	6849      	ldr	r1, [r1, #4]
 800bd2c:	e7cc      	b.n	800bcc8 <_malloc_r+0x2c>
 800bd2e:	1cc4      	adds	r4, r0, #3
 800bd30:	f024 0403 	bic.w	r4, r4, #3
 800bd34:	42a0      	cmp	r0, r4
 800bd36:	d005      	beq.n	800bd44 <_malloc_r+0xa8>
 800bd38:	1a21      	subs	r1, r4, r0
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 f95a 	bl	800bff4 <_sbrk_r>
 800bd40:	3001      	adds	r0, #1
 800bd42:	d0cf      	beq.n	800bce4 <_malloc_r+0x48>
 800bd44:	6025      	str	r5, [r4, #0]
 800bd46:	e7db      	b.n	800bd00 <_malloc_r+0x64>
 800bd48:	2000028c 	.word	0x2000028c
 800bd4c:	20000290 	.word	0x20000290

0800bd50 <__ssputs_r>:
 800bd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd54:	688e      	ldr	r6, [r1, #8]
 800bd56:	429e      	cmp	r6, r3
 800bd58:	4682      	mov	sl, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	4690      	mov	r8, r2
 800bd5e:	4699      	mov	r9, r3
 800bd60:	d837      	bhi.n	800bdd2 <__ssputs_r+0x82>
 800bd62:	898a      	ldrh	r2, [r1, #12]
 800bd64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd68:	d031      	beq.n	800bdce <__ssputs_r+0x7e>
 800bd6a:	6825      	ldr	r5, [r4, #0]
 800bd6c:	6909      	ldr	r1, [r1, #16]
 800bd6e:	1a6f      	subs	r7, r5, r1
 800bd70:	6965      	ldr	r5, [r4, #20]
 800bd72:	2302      	movs	r3, #2
 800bd74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd78:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd7c:	f109 0301 	add.w	r3, r9, #1
 800bd80:	443b      	add	r3, r7
 800bd82:	429d      	cmp	r5, r3
 800bd84:	bf38      	it	cc
 800bd86:	461d      	movcc	r5, r3
 800bd88:	0553      	lsls	r3, r2, #21
 800bd8a:	d530      	bpl.n	800bdee <__ssputs_r+0x9e>
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	f7ff ff85 	bl	800bc9c <_malloc_r>
 800bd92:	4606      	mov	r6, r0
 800bd94:	b950      	cbnz	r0, 800bdac <__ssputs_r+0x5c>
 800bd96:	230c      	movs	r3, #12
 800bd98:	f8ca 3000 	str.w	r3, [sl]
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda2:	81a3      	strh	r3, [r4, #12]
 800bda4:	f04f 30ff 	mov.w	r0, #4294967295
 800bda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdac:	463a      	mov	r2, r7
 800bdae:	6921      	ldr	r1, [r4, #16]
 800bdb0:	f7ff fb0e 	bl	800b3d0 <memcpy>
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdbe:	81a3      	strh	r3, [r4, #12]
 800bdc0:	6126      	str	r6, [r4, #16]
 800bdc2:	6165      	str	r5, [r4, #20]
 800bdc4:	443e      	add	r6, r7
 800bdc6:	1bed      	subs	r5, r5, r7
 800bdc8:	6026      	str	r6, [r4, #0]
 800bdca:	60a5      	str	r5, [r4, #8]
 800bdcc:	464e      	mov	r6, r9
 800bdce:	454e      	cmp	r6, r9
 800bdd0:	d900      	bls.n	800bdd4 <__ssputs_r+0x84>
 800bdd2:	464e      	mov	r6, r9
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	4641      	mov	r1, r8
 800bdd8:	6820      	ldr	r0, [r4, #0]
 800bdda:	f000 f93a 	bl	800c052 <memmove>
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	1b9b      	subs	r3, r3, r6
 800bde2:	60a3      	str	r3, [r4, #8]
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	441e      	add	r6, r3
 800bde8:	6026      	str	r6, [r4, #0]
 800bdea:	2000      	movs	r0, #0
 800bdec:	e7dc      	b.n	800bda8 <__ssputs_r+0x58>
 800bdee:	462a      	mov	r2, r5
 800bdf0:	f000 f94a 	bl	800c088 <_realloc_r>
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d1e2      	bne.n	800bdc0 <__ssputs_r+0x70>
 800bdfa:	6921      	ldr	r1, [r4, #16]
 800bdfc:	4650      	mov	r0, sl
 800bdfe:	f7ff feff 	bl	800bc00 <_free_r>
 800be02:	e7c8      	b.n	800bd96 <__ssputs_r+0x46>

0800be04 <_svfiprintf_r>:
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	461d      	mov	r5, r3
 800be0a:	898b      	ldrh	r3, [r1, #12]
 800be0c:	061f      	lsls	r7, r3, #24
 800be0e:	b09d      	sub	sp, #116	; 0x74
 800be10:	4680      	mov	r8, r0
 800be12:	460c      	mov	r4, r1
 800be14:	4616      	mov	r6, r2
 800be16:	d50f      	bpl.n	800be38 <_svfiprintf_r+0x34>
 800be18:	690b      	ldr	r3, [r1, #16]
 800be1a:	b96b      	cbnz	r3, 800be38 <_svfiprintf_r+0x34>
 800be1c:	2140      	movs	r1, #64	; 0x40
 800be1e:	f7ff ff3d 	bl	800bc9c <_malloc_r>
 800be22:	6020      	str	r0, [r4, #0]
 800be24:	6120      	str	r0, [r4, #16]
 800be26:	b928      	cbnz	r0, 800be34 <_svfiprintf_r+0x30>
 800be28:	230c      	movs	r3, #12
 800be2a:	f8c8 3000 	str.w	r3, [r8]
 800be2e:	f04f 30ff 	mov.w	r0, #4294967295
 800be32:	e0c8      	b.n	800bfc6 <_svfiprintf_r+0x1c2>
 800be34:	2340      	movs	r3, #64	; 0x40
 800be36:	6163      	str	r3, [r4, #20]
 800be38:	2300      	movs	r3, #0
 800be3a:	9309      	str	r3, [sp, #36]	; 0x24
 800be3c:	2320      	movs	r3, #32
 800be3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be42:	2330      	movs	r3, #48	; 0x30
 800be44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be48:	9503      	str	r5, [sp, #12]
 800be4a:	f04f 0b01 	mov.w	fp, #1
 800be4e:	4637      	mov	r7, r6
 800be50:	463d      	mov	r5, r7
 800be52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be56:	b10b      	cbz	r3, 800be5c <_svfiprintf_r+0x58>
 800be58:	2b25      	cmp	r3, #37	; 0x25
 800be5a:	d13e      	bne.n	800beda <_svfiprintf_r+0xd6>
 800be5c:	ebb7 0a06 	subs.w	sl, r7, r6
 800be60:	d00b      	beq.n	800be7a <_svfiprintf_r+0x76>
 800be62:	4653      	mov	r3, sl
 800be64:	4632      	mov	r2, r6
 800be66:	4621      	mov	r1, r4
 800be68:	4640      	mov	r0, r8
 800be6a:	f7ff ff71 	bl	800bd50 <__ssputs_r>
 800be6e:	3001      	adds	r0, #1
 800be70:	f000 80a4 	beq.w	800bfbc <_svfiprintf_r+0x1b8>
 800be74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be76:	4453      	add	r3, sl
 800be78:	9309      	str	r3, [sp, #36]	; 0x24
 800be7a:	783b      	ldrb	r3, [r7, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 809d 	beq.w	800bfbc <_svfiprintf_r+0x1b8>
 800be82:	2300      	movs	r3, #0
 800be84:	f04f 32ff 	mov.w	r2, #4294967295
 800be88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be94:	931a      	str	r3, [sp, #104]	; 0x68
 800be96:	462f      	mov	r7, r5
 800be98:	2205      	movs	r2, #5
 800be9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be9e:	4850      	ldr	r0, [pc, #320]	; (800bfe0 <_svfiprintf_r+0x1dc>)
 800bea0:	f7f4 f99e 	bl	80001e0 <memchr>
 800bea4:	9b04      	ldr	r3, [sp, #16]
 800bea6:	b9d0      	cbnz	r0, 800bede <_svfiprintf_r+0xda>
 800bea8:	06d9      	lsls	r1, r3, #27
 800beaa:	bf44      	itt	mi
 800beac:	2220      	movmi	r2, #32
 800beae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800beb2:	071a      	lsls	r2, r3, #28
 800beb4:	bf44      	itt	mi
 800beb6:	222b      	movmi	r2, #43	; 0x2b
 800beb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bebc:	782a      	ldrb	r2, [r5, #0]
 800bebe:	2a2a      	cmp	r2, #42	; 0x2a
 800bec0:	d015      	beq.n	800beee <_svfiprintf_r+0xea>
 800bec2:	9a07      	ldr	r2, [sp, #28]
 800bec4:	462f      	mov	r7, r5
 800bec6:	2000      	movs	r0, #0
 800bec8:	250a      	movs	r5, #10
 800beca:	4639      	mov	r1, r7
 800becc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bed0:	3b30      	subs	r3, #48	; 0x30
 800bed2:	2b09      	cmp	r3, #9
 800bed4:	d94d      	bls.n	800bf72 <_svfiprintf_r+0x16e>
 800bed6:	b1b8      	cbz	r0, 800bf08 <_svfiprintf_r+0x104>
 800bed8:	e00f      	b.n	800befa <_svfiprintf_r+0xf6>
 800beda:	462f      	mov	r7, r5
 800bedc:	e7b8      	b.n	800be50 <_svfiprintf_r+0x4c>
 800bede:	4a40      	ldr	r2, [pc, #256]	; (800bfe0 <_svfiprintf_r+0x1dc>)
 800bee0:	1a80      	subs	r0, r0, r2
 800bee2:	fa0b f000 	lsl.w	r0, fp, r0
 800bee6:	4318      	orrs	r0, r3
 800bee8:	9004      	str	r0, [sp, #16]
 800beea:	463d      	mov	r5, r7
 800beec:	e7d3      	b.n	800be96 <_svfiprintf_r+0x92>
 800beee:	9a03      	ldr	r2, [sp, #12]
 800bef0:	1d11      	adds	r1, r2, #4
 800bef2:	6812      	ldr	r2, [r2, #0]
 800bef4:	9103      	str	r1, [sp, #12]
 800bef6:	2a00      	cmp	r2, #0
 800bef8:	db01      	blt.n	800befe <_svfiprintf_r+0xfa>
 800befa:	9207      	str	r2, [sp, #28]
 800befc:	e004      	b.n	800bf08 <_svfiprintf_r+0x104>
 800befe:	4252      	negs	r2, r2
 800bf00:	f043 0302 	orr.w	r3, r3, #2
 800bf04:	9207      	str	r2, [sp, #28]
 800bf06:	9304      	str	r3, [sp, #16]
 800bf08:	783b      	ldrb	r3, [r7, #0]
 800bf0a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf0c:	d10c      	bne.n	800bf28 <_svfiprintf_r+0x124>
 800bf0e:	787b      	ldrb	r3, [r7, #1]
 800bf10:	2b2a      	cmp	r3, #42	; 0x2a
 800bf12:	d133      	bne.n	800bf7c <_svfiprintf_r+0x178>
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	1d1a      	adds	r2, r3, #4
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	9203      	str	r2, [sp, #12]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	bfb8      	it	lt
 800bf20:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf24:	3702      	adds	r7, #2
 800bf26:	9305      	str	r3, [sp, #20]
 800bf28:	4d2e      	ldr	r5, [pc, #184]	; (800bfe4 <_svfiprintf_r+0x1e0>)
 800bf2a:	7839      	ldrb	r1, [r7, #0]
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f7f4 f956 	bl	80001e0 <memchr>
 800bf34:	b138      	cbz	r0, 800bf46 <_svfiprintf_r+0x142>
 800bf36:	2340      	movs	r3, #64	; 0x40
 800bf38:	1b40      	subs	r0, r0, r5
 800bf3a:	fa03 f000 	lsl.w	r0, r3, r0
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	4303      	orrs	r3, r0
 800bf42:	3701      	adds	r7, #1
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	7839      	ldrb	r1, [r7, #0]
 800bf48:	4827      	ldr	r0, [pc, #156]	; (800bfe8 <_svfiprintf_r+0x1e4>)
 800bf4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf4e:	2206      	movs	r2, #6
 800bf50:	1c7e      	adds	r6, r7, #1
 800bf52:	f7f4 f945 	bl	80001e0 <memchr>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d038      	beq.n	800bfcc <_svfiprintf_r+0x1c8>
 800bf5a:	4b24      	ldr	r3, [pc, #144]	; (800bfec <_svfiprintf_r+0x1e8>)
 800bf5c:	bb13      	cbnz	r3, 800bfa4 <_svfiprintf_r+0x1a0>
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	3307      	adds	r3, #7
 800bf62:	f023 0307 	bic.w	r3, r3, #7
 800bf66:	3308      	adds	r3, #8
 800bf68:	9303      	str	r3, [sp, #12]
 800bf6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf6c:	444b      	add	r3, r9
 800bf6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf70:	e76d      	b.n	800be4e <_svfiprintf_r+0x4a>
 800bf72:	fb05 3202 	mla	r2, r5, r2, r3
 800bf76:	2001      	movs	r0, #1
 800bf78:	460f      	mov	r7, r1
 800bf7a:	e7a6      	b.n	800beca <_svfiprintf_r+0xc6>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	3701      	adds	r7, #1
 800bf80:	9305      	str	r3, [sp, #20]
 800bf82:	4619      	mov	r1, r3
 800bf84:	250a      	movs	r5, #10
 800bf86:	4638      	mov	r0, r7
 800bf88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf8c:	3a30      	subs	r2, #48	; 0x30
 800bf8e:	2a09      	cmp	r2, #9
 800bf90:	d903      	bls.n	800bf9a <_svfiprintf_r+0x196>
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0c8      	beq.n	800bf28 <_svfiprintf_r+0x124>
 800bf96:	9105      	str	r1, [sp, #20]
 800bf98:	e7c6      	b.n	800bf28 <_svfiprintf_r+0x124>
 800bf9a:	fb05 2101 	mla	r1, r5, r1, r2
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	e7f0      	b.n	800bf86 <_svfiprintf_r+0x182>
 800bfa4:	ab03      	add	r3, sp, #12
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	4622      	mov	r2, r4
 800bfaa:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <_svfiprintf_r+0x1ec>)
 800bfac:	a904      	add	r1, sp, #16
 800bfae:	4640      	mov	r0, r8
 800bfb0:	f7fc fb9e 	bl	80086f0 <_printf_float>
 800bfb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bfb8:	4681      	mov	r9, r0
 800bfba:	d1d6      	bne.n	800bf6a <_svfiprintf_r+0x166>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	065b      	lsls	r3, r3, #25
 800bfc0:	f53f af35 	bmi.w	800be2e <_svfiprintf_r+0x2a>
 800bfc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfc6:	b01d      	add	sp, #116	; 0x74
 800bfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfcc:	ab03      	add	r3, sp, #12
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	4622      	mov	r2, r4
 800bfd2:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <_svfiprintf_r+0x1ec>)
 800bfd4:	a904      	add	r1, sp, #16
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	f7fc fe40 	bl	8008c5c <_printf_i>
 800bfdc:	e7ea      	b.n	800bfb4 <_svfiprintf_r+0x1b0>
 800bfde:	bf00      	nop
 800bfe0:	0800c34c 	.word	0x0800c34c
 800bfe4:	0800c352 	.word	0x0800c352
 800bfe8:	0800c356 	.word	0x0800c356
 800bfec:	080086f1 	.word	0x080086f1
 800bff0:	0800bd51 	.word	0x0800bd51

0800bff4 <_sbrk_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4c06      	ldr	r4, [pc, #24]	; (800c010 <_sbrk_r+0x1c>)
 800bff8:	2300      	movs	r3, #0
 800bffa:	4605      	mov	r5, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	f7f7 f8b2 	bl	8003168 <_sbrk>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_sbrk_r+0x1a>
 800c008:	6823      	ldr	r3, [r4, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_sbrk_r+0x1a>
 800c00c:	602b      	str	r3, [r5, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20000c3c 	.word	0x20000c3c

0800c014 <strncmp>:
 800c014:	b510      	push	{r4, lr}
 800c016:	b16a      	cbz	r2, 800c034 <strncmp+0x20>
 800c018:	3901      	subs	r1, #1
 800c01a:	1884      	adds	r4, r0, r2
 800c01c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c020:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c024:	4293      	cmp	r3, r2
 800c026:	d103      	bne.n	800c030 <strncmp+0x1c>
 800c028:	42a0      	cmp	r0, r4
 800c02a:	d001      	beq.n	800c030 <strncmp+0x1c>
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1f5      	bne.n	800c01c <strncmp+0x8>
 800c030:	1a98      	subs	r0, r3, r2
 800c032:	bd10      	pop	{r4, pc}
 800c034:	4610      	mov	r0, r2
 800c036:	e7fc      	b.n	800c032 <strncmp+0x1e>

0800c038 <__ascii_wctomb>:
 800c038:	b149      	cbz	r1, 800c04e <__ascii_wctomb+0x16>
 800c03a:	2aff      	cmp	r2, #255	; 0xff
 800c03c:	bf85      	ittet	hi
 800c03e:	238a      	movhi	r3, #138	; 0x8a
 800c040:	6003      	strhi	r3, [r0, #0]
 800c042:	700a      	strbls	r2, [r1, #0]
 800c044:	f04f 30ff 	movhi.w	r0, #4294967295
 800c048:	bf98      	it	ls
 800c04a:	2001      	movls	r0, #1
 800c04c:	4770      	bx	lr
 800c04e:	4608      	mov	r0, r1
 800c050:	4770      	bx	lr

0800c052 <memmove>:
 800c052:	4288      	cmp	r0, r1
 800c054:	b510      	push	{r4, lr}
 800c056:	eb01 0302 	add.w	r3, r1, r2
 800c05a:	d807      	bhi.n	800c06c <memmove+0x1a>
 800c05c:	1e42      	subs	r2, r0, #1
 800c05e:	4299      	cmp	r1, r3
 800c060:	d00a      	beq.n	800c078 <memmove+0x26>
 800c062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c066:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c06a:	e7f8      	b.n	800c05e <memmove+0xc>
 800c06c:	4283      	cmp	r3, r0
 800c06e:	d9f5      	bls.n	800c05c <memmove+0xa>
 800c070:	1881      	adds	r1, r0, r2
 800c072:	1ad2      	subs	r2, r2, r3
 800c074:	42d3      	cmn	r3, r2
 800c076:	d100      	bne.n	800c07a <memmove+0x28>
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c07e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c082:	e7f7      	b.n	800c074 <memmove+0x22>

0800c084 <__malloc_lock>:
 800c084:	4770      	bx	lr

0800c086 <__malloc_unlock>:
 800c086:	4770      	bx	lr

0800c088 <_realloc_r>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	4607      	mov	r7, r0
 800c08c:	4614      	mov	r4, r2
 800c08e:	460e      	mov	r6, r1
 800c090:	b921      	cbnz	r1, 800c09c <_realloc_r+0x14>
 800c092:	4611      	mov	r1, r2
 800c094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c098:	f7ff be00 	b.w	800bc9c <_malloc_r>
 800c09c:	b922      	cbnz	r2, 800c0a8 <_realloc_r+0x20>
 800c09e:	f7ff fdaf 	bl	800bc00 <_free_r>
 800c0a2:	4625      	mov	r5, r4
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a8:	f000 f814 	bl	800c0d4 <_malloc_usable_size_r>
 800c0ac:	42a0      	cmp	r0, r4
 800c0ae:	d20f      	bcs.n	800c0d0 <_realloc_r+0x48>
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7ff fdf2 	bl	800bc9c <_malloc_r>
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d0f2      	beq.n	800c0a4 <_realloc_r+0x1c>
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	f7ff f985 	bl	800b3d0 <memcpy>
 800c0c6:	4631      	mov	r1, r6
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f7ff fd99 	bl	800bc00 <_free_r>
 800c0ce:	e7e9      	b.n	800c0a4 <_realloc_r+0x1c>
 800c0d0:	4635      	mov	r5, r6
 800c0d2:	e7e7      	b.n	800c0a4 <_realloc_r+0x1c>

0800c0d4 <_malloc_usable_size_r>:
 800c0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0d8:	1f18      	subs	r0, r3, #4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bfbc      	itt	lt
 800c0de:	580b      	ldrlt	r3, [r1, r0]
 800c0e0:	18c0      	addlt	r0, r0, r3
 800c0e2:	4770      	bx	lr

0800c0e4 <_init>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	bf00      	nop
 800c0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ea:	bc08      	pop	{r3}
 800c0ec:	469e      	mov	lr, r3
 800c0ee:	4770      	bx	lr

0800c0f0 <_fini>:
 800c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f2:	bf00      	nop
 800c0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f6:	bc08      	pop	{r3}
 800c0f8:	469e      	mov	lr, r3
 800c0fa:	4770      	bx	lr
